digraph {
    "ngx_http_quic_send_chain入口函数"[fillcolor=red, style=filled];
    "if ((buf_len == 0 || in->buf->in_file || in->buf->last_in_chain) && in->buf->last_buf)"[shape=diamond];
    "if (in->buf->in_file)"[shape=diamond];

    "ngx_http_quic_send_chain入口函数"->"while (in)循环"[style=dashed, color=red];
    "while (in)循环" -> "buf_len = ngx_buf_size(in->buf)"[color=red, style=dashed];
    "buf_len = ngx_buf_size(in->buf)"->"if ((buf_len == 0 || in->buf->in_file || in->buf->last_in_chain) && in->buf->last_buf)"[color=red];
    "if ((buf_len == 0 || in->buf->in_file || in->buf->last_in_chain) && in->buf->last_buf)"->"last=1"[label=Y];
    "if ((buf_len == 0 || in->buf->in_file || in->buf->last_in_chain) && in->buf->last_buf)"->"if (in->buf->in_file)"[label=N];
    "last=1"->"if (in->buf->in_file)"[label=N];
    "if (in->buf->in_file)"->"file_buf = ngx_alloc(buf_len, r->connection->log)"[label=Y];
    "file_buf = ngx_alloc(buf_len, r->connection->log)"->"n = read(in->buf->file->fd, file_buf, buf_len)";
    "n = read(in->buf->file->fd, file_buf, buf_len)"->"int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)";
    "int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)"->"free(file_buf)";
    "free(file_buf)"->"if (in->buf->in_file)";
    "if (in->buf->in_file)"->"in>t ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)"[label=N];
    "int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)"->"in = in->next"[color=red];
    "in = in->next"->"while (in)循环"[color=red, style=dashed];
    "while (in)循环"->"return in"[color=red];
    "return in"->"ngx_http_quic_send_chain入口函数"[color=red, style=dashed];


subgraph cluster_ngx_http_quic_response_body_available {
    "int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)"->"string ngx_body = string(reinterpret_cast<char*>(buf), buf_len)"[style=dashed];
    "string ngx_body = string(reinterpret_cast<char*>(buf), buf_len)"->"quic_stream->OnNginxBodyAvailable(ngx_body, fin)";
    "quic_stream->OnNginxBodyAvailable(ngx_body, fin)"->"return 0";
    "return 0"->"int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)"[style=dashed];
}

subgraph cluster_stream_OnNginxBodyAvailable {
    "quic_stream->OnNginxBodyAvailable(ngx_body, fin)"->"void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &body, bool fin)"[dir=both, style=dashed];
    "void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &body, bool fin)"->"if (write_side_closed() || fin_buffered()"[style=dashed];
    "if (write_side_closed() || fin_buffered()"->"return;"[label=Y];
    "if (write_side_closed() || fin_buffered()"->"WriteOrBufferData(body, fin, nullptr)"[label=N];
    "return;"->"WriteOrBufferData(body, fin, nullptr)";
    "WriteOrBufferData(body, fin, nullptr)"->"void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &body, bool fin)"[style=dashed];
}

subgraph cluster_QuicStream_WriteOrBufferData {
    "if (data.length() > 0)"[shape=diamond];
    "if (!had_buffered_data && (HasBufferedData() || fin_buffered_))"[shape=diamond];

    "WriteOrBufferData(body, fin, nullptr)"->"void QuicStream::WriteOrBufferData"[dir=both, style=dashed];
    "void QuicStream::WriteOrBufferData"->"if (data.length() > 0)"[style=dashed];
    "if (data.length() > 0)"->"struct iovec iov(MakeIovec(data))"[label=Y];
    "struct iovec iov(MakeIovec(data))"->"send_buffer_.SaveStreamData(&iov, 1, 0, data.length())";
    "send_buffer_.SaveStreamData(&iov, 1, 0, data.length())"->"OnDataBuffered(offset, data.length(), ack_listener)";
    "OnDataBuffered(offset, data.length(), ack_listener)"->"if (!had_buffered_data && (HasBufferedData() || fin_buffered_))";

    "if (data.length() > 0)"->"if (!had_buffered_data && (HasBufferedData() || fin_buffered_))"[label=N];

    "if (!had_buffered_data && (HasBufferedData() || fin_buffered_))"->"WriteBufferedData()"[label=Y];
    "if (!had_buffered_data && (HasBufferedData() || fin_buffered_))"->"void QuicStream::WriteOrBufferData"[label=N, style=dashed];
    "WriteBufferedData()"->"void QuicStream::WriteOrBufferData"[style=dashed];

    "WriteBufferedData()"->"void QuicStream::WriteBufferedData()"[style=dashed, dir=both];
}

subgraph cluster_QuicStream_WriteBufferedData {

    "if (session_->ShouldYield(id()))"[shape=diamond];
    "QuicConsumedData consumed_data = 
        WritevDataInner(write_length, stream_bytes_written(), fin)"[style=filled, fillcolor=gold];

    "void QuicStream::WriteBufferedData"->"if (session_->ShouldYield(id()))"[style=dashed];
    "if (session_->ShouldYield(id()))"->"session_->MarkConnectionLevelWriteBlocked(id())"[label=Y];
    "session_->MarkConnectionLevelWriteBlocked(id())"->"void QuicStream::WriteBufferedData"[style=dashed, label="return"];

    "if (session_->ShouldYield(id()))"->
    "size_t write_length = BufferedDataBytes();
    bool fin_with_zero_data = (fin_buffered_ && write_length == 0);
    bool fin = fin_buffered_;"[label=N];
    "size_t write_length = BufferedDataBytes();
    bool fin_with_zero_data = (fin_buffered_ && write_length == 0);
    bool fin = fin_buffered_;"->
    "send_window = flow_controller_.SendWindowSize();";
    "send_window = flow_controller_.SendWindowSize();" ->
    "if (stream_contributes_to_connection_flow_control_) { 
    send_window =
        std::min(send_window, connection_flow_controller_->SendWindowSize());
    }";
    "if (stream_contributes_to_connection_flow_control_) { 
    send_window =
        std::min(send_window, connection_flow_controller_->SendWindowSize());
    }"->
    "if (session_->session_decides_what_to_write()) {
        session_->SetTransmissionType(NOT_RETRANSMISSION);
    }";
    "if (session_->session_decides_what_to_write()) {
        session_->SetTransmissionType(NOT_RETRANSMISSION);
    }"->
    "QuicConsumedData consumed_data = 
        WritevDataInner(write_length, stream_bytes_written(), fin)";
    "QuicConsumedData consumed_data = 
        WritevDataInner(write_length, stream_bytes_written(), fin)"->
    "OnStreamDataConsumed(consumed_data.bytes_consumed)";
    "OnStreamDataConsumed(consumed_data.bytes_consumed)"->
    "AddBytesSent(consumed_data.bytes_consumed)";
    "AddBytesSent(consumed_data.bytes_consumed)"->
    "if (write_side_closed_) {
         return;
    }";
    "if (write_side_closed_) {
         return;
    }"->
    "  if (consumed_data.bytes_consumed == write_length) {
    if (!fin_with_zero_data) {
      MaybeSendBlocked();
    }   
    if (fin && consumed_data.fin_consumed) {
      fin_sent_ = true;
      fin_outstanding_ = true;
      if (fin_received_) {
        session_->StreamDraining(id_);
      }   
      CloseWriteSide();
    } else if (fin && !consumed_data.fin_consumed) {
      session_->MarkConnectionLevelWriteBlocked(id());
    }   
  } else {
    session_->MarkConnectionLevelWriteBlocked(id());
  }
  if (consumed_data.bytes_consumed > 0 || consumed_data.fin_consumed) {
    busy_counter_ = 0;
  }";
    "  if (consumed_data.bytes_consumed == write_length) {
    if (!fin_with_zero_data) {
      MaybeSendBlocked();
    }   
    if (fin && consumed_data.fin_consumed) {
      fin_sent_ = true;
      fin_outstanding_ = true;
      if (fin_received_) {
        session_->StreamDraining(id_);
      }   
      CloseWriteSide();
    } else if (fin && !consumed_data.fin_consumed) {
      session_->MarkConnectionLevelWriteBlocked(id());
    }   
  } else {
    session_->MarkConnectionLevelWriteBlocked(id());
  }
  if (consumed_data.bytes_consumed > 0 || consumed_data.fin_consumed) {
    busy_counter_ = 0;
  }"->
   "void QuicStream::WriteBufferedData"[style=dashed];
}

    subgraph cluster_QuicStream_WritevDataInner {

    "QuicConsumedData consumed_data = 
        WritevDataInner(write_length, stream_bytes_written(), fin)"->
    "QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
     QuicStreamOffset offset, bool fin)"[dir=both, style=dashed];

    "QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
     QuicStreamOffset offset, bool fin)"[dir=both, style=dashed]->
    "if (fin && add_random_padding_after_fin_) { 
        state = FIN_AND_PADDING;
    }"[style=dashed];

    "if (fin && add_random_padding_after_fin_) { 
        state = FIN_AND_PADDING;
    }"->
    "return session()->WritevData(this, id(), write_length, offset, state);";

    "return session()->WritevData(this, id(), write_length, offset, state);"->
    "QuicConsumedData consumed_data = 
        WritevDataInner(write_length, stream_bytes_written(), fin)"[style=dashed];
        
    }


    subgraph cluster_QuicSession_WritevData {
    label = "QuicSession::WritevData";
    "QuicConsumedData QuicSession::WritevData"[style=filled, fillcolor=gold];

    "if (id == kCryptoStreamId && stream != GetMutableCryptoStream())"[shape=diamond];

    "return session()->WritevData(this, id(), write_length, offset, state)"->
    "QuicConsumedData QuicSession::WritevData"[dir=both, style=dashed];
    "QuicConsumedData QuicSession::WritevData"->"if (id == kCryptoStreamId && stream != GetMutableCryptoStream())"[style=dashed];
    "if (id == kCryptoStreamId && stream != GetMutableCryptoStream())"->
    "QuicConsumedData QuicSession::WritevData"[label="Y  return QuicConsumedData(0, false)",style=dashed];
    "if (id == kCryptoStreamId && stream != GetMutableCryptoStream())"->
    "if (!IsEncryptionEstablished() && id != kCryptoStreamId)"[label=N];
    "if (!IsEncryptionEstablished() && id != kCryptoStreamId)"->
    "QuicConsumedData QuicSession::WritevData"[label="Y  return QuicConsumedData(0, false)",style=dashed];
    "if (!IsEncryptionEstablished() && id != kCryptoStreamId)"->
    "QuicConsumedData data = 
    connection_->SendStreamData(id, write_length, offset, state)"[label=N];
    "QuicConsumedData data = 
    connection_->SendStreamData(id, write_length, offset, state)"->
    "QuicSession::WritevData return data;";
    "QuicSession::WritevData return data;"->"QuicConsumedData QuicSession::WritevData"[style=dashed];
    }   

    subgraph cluster_QuicConnection_SendStreamData{
    label="QuicConnection::SendStreamData";
    "if (state == NO_FIN && write_length == 0)"[shape=diamond];

    "QuicConsumedData data = 
    connection_->SendStreamData(id, write_length, offset, state)"->
    "QuicConnection::SendStreamData"[dir=both, style=dashed];
    "QuicConnection::SendStreamData"->"if (state == NO_FIN && write_length == 0)"[style=dashed];
    "if (state == NO_FIN && write_length == 0)"->"QuicConnection::SendStreamData"[label="Y return QuicConsumedData(0, false);", style=dashed];
    "if (state == NO_FIN && write_length == 0)"->"ScopedRetransmissionScheduler alarm_delayer(this)"[label=N];
    "ScopedRetransmissionScheduler alarm_delayer(this)"->"ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)";
    "ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)"->"packet_generator_.ConsumeData(id, write_length, offset, state)";
    "packet_generator_.ConsumeData(id, write_length, offset, state)"->"QuicConnection::SendStreamData"[style=dashed];
    }   

    subgraph cluster_QuicPacketGenerator_ConsumeData {
    label = "QuicPacketGenerator::ConsumeData";
    "// We determine if we can enter the fast path before executing
     // the slow path loop.
    bool run_fast_path = !has_handshake && state != FIN_AND_PADDING &&
                       !HasQueuedFrames() &&
                       write_length - total_bytes_consumed > kMaxPacketSize;
    //快慢路径的区别是什么？"[fillcolore=gold, style=filled];
    "  while (!run_fast_path && delegate_->ShouldGeneratePacket(
                               HAS_RETRANSMITTABLE_DATA,
                               has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))"[fillcolore=gold, style=filled];
    "packet_creator_.ConsumeData"[shape=diamond, style=filled, fillcolor=gold];

    "packet_generator_.ConsumeData(id, write_length, offset, state)"->"QuicPacketGenerator::ConsumeData"[dir=both, style=dashed];
    "packet_generator_.ConsumeData(id, write_length, offset, state)"->"QuicPacketGenerator::ConsumeData"->
    "const bool flush =
      has_handshake && packet_creator_.HasPendingRetransmittableFrames();
  SendQueuedFrames(flush);"[style=dashed];
    "const bool flush =
      has_handshake && packet_creator_.HasPendingRetransmittableFrames();
  SendQueuedFrames(flush);"->
    "  if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
    packet_creator_.Flush();}";
    "  if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
    packet_creator_.Flush();}"->
    "if (!fin && (write_length == 0)) {
    return QuicConsumedData(0, false);}";
    "if (!fin && (write_length == 0)) {
    return QuicConsumedData(0, false);}"->
    "// We determine if we can enter the fast path before executing
     // the slow path loop.
    bool run_fast_path = !has_handshake && state != FIN_AND_PADDING &&
                       !HasQueuedFrames() &&
                       write_length - total_bytes_consumed > kMaxPacketSize;
    //快慢路径的区别是什么？";
    "// We determine if we can enter the fast path before executing
     // the slow path loop.
    bool run_fast_path = !has_handshake && state != FIN_AND_PADDING &&
                       !HasQueuedFrames() &&
                       write_length - total_bytes_consumed > kMaxPacketSize;
    //快慢路径的区别是什么？"->
    "  while (!run_fast_path && delegate_->ShouldGeneratePacket(
                               HAS_RETRANSMITTABLE_DATA,
                               has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))";
    "  while (!run_fast_path && delegate_->ShouldGeneratePacket(
                               HAS_RETRANSMITTABLE_DATA,
                               has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))"->
    "packet_creator_.ConsumeData"[style=dashed];
    "packet_creator_.ConsumeData"->"QuicPacketGenerator::ConsumeData"[label="N return QuicConsumedData(0, false)", style=dashed];
    "packet_creator_.ConsumeData"->"packet_creator_.Flush()"[label=Y];
    "packet_creator_.Flush()"->
    "run_fast_path = !has_handshake && state != FIN_AND_PADDING &&
                    !HasQueuedFrames() &&
                    write_length - total_bytes_consumed > kMaxPacketSize;"
    "run_fast_path = !has_handshake && state != FIN_AND_PADDING &&
                    !HasQueuedFrames() &&
                    write_length - total_bytes_consumed > kMaxPacketSize;"->
    "  while (!run_fast_path && delegate_->ShouldGeneratePacket(
                               HAS_RETRANSMITTABLE_DATA,
                               has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))"[style=dashed];
    "  while (!run_fast_path && delegate_->ShouldGeneratePacket(
                               HAS_RETRANSMITTABLE_DATA,
                               has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))"->
    "  if (run_fast_path) {
    return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
                               total_bytes_consumed);"
    "  if (run_fast_path) {
    return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
                               total_bytes_consumed);"->
    "  if (has_handshake) {
    SendQueuedFrames(/*flush=*/true);}";
    "  if (has_handshake) {
    SendQueuedFrames(/*flush=*/true);}"->"QuicPacketGenerator::ConsumeData"[style=dashed, label="return QuicConsumedData(total_bytes_consumed, fin_consumed);"];

  }

    subgraph cluster_QuicPacketCreator_ConsumeData {
    label = "bool QuicPacketCreator::ConsumeData";

    "packet_creator_.ConsumeData"->
    "bool QuicPacketCreator::ConsumeData(QuicStreamId id,
                                    size_t write_length,
                                    size_t iov_offset,
                                    QuicStreamOffset offset,
                                    bool fin,
                                    bool needs_full_padding,
                                    QuicFrame* frame)"[dir=both, style=dashed];

    }


}

