<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.30.1 (20150306.0020)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="10965pt" height="5130pt"
 viewBox="0.00 0.00 10965.00 5130.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 5126)">
<title>%3</title>
<polygon fill="white" stroke="white" points="-4,5 -4,-5126 10962,-5126 10962,5 -4,5"/>
<g id="clust1" class="cluster"><title>cluster_ngx_http_quic_response_body_available</title>
<polygon fill="none" stroke="black" points="10029,-4592 10029,-4908 10949,-4908 10949,-4592 10029,-4592"/>
</g>
<g id="clust2" class="cluster"><title>cluster_stream_OnNginxBodyAvailable</title>
<polygon fill="none" stroke="black" points="8950,-4322 8950,-4644 9630,-4644 9630,-4322 8950,-4322"/>
</g>
<g id="clust3" class="cluster"><title>cluster_QuicStream_WriteOrBufferData</title>
<polygon fill="none" stroke="black" points="8218,-4214 8218,-4820 8942,-4820 8942,-4214 8218,-4214"/>
</g>
<g id="clust4" class="cluster"><title>cluster_QuicStream_WriteBufferedData</title>
<polygon fill="none" stroke="black" points="7222,-3080 7222,-4482 8210,-4482 8210,-3080 7222,-3080"/>
</g>
<g id="clust5" class="cluster"><title>cluster_QuicStream_WritevDataInner</title>
<polygon fill="none" stroke="black" points="6622,-3574 6622,-3852 7214,-3852 7214,-3574 6622,-3574"/>
</g>
<g id="clust6" class="cluster"><title>cluster_QuicSession_WritevData</title>
<polygon fill="none" stroke="black" points="6160,-2482 6160,-3355 7187,-3355 7187,-2482 6160,-2482"/>
<text text-anchor="middle" x="6673.5" y="-3339.8" font-family="Times,serif" font-size="14.00">QuicSession::WritevData</text>
</g>
<g id="clust7" class="cluster"><title>cluster_QuicConnection_SendStreamData</title>
<polygon fill="none" stroke="black" points="5393,-2482 5393,-3355 6152,-3355 6152,-2482 5393,-2482"/>
<text text-anchor="middle" x="5772.5" y="-3339.8" font-family="Times,serif" font-size="14.00">QuicConnection::SendStreamData</text>
</g>
<g id="clust8" class="cluster"><title>cluster_QuicPacketGenerator_ConsumeData</title>
<polygon fill="none" stroke="black" points="4371,-2094 4371,-3407 5385,-3407 5385,-2094 4371,-2094"/>
<text text-anchor="middle" x="4878" y="-3391.8" font-family="Times,serif" font-size="14.00">QuicPacketGenerator::ConsumeData</text>
</g>
<g id="clust9" class="cluster"><title>cluster_QuicConnection_ShouldGeneratePacket</title>
<polygon fill="none" stroke="black" points="3501,-2482 3501,-2918 3871,-2918 3871,-2482 3501,-2482"/>
<text text-anchor="middle" x="3686" y="-2902.8" font-family="Times,serif" font-size="14.00">bool QuicConnection::ShouldGeneratePacket</text>
</g>
<g id="clust10" class="cluster"><title>cluster_QuicConnection_CanWrite</title>
<polygon fill="none" stroke="black" points="3492,-448 3492,-2442 4240,-2442 4240,-448 3492,-448"/>
<text text-anchor="middle" x="3866" y="-2426.8" font-family="Times,serif" font-size="14.00">bool QuicConnection::CanWrite</text>
</g>
<g id="clust11" class="cluster"><title>cluster_QuicSentPacketManager_TimeUntilSend</title>
<polygon fill="none" stroke="black" points="1894,-300 1894,-1476 3484,-1476 3484,-300 1894,-300"/>
<text text-anchor="middle" x="2689" y="-1460.8" font-family="Times,serif" font-size="14.00">QuicTime::Delta PacingSender::TimeUntilSend</text>
</g>
<g id="clust12" class="cluster"><title>cluster_TcpCubicSenderBytes_CanSend</title>
<polygon fill="none" stroke="black" points="1316,-186 1316,-1146 1886,-1146 1886,-186 1316,-186"/>
</g>
<g id="clust13" class="cluster"><title>cluster_QuicPacketCreator_ConsumeData</title>
<polygon fill="none" stroke="black" points="3879,-2590 3879,-2789 4363,-2789 4363,-2590 3879,-2590"/>
<text text-anchor="middle" x="4121" y="-2773.8" font-family="Times,serif" font-size="14.00">bool QuicPacketCreator::ConsumeData</text>
</g>
<g id="clust14" class="cluster"><title>cluster_QuicPacketCreator_Flush</title>
<polygon fill="none" stroke="black" points="2589,-2482 2589,-3355 3253,-3355 3253,-2482 2589,-2482"/>
<text text-anchor="middle" x="2921" y="-3339.8" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::Flush()</text>
</g>
<g id="clust15" class="cluster"><title>cluster_QuicPacketCreator_SerializePacket</title>
<polygon fill="none" stroke="black" points="1557,-1644 1557,-2727 2199,-2727 2199,-1644 1557,-1644"/>
<text text-anchor="middle" x="1878" y="-2711.8" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::SerializePacket</text>
</g>
<g id="clust16" class="cluster"><title>cluster_QuicPacketCreator_OnSerializedPacket</title>
<polygon fill="none" stroke="black" points="2207,-2103 2207,-2534 2581,-2534 2581,-2103 2207,-2103"/>
</g>
<g id="clust17" class="cluster"><title>cluster_QuicConnection_OnSerializedPacket</title>
<polygon fill="none" stroke="black" points="2209,-1653 2209,-1969 2547,-1969 2547,-1653 2209,-1653"/>
<text text-anchor="middle" x="2378" y="-1953.8" font-family="Times,serif" font-size="14.00">void QuicConnection::OnSerializedPacket</text>
</g>
<g id="clust18" class="cluster"><title>cluster_QuicConnection_SendOrQueuePacket</title>
<polygon fill="none" stroke="black" points="8,-1359 8,-2442 598,-2442 598,-1359 8,-1359"/>
<text text-anchor="middle" x="303" y="-2426.8" font-family="Times,serif" font-size="14.00">void QuicConnection::SendOrQueuePacket</text>
</g>
<g id="clust19" class="cluster"><title>cluster_QuicConnection_WritePacket</title>
<polygon fill="none" stroke="black" points="606,-8 606,-2313 1308,-2313 1308,-8 606,-8"/>
<text text-anchor="middle" x="957" y="-2297.8" font-family="Times,serif" font-size="14.00">bool QuicConnection::WritePacket(SerializedPacket* packet)</text>
</g>
<!-- ngx_http_quic_send_chain入口函数 -->
<g id="node1" class="node"><title>ngx_http_quic_send_chain入口函数</title>
<ellipse fill="red" stroke="black" cx="10041" cy="-5104" rx="138.157" ry="18"/>
<text text-anchor="middle" x="10041" y="-5100.3" font-family="Times,serif" font-size="14.00">ngx_http_quic_send_chain入口函数</text>
</g>
<!-- while (in)循环 -->
<g id="node4" class="node"><title>while (in)循环</title>
<ellipse fill="none" stroke="black" cx="10106" cy="-5030" rx="61.6163" ry="18"/>
<text text-anchor="middle" x="10106" y="-5026.3" font-family="Times,serif" font-size="14.00">while (in)循环</text>
</g>
<!-- ngx_http_quic_send_chain入口函数&#45;&gt;while (in)循环 -->
<g id="edge1" class="edge"><title>ngx_http_quic_send_chain入口函数&#45;&gt;while (in)循环</title>
<path fill="none" stroke="red" stroke-dasharray="5,2" d="M10056.4,-5085.94C10064.6,-5076.88 10074.8,-5065.59 10083.8,-5055.6"/>
<polygon fill="red" stroke="red" points="10086.6,-5057.71 10090.7,-5047.94 10081.4,-5053.02 10086.6,-5057.71"/>
</g>
<!-- if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf) -->
<g id="node2" class="node"><title>if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)</title>
<polygon fill="none" stroke="black" points="9571,-4900 9122.68,-4882 9571,-4864 10019.3,-4882 9571,-4900"/>
<text text-anchor="middle" x="9571" y="-4878.3" font-family="Times,serif" font-size="14.00">if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)</text>
</g>
<!-- last=1 -->
<g id="node6" class="node"><title>last=1</title>
<ellipse fill="none" stroke="black" cx="9708" cy="-4794" rx="32.2457" ry="18"/>
<text text-anchor="middle" x="9708" y="-4790.3" font-family="Times,serif" font-size="14.00">last=1</text>
</g>
<!-- if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)&#45;&gt;last=1 -->
<g id="edge4" class="edge"><title>if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)&#45;&gt;last=1</title>
<path fill="none" stroke="black" d="M9596.77,-4864.82C9620.1,-4850.18 9654.45,-4828.62 9678.79,-4813.33"/>
<polygon fill="black" stroke="black" points="9680.66,-4816.29 9687.27,-4808.01 9676.94,-4810.37 9680.66,-4816.29"/>
<text text-anchor="middle" x="9657" y="-4834.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- if (in&#45;&gt;buf&#45;&gt;in_file) -->
<g id="node3" class="node"><title>if (in&#45;&gt;buf&#45;&gt;in_file)</title>
<polygon fill="none" stroke="black" points="9831,-4724 9714.4,-4706 9831,-4688 9947.6,-4706 9831,-4724"/>
<text text-anchor="middle" x="9831" y="-4702.3" font-family="Times,serif" font-size="14.00">if (in&#45;&gt;buf&#45;&gt;in_file)</text>
</g>
<!-- if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file) -->
<g id="edge5" class="edge"><title>if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file)</title>
<path fill="none" stroke="black" d="M9580.89,-4864.2C9595.1,-4841.38 9623.33,-4800.61 9657,-4776 9693.46,-4749.36 9741.59,-4731.31 9777.99,-4720.38"/>
<polygon fill="black" stroke="black" points="9779.31,-4723.64 9787.93,-4717.48 9777.35,-4716.92 9779.31,-4723.64"/>
<text text-anchor="middle" x="9662" y="-4790.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log) -->
<g id="node7" class="node"><title>file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)</title>
<ellipse fill="none" stroke="black" cx="9831" cy="-4618" rx="190.15" ry="18"/>
<text text-anchor="middle" x="9831" y="-4614.3" font-family="Times,serif" font-size="14.00">file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)</text>
</g>
<!-- if (in&#45;&gt;buf&#45;&gt;in_file)&#45;&gt;file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log) -->
<g id="edge7" class="edge"><title>if (in&#45;&gt;buf&#45;&gt;in_file)&#45;&gt;file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)</title>
<path fill="none" stroke="black" d="M9831,-4687.6C9831,-4675.75 9831,-4659.82 9831,-4646.29"/>
<polygon fill="black" stroke="black" points="9834.5,-4646.08 9831,-4636.08 9827.5,-4646.08 9834.5,-4646.08"/>
<text text-anchor="middle" x="9836" y="-4658.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id) -->
<g id="node9" class="node"><title>int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</title>
<ellipse fill="none" stroke="black" cx="10489" cy="-4882" rx="451.565" ry="18"/>
<text text-anchor="middle" x="10489" y="-4878.3" font-family="Times,serif" font-size="14.00">int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</text>
</g>
<!-- if (in&#45;&gt;buf&#45;&gt;in_file)&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id) -->
<g id="edge12" class="edge"><title>if (in&#45;&gt;buf&#45;&gt;in_file)&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</title>
<path fill="none" stroke="black" d="M9848.81,-4721.31C9880.65,-4746.03 9950.32,-4796.35 10018,-4820 10082.3,-4842.46 10154.1,-4856.77 10221.9,-4865.87"/>
<polygon fill="black" stroke="black" points="10221.5,-4869.34 10231.8,-4867.17 10222.4,-4862.4 10221.5,-4869.34"/>
<text text-anchor="middle" x="10023" y="-4790.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- buf_len = ngx_buf_size(in&#45;&gt;buf) -->
<g id="node5" class="node"><title>buf_len = ngx_buf_size(in&#45;&gt;buf)</title>
<ellipse fill="none" stroke="black" cx="10142" cy="-4956" rx="128.058" ry="18"/>
<text text-anchor="middle" x="10142" y="-4952.3" font-family="Times,serif" font-size="14.00">buf_len = ngx_buf_size(in&#45;&gt;buf)</text>
</g>
<!-- while (in)循环&#45;&gt;buf_len = ngx_buf_size(in&#45;&gt;buf) -->
<g id="edge2" class="edge"><title>while (in)循环&#45;&gt;buf_len = ngx_buf_size(in&#45;&gt;buf)</title>
<path fill="none" stroke="red" stroke-dasharray="5,2" d="M10114.5,-5011.94C10118.8,-5003.45 10124,-4993.01 10128.7,-4983.51"/>
<polygon fill="red" stroke="red" points="10131.9,-4984.95 10133.3,-4974.44 10125.7,-4981.82 10131.9,-4984.95"/>
</g>
<!-- return in -->
<g id="node12" class="node"><title>return in</title>
<ellipse fill="none" stroke="black" cx="9955" cy="-4956" rx="40.4202" ry="18"/>
<text text-anchor="middle" x="9955" y="-4952.3" font-family="Times,serif" font-size="14.00">return in</text>
</g>
<!-- while (in)循环&#45;&gt;return in -->
<g id="edge15" class="edge"><title>while (in)循环&#45;&gt;return in</title>
<path fill="none" stroke="red" d="M10075.1,-5014.26C10050.7,-5002.65 10016.8,-4986.47 9991.2,-4974.26"/>
<polygon fill="red" stroke="red" points="9992.37,-4970.94 9981.84,-4969.8 9989.36,-4977.26 9992.37,-4970.94"/>
</g>
<!-- buf_len = ngx_buf_size(in&#45;&gt;buf)&#45;&gt;if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf) -->
<g id="edge3" class="edge"><title>buf_len = ngx_buf_size(in&#45;&gt;buf)&#45;&gt;if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)</title>
<path fill="none" stroke="red" d="M10050.3,-4943.43C9950.55,-4930.86 9791.13,-4910.76 9683.83,-4897.23"/>
<polygon fill="red" stroke="red" points="9683.97,-4893.72 9673.61,-4895.94 9683.09,-4900.66 9683.97,-4893.72"/>
</g>
<!-- last=1&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file) -->
<g id="edge6" class="edge"><title>last=1&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file)</title>
<path fill="none" stroke="black" d="M9727.49,-4779.37C9747.67,-4765.26 9779.42,-4743.07 9802.43,-4726.97"/>
<polygon fill="black" stroke="black" points="9804.59,-4729.73 9810.78,-4721.13 9800.58,-4724 9804.59,-4729.73"/>
<text text-anchor="middle" x="9786" y="-4746.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len) -->
<g id="node8" class="node"><title>n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)</title>
<ellipse fill="none" stroke="black" cx="10374" cy="-4544" rx="172.327" ry="18"/>
<text text-anchor="middle" x="10374" y="-4540.3" font-family="Times,serif" font-size="14.00">n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)</text>
</g>
<!-- file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)&#45;&gt;n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len) -->
<g id="edge8" class="edge"><title>file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)&#45;&gt;n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)</title>
<path fill="none" stroke="black" d="M9936.66,-4602.99C10030.2,-4590.58 10166.4,-4572.53 10261.9,-4559.87"/>
<polygon fill="black" stroke="black" points="10262.4,-4563.33 10271.8,-4558.55 10261.5,-4556.39 10262.4,-4563.33"/>
</g>
<!-- n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id) -->
<g id="edge9" class="edge"><title>n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</title>
<path fill="none" stroke="black" d="M10452.2,-4560.09C10504.2,-4572.44 10563,-4591.94 10563,-4617 10563,-4795 10563,-4795 10563,-4795 10563,-4820.68 10543.8,-4842.51 10525,-4857.75"/>
<polygon fill="black" stroke="black" points="10522.8,-4855.01 10517,-4863.87 10527,-4860.57 10522.8,-4855.01"/>
</g>
<!-- free(file_buf) -->
<g id="node10" class="node"><title>free(file_buf)</title>
<ellipse fill="none" stroke="black" cx="9862" cy="-4794" rx="57.2688" ry="18"/>
<text text-anchor="middle" x="9862" y="-4790.3" font-family="Times,serif" font-size="14.00">free(file_buf)</text>
</g>
<!-- int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;free(file_buf) -->
<g id="edge10" class="edge"><title>int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;free(file_buf)</title>
<path fill="none" stroke="black" d="M10191.6,-4868.45C10106.1,-4863.06 10025,-4855.71 9984,-4846 9954.55,-4839.02 9923.08,-4825.71 9899.47,-4814.43"/>
<polygon fill="black" stroke="black" points="9900.72,-4811.14 9890.19,-4809.91 9897.65,-4817.44 9900.72,-4811.14"/>
</g>
<!-- in = in&#45;&gt;next -->
<g id="node11" class="node"><title>in = in&#45;&gt;next</title>
<ellipse fill="none" stroke="black" cx="10305" cy="-5104" rx="57.2688" ry="18"/>
<text text-anchor="middle" x="10305" y="-5100.3" font-family="Times,serif" font-size="14.00">in = in&#45;&gt;next</text>
</g>
<!-- int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;in = in&#45;&gt;next -->
<g id="edge13" class="edge"><title>int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;in = in&#45;&gt;next</title>
<path fill="none" stroke="red" d="M10474.8,-4900.03C10442.3,-4938.8 10362.9,-5033.76 10325.3,-5078.68"/>
<polygon fill="red" stroke="red" points="10322.6,-5076.55 10318.8,-5086.46 10327.9,-5081.04 10322.6,-5076.55"/>
</g>
<!-- string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len) -->
<g id="node13" class="node"><title>string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)</title>
<ellipse fill="none" stroke="black" cx="10276" cy="-4794" rx="238.293" ry="18"/>
<text text-anchor="middle" x="10276" y="-4790.3" font-family="Times,serif" font-size="14.00">string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)</text>
</g>
<!-- int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len) -->
<g id="edge17" class="edge"><title>int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10446.9,-4864.01C10412.5,-4850.12 10363.8,-4830.44 10327.1,-4815.65"/>
<polygon fill="black" stroke="black" points="10328.2,-4812.31 10317.6,-4811.81 10325.6,-4818.8 10328.2,-4812.31"/>
</g>
<!-- free(file_buf)&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file) -->
<g id="edge11" class="edge"><title>free(file_buf)&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file)</title>
<path fill="none" stroke="black" d="M9855.88,-4776.01C9851.45,-4763.72 9845.38,-4746.89 9840.35,-4732.93"/>
<polygon fill="black" stroke="black" points="9843.59,-4731.59 9836.9,-4723.37 9837,-4733.97 9843.59,-4731.59"/>
</g>
<!-- in = in&#45;&gt;next&#45;&gt;while (in)循环 -->
<g id="edge14" class="edge"><title>in = in&#45;&gt;next&#45;&gt;while (in)循环</title>
<path fill="none" stroke="red" stroke-dasharray="5,2" d="M10269,-5089.96C10236.4,-5078.18 10188.3,-5060.77 10152.8,-5047.92"/>
<polygon fill="red" stroke="red" points="10153.7,-5044.54 10143.1,-5044.43 10151.3,-5051.12 10153.7,-5044.54"/>
</g>
<!-- return in&#45;&gt;ngx_http_quic_send_chain入口函数 -->
<g id="edge16" class="edge"><title>return in&#45;&gt;ngx_http_quic_send_chain入口函数</title>
<path fill="none" stroke="red" stroke-dasharray="5,2" d="M9964.71,-4973.48C9979.61,-4998.77 10008.2,-5047.38 10025.9,-5077.32"/>
<polygon fill="red" stroke="red" points="10022.9,-5079.13 10031,-5085.97 10028.9,-5075.57 10022.9,-5079.13"/>
</g>
<!-- quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin) -->
<g id="node14" class="node"><title>quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)</title>
<ellipse fill="none" stroke="black" cx="10276" cy="-4706" rx="204.123" ry="18"/>
<text text-anchor="middle" x="10276" y="-4702.3" font-family="Times,serif" font-size="14.00">quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)</text>
</g>
<!-- string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)&#45;&gt;quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin) -->
<g id="edge18" class="edge"><title>string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)&#45;&gt;quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)</title>
<path fill="none" stroke="black" d="M10276,-4775.6C10276,-4763.75 10276,-4747.82 10276,-4734.29"/>
<polygon fill="black" stroke="black" points="10279.5,-4734.08 10276,-4724.08 10272.5,-4734.08 10279.5,-4734.08"/>
</g>
<!-- return 0 -->
<g id="node15" class="node"><title>return 0</title>
<ellipse fill="none" stroke="black" cx="10442" cy="-4618" rx="38.0212" ry="18"/>
<text text-anchor="middle" x="10442" y="-4614.3" font-family="Times,serif" font-size="14.00">return 0</text>
</g>
<!-- quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)&#45;&gt;return 0 -->
<g id="edge19" class="edge"><title>quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)&#45;&gt;return 0</title>
<path fill="none" stroke="black" d="M10308.4,-4688.21C10337.2,-4673.31 10379.1,-4651.6 10408.3,-4636.48"/>
<polygon fill="black" stroke="black" points="10410,-4639.53 10417.2,-4631.82 10406.8,-4633.32 10410,-4639.53"/>
</g>
<!-- void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin) -->
<g id="node16" class="node"><title>void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)</title>
<ellipse fill="none" stroke="black" cx="9290" cy="-4618" rx="332.181" ry="18"/>
<text text-anchor="middle" x="9290" y="-4614.3" font-family="Times,serif" font-size="14.00">void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)</text>
</g>
<!-- quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)&#45;&gt;void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin) -->
<g id="edge21" class="edge"><title>quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)&#45;&gt;void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10161.1,-4689.16C10074.4,-4677.76 9952.45,-4662.87 9845,-4654 9750.55,-4646.2 9726.6,-4649.68 9632,-4644 9583.08,-4641.06 9530.25,-4637.43 9481.09,-4633.85"/>
<polygon fill="black" stroke="black" points="10160.9,-4692.66 10171.3,-4690.5 10161.8,-4685.72 10160.9,-4692.66"/>
<polygon fill="black" stroke="black" points="9481.21,-4630.35 9470.98,-4633.11 9480.7,-4637.33 9481.21,-4630.35"/>
</g>
<!-- return 0&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id) -->
<g id="edge20" class="edge"><title>return 0&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10454.5,-4635.06C10464.7,-4648.64 10479,-4668.88 10489,-4688 10508.5,-4725.13 10515.3,-4734.78 10523,-4776 10526.6,-4795.22 10527.9,-4801.07 10523,-4820 10519.8,-4832.34 10513.5,-4844.84 10507.2,-4855.28"/>
<polygon fill="black" stroke="black" points="10504.1,-4853.56 10501.7,-4863.88 10510,-4857.33 10504.1,-4853.56"/>
</g>
<!-- if (write_side_closed() || fin_buffered() -->
<g id="node17" class="node"><title>if (write_side_closed() || fin_buffered()</title>
<ellipse fill="none" stroke="black" cx="9122" cy="-4544" rx="149.23" ry="18"/>
<text text-anchor="middle" x="9122" y="-4540.3" font-family="Times,serif" font-size="14.00">if (write_side_closed() || fin_buffered()</text>
</g>
<!-- void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)&#45;&gt;if (write_side_closed() || fin_buffered() -->
<g id="edge22" class="edge"><title>void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)&#45;&gt;if (write_side_closed() || fin_buffered()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M9250.61,-4600.12C9226.45,-4589.76 9195.34,-4576.43 9169.78,-4565.48"/>
<polygon fill="black" stroke="black" points="9170.84,-4562.13 9160.27,-4561.4 9168.09,-4568.56 9170.84,-4562.13"/>
</g>
<!-- return; -->
<g id="node18" class="node"><title>return;</title>
<ellipse fill="none" stroke="black" cx="9074" cy="-4456" rx="34.1708" ry="18"/>
<text text-anchor="middle" x="9074" y="-4452.3" font-family="Times,serif" font-size="14.00">return;</text>
</g>
<!-- if (write_side_closed() || fin_buffered()&#45;&gt;return; -->
<g id="edge23" class="edge"><title>if (write_side_closed() || fin_buffered()&#45;&gt;return;</title>
<path fill="none" stroke="black" d="M9112.52,-4526.01C9105.52,-4513.48 9095.9,-4496.23 9088.02,-4482.12"/>
<polygon fill="black" stroke="black" points="9091.07,-4480.4 9083.14,-4473.37 9084.96,-4483.81 9091.07,-4480.4"/>
<text text-anchor="middle" x="9108" y="-4496.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- WriteOrBufferData(body, fin, nullptr) -->
<g id="node19" class="node"><title>WriteOrBufferData(body, fin, nullptr)</title>
<ellipse fill="none" stroke="black" cx="9126" cy="-4348" rx="146.356" ry="18"/>
<text text-anchor="middle" x="9126" y="-4344.3" font-family="Times,serif" font-size="14.00">WriteOrBufferData(body, fin, nullptr)</text>
</g>
<!-- if (write_side_closed() || fin_buffered()&#45;&gt;WriteOrBufferData(body, fin, nullptr) -->
<g id="edge24" class="edge"><title>if (write_side_closed() || fin_buffered()&#45;&gt;WriteOrBufferData(body, fin, nullptr)</title>
<path fill="none" stroke="black" d="M9122.35,-4525.78C9123.05,-4492.06 9124.6,-4417.06 9125.43,-4376.43"/>
<polygon fill="black" stroke="black" points="9128.94,-4376.25 9125.65,-4366.18 9121.94,-4376.1 9128.94,-4376.25"/>
<text text-anchor="middle" x="9130" y="-4452.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- return;&#45;&gt;WriteOrBufferData(body, fin, nullptr) -->
<g id="edge25" class="edge"><title>return;&#45;&gt;WriteOrBufferData(body, fin, nullptr)</title>
<path fill="none" stroke="black" d="M9082.12,-4438.44C9090.42,-4421.52 9103.43,-4395.02 9113.13,-4375.24"/>
<polygon fill="black" stroke="black" points="9116.33,-4376.67 9117.59,-4366.15 9110.04,-4373.58 9116.33,-4376.67"/>
</g>
<!-- WriteOrBufferData(body, fin, nullptr)&#45;&gt;void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin) -->
<g id="edge26" class="edge"><title>WriteOrBufferData(body, fin, nullptr)&#45;&gt;void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M9147.43,-4365.9C9182.09,-4394.61 9249.61,-4456.6 9280,-4526 9288.79,-4546.08 9291.01,-4570.94 9291.19,-4589.6"/>
<polygon fill="black" stroke="black" points="9287.69,-4589.75 9291.1,-4599.79 9294.69,-4589.82 9287.69,-4589.75"/>
</g>
<!-- void QuicStream::WriteOrBufferData -->
<g id="node22" class="node"><title>void QuicStream::WriteOrBufferData</title>
<ellipse fill="none" stroke="black" cx="8740" cy="-4240" rx="145.38" ry="18"/>
<text text-anchor="middle" x="8740" y="-4236.3" font-family="Times,serif" font-size="14.00">void QuicStream::WriteOrBufferData</text>
</g>
<!-- WriteOrBufferData(body, fin, nullptr)&#45;&gt;void QuicStream::WriteOrBufferData -->
<g id="edge27" class="edge"><title>WriteOrBufferData(body, fin, nullptr)&#45;&gt;void QuicStream::WriteOrBufferData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M9078.87,-4326.4C9041.33,-4310.67 8987.1,-4289.49 8938,-4276 8907.63,-4267.66 8874.06,-4260.85 8843.34,-4255.53"/>
<polygon fill="black" stroke="black" points="9077.95,-4329.81 9088.52,-4330.47 9080.67,-4323.36 9077.95,-4329.81"/>
<polygon fill="black" stroke="black" points="8843.91,-4252.07 8833.47,-4253.85 8842.74,-4258.98 8843.91,-4252.07"/>
</g>
<!-- if (data.length() &gt; 0) -->
<g id="node20" class="node"><title>if (data.length() &gt; 0)</title>
<polygon fill="none" stroke="black" points="8815,-4812 8696.64,-4794 8815,-4776 8933.36,-4794 8815,-4812"/>
<text text-anchor="middle" x="8815" y="-4790.3" font-family="Times,serif" font-size="14.00">if (data.length() &gt; 0)</text>
</g>
<!-- struct iovec iov(MakeIovec(data)) -->
<g id="node23" class="node"><title>struct iovec iov(MakeIovec(data))</title>
<ellipse fill="none" stroke="black" cx="8641" cy="-4706" rx="131.408" ry="18"/>
<text text-anchor="middle" x="8641" y="-4702.3" font-family="Times,serif" font-size="14.00">struct iovec iov(MakeIovec(data))</text>
</g>
<!-- if (data.length() &gt; 0)&#45;&gt;struct iovec iov(MakeIovec(data)) -->
<g id="edge29" class="edge"><title>if (data.length() &gt; 0)&#45;&gt;struct iovec iov(MakeIovec(data))</title>
<path fill="none" stroke="black" d="M8788.57,-4779.94C8760.71,-4766.17 8716.39,-4744.26 8683.59,-4728.05"/>
<polygon fill="black" stroke="black" points="8684.75,-4724.72 8674.24,-4723.43 8681.65,-4731 8684.75,-4724.72"/>
<text text-anchor="middle" x="8749" y="-4746.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_)) -->
<g id="node21" class="node"><title>if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))</title>
<polygon fill="none" stroke="black" points="8570,-4474 8226.85,-4456 8570,-4438 8913.15,-4456 8570,-4474"/>
<text text-anchor="middle" x="8570" y="-4452.3" font-family="Times,serif" font-size="14.00">if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))</text>
</g>
<!-- if (data.length() &gt; 0)&#45;&gt;if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_)) -->
<g id="edge33" class="edge"><title>if (data.length() &gt; 0)&#45;&gt;if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))</title>
<path fill="none" stroke="black" d="M8815.32,-4775.87C8815.61,-4758.51 8816,-4730.89 8816,-4707 8816,-4707 8816,-4707 8816,-4543 8816,-4509.2 8732.21,-4485.56 8662.44,-4471.74"/>
<polygon fill="black" stroke="black" points="8662.74,-4468.23 8652.26,-4469.77 8661.41,-4475.1 8662.74,-4468.23"/>
<text text-anchor="middle" x="8821" y="-4614.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- WriteBufferedData() -->
<g id="node26" class="node"><title>WriteBufferedData()</title>
<ellipse fill="none" stroke="black" cx="8570" cy="-4348" rx="85.2138" ry="18"/>
<text text-anchor="middle" x="8570" y="-4344.3" font-family="Times,serif" font-size="14.00">WriteBufferedData()</text>
</g>
<!-- if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))&#45;&gt;WriteBufferedData() -->
<g id="edge34" class="edge"><title>if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))&#45;&gt;WriteBufferedData()</title>
<path fill="none" stroke="black" d="M8570,-4437.97C8570,-4421.38 8570,-4395.88 8570,-4376.43"/>
<polygon fill="black" stroke="black" points="8573.5,-4376.34 8570,-4366.34 8566.5,-4376.34 8573.5,-4376.34"/>
<text text-anchor="middle" x="8575" y="-4408.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))&#45;&gt;void QuicStream::WriteOrBufferData -->
<g id="edge35" class="edge"><title>if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))&#45;&gt;void QuicStream::WriteOrBufferData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8597.74,-4439.37C8618.01,-4426.91 8645.13,-4407.95 8664,-4386 8695.13,-4349.79 8718.13,-4298.66 8730.27,-4267.78"/>
<polygon fill="black" stroke="black" points="8733.66,-4268.73 8733.96,-4258.14 8727.12,-4266.23 8733.66,-4268.73"/>
<text text-anchor="middle" x="8717" y="-4344.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- void QuicStream::WriteOrBufferData&#45;&gt;if (data.length() &gt; 0) -->
<g id="edge28" class="edge"><title>void QuicStream::WriteOrBufferData&#45;&gt;if (data.length() &gt; 0)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8826.62,-4254.54C8877.93,-4268.05 8933,-4294.72 8933,-4347 8933,-4707 8933,-4707 8933,-4707 8933,-4742.99 8896.7,-4765.51 8864.37,-4778.44"/>
<polygon fill="black" stroke="black" points="8863.07,-4775.19 8854.95,-4781.99 8865.54,-4781.74 8863.07,-4775.19"/>
</g>
<!-- send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length()) -->
<g id="node24" class="node"><title>send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())</title>
<ellipse fill="none" stroke="black" cx="8569" cy="-4618" rx="211.347" ry="18"/>
<text text-anchor="middle" x="8569" y="-4614.3" font-family="Times,serif" font-size="14.00">send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())</text>
</g>
<!-- struct iovec iov(MakeIovec(data))&#45;&gt;send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length()) -->
<g id="edge30" class="edge"><title>struct iovec iov(MakeIovec(data))&#45;&gt;send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())</title>
<path fill="none" stroke="black" d="M8626.78,-4688.01C8616.29,-4675.49 8601.86,-4658.25 8590.05,-4644.14"/>
<polygon fill="black" stroke="black" points="8592.54,-4641.67 8583.44,-4636.25 8587.18,-4646.16 8592.54,-4641.67"/>
</g>
<!-- OnDataBuffered(offset, data.length(), ack_listener) -->
<g id="node25" class="node"><title>OnDataBuffered(offset, data.length(), ack_listener)</title>
<ellipse fill="none" stroke="black" cx="8570" cy="-4544" rx="192.075" ry="18"/>
<text text-anchor="middle" x="8570" y="-4540.3" font-family="Times,serif" font-size="14.00">OnDataBuffered(offset, data.length(), ack_listener)</text>
</g>
<!-- send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())&#45;&gt;OnDataBuffered(offset, data.length(), ack_listener) -->
<g id="edge31" class="edge"><title>send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())&#45;&gt;OnDataBuffered(offset, data.length(), ack_listener)</title>
<path fill="none" stroke="black" d="M8569.24,-4599.94C8569.35,-4591.81 8569.49,-4581.88 8569.62,-4572.7"/>
<polygon fill="black" stroke="black" points="8573.12,-4572.49 8569.76,-4562.44 8566.12,-4572.39 8573.12,-4572.49"/>
</g>
<!-- OnDataBuffered(offset, data.length(), ack_listener)&#45;&gt;if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_)) -->
<g id="edge32" class="edge"><title>OnDataBuffered(offset, data.length(), ack_listener)&#45;&gt;if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))</title>
<path fill="none" stroke="black" d="M8570,-4525.6C8570,-4513.75 8570,-4497.82 8570,-4484.29"/>
<polygon fill="black" stroke="black" points="8573.5,-4484.08 8570,-4474.08 8566.5,-4484.08 8573.5,-4484.08"/>
</g>
<!-- WriteBufferedData()&#45;&gt;void QuicStream::WriteOrBufferData -->
<g id="edge36" class="edge"><title>WriteBufferedData()&#45;&gt;void QuicStream::WriteOrBufferData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8596.19,-4330.67C8625.22,-4312.57 8672.2,-4283.27 8704.52,-4263.12"/>
<polygon fill="black" stroke="black" points="8706.59,-4265.96 8713.22,-4257.7 8702.88,-4260.02 8706.59,-4265.96"/>
</g>
<!-- void QuicStream::WriteBufferedData -->
<g id="node27" class="node"><title>void QuicStream::WriteBufferedData</title>
<ellipse fill="none" stroke="black" cx="8370" cy="-4240" rx="143.931" ry="18"/>
<text text-anchor="middle" x="8370" y="-4236.3" font-family="Times,serif" font-size="14.00">void QuicStream::WriteBufferedData</text>
</g>
<!-- WriteBufferedData()&#45;&gt;void QuicStream::WriteBufferedData -->
<g id="edge37" class="edge"><title>WriteBufferedData()&#45;&gt;void QuicStream::WriteBufferedData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8530.87,-4326.26C8496.15,-4307.86 8445.62,-4281.08 8410.49,-4262.46"/>
<polygon fill="black" stroke="black" points="8529.58,-4329.54 8540.06,-4331.13 8532.86,-4323.36 8529.58,-4329.54"/>
<polygon fill="black" stroke="black" points="8411.94,-4259.27 8401.47,-4257.68 8408.66,-4265.45 8411.94,-4259.27"/>
</g>
<!-- if (session_&#45;&gt;ShouldYield(id())) -->
<g id="node28" class="node"><title>if (session_&#45;&gt;ShouldYield(id()))</title>
<polygon fill="none" stroke="black" points="7510,-4474 7332.9,-4456 7510,-4438 7687.1,-4456 7510,-4474"/>
<text text-anchor="middle" x="7510" y="-4452.3" font-family="Times,serif" font-size="14.00">if (session_&#45;&gt;ShouldYield(id()))</text>
</g>
<!-- void QuicStream::WriteBufferedData&#45;&gt;if (session_&#45;&gt;ShouldYield(id())) -->
<g id="edge38" class="edge"><title>void QuicStream::WriteBufferedData&#45;&gt;if (session_&#45;&gt;ShouldYield(id()))</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8268.96,-4252.85C8250.68,-4254.75 8231.79,-4256.57 8214,-4258 8158.94,-4262.44 7259.03,-4269.93 7221,-4310 7197.75,-4334.5 7200.07,-4359.49 7221,-4386 7245.16,-4416.61 7341.61,-4435.13 7416.52,-4445.17"/>
<polygon fill="black" stroke="black" points="7416.1,-4448.64 7426.47,-4446.47 7417.01,-4441.7 7416.1,-4448.64"/>
</g>
<!-- session_&#45;&gt;MarkConnectionLevelWriteBlocked(id()) -->
<g id="node30" class="node"><title>session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())</title>
<ellipse fill="none" stroke="black" cx="8005" cy="-4348" rx="196.399" ry="18"/>
<text text-anchor="middle" x="8005" y="-4344.3" font-family="Times,serif" font-size="14.00">session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())</text>
</g>
<!-- if (session_&#45;&gt;ShouldYield(id()))&#45;&gt;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id()) -->
<g id="edge39" class="edge"><title>if (session_&#45;&gt;ShouldYield(id()))&#45;&gt;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())</title>
<path fill="none" stroke="black" d="M7563.92,-4443.45C7650.12,-4424.99 7819.64,-4388.69 7921.58,-4366.86"/>
<polygon fill="black" stroke="black" points="7922.48,-4370.25 7931.53,-4364.73 7921.02,-4363.4 7922.48,-4370.25"/>
<text text-anchor="middle" x="7748" y="-4408.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_; -->
<g id="node31" class="node"><title>size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_;</title>
<ellipse fill="none" stroke="black" cx="7510" cy="-4348" rx="280.021" ry="37.4533"/>
<text text-anchor="middle" x="7510" y="-4359.3" font-family="Times,serif" font-size="14.00">size_t write_length = BufferedDataBytes();</text>
<text text-anchor="middle" x="7510" y="-4344.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);</text>
<text text-anchor="middle" x="7510" y="-4329.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;bool fin = fin_buffered_;</text>
</g>
<!-- if (session_&#45;&gt;ShouldYield(id()))&#45;&gt;size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_; -->
<g id="edge41" class="edge"><title>if (session_&#45;&gt;ShouldYield(id()))&#45;&gt;size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_;</title>
<path fill="none" stroke="black" d="M7510,-4437.97C7510,-4426.56 7510,-4410.93 7510,-4395.96"/>
<polygon fill="black" stroke="black" points="7513.5,-4395.76 7510,-4385.76 7506.5,-4395.76 7513.5,-4395.76"/>
<text text-anchor="middle" x="7515" y="-4408.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin) -->
<g id="node29" class="node"><title>QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)</title>
<ellipse fill="gold" stroke="black" cx="7498" cy="-3909" rx="263.066" ry="26.7407"/>
<text text-anchor="middle" x="7498" y="-3912.8" font-family="Times,serif" font-size="14.00">QuicConsumedData consumed_data = </text>
<text text-anchor="middle" x="7498" y="-3897.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)</text>
</g>
<!-- OnStreamDataConsumed(consumed_data.bytes_consumed) -->
<g id="node35" class="node"><title>OnStreamDataConsumed(consumed_data.bytes_consumed)</title>
<ellipse fill="none" stroke="black" cx="7664" cy="-3817" rx="223.37" ry="18"/>
<text text-anchor="middle" x="7664" y="-3813.3" font-family="Times,serif" font-size="14.00">OnStreamDataConsumed(consumed_data.bytes_consumed)</text>
</g>
<!-- QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)&#45;&gt;OnStreamDataConsumed(consumed_data.bytes_consumed) -->
<g id="edge46" class="edge"><title>QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)&#45;&gt;OnStreamDataConsumed(consumed_data.bytes_consumed)</title>
<path fill="none" stroke="black" d="M7545.12,-3882.45C7569.92,-3869.01 7600,-3852.7 7623.7,-3839.85"/>
<polygon fill="black" stroke="black" points="7625.65,-3842.77 7632.77,-3834.93 7622.31,-3836.62 7625.65,-3842.77"/>
</g>
<!-- QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin) -->
<g id="node39" class="node"><title>QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)</title>
<ellipse fill="none" stroke="black" cx="6918" cy="-3817" rx="287.189" ry="26.7407"/>
<text text-anchor="middle" x="6918" y="-3820.8" font-family="Times,serif" font-size="14.00">QuicConsumedData QuicStream::WritevDataInner(size_t write_length,</text>
<text text-anchor="middle" x="6918" y="-3805.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)</text>
</g>
<!-- QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)&#45;&gt;QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin) -->
<g id="edge51" class="edge"><title>QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)&#45;&gt;QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7347.51,-3884.65C7262.7,-3871.49 7157,-3855.09 7071.68,-3841.85"/>
<polygon fill="black" stroke="black" points="7347.18,-3888.14 7357.6,-3886.21 7348.25,-3881.22 7347.18,-3888.14"/>
<polygon fill="black" stroke="black" points="7072.06,-3838.36 7061.64,-3840.29 7070.99,-3845.28 7072.06,-3838.36"/>
</g>
<!-- session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())&#45;&gt;void QuicStream::WriteBufferedData -->
<g id="edge40" class="edge"><title>session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())&#45;&gt;void QuicStream::WriteBufferedData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8061.23,-4330.67C8127.27,-4311.49 8236.59,-4279.74 8305.87,-4259.62"/>
<polygon fill="black" stroke="black" points="8307.16,-4262.89 8315.79,-4256.74 8305.21,-4256.17 8307.16,-4262.89"/>
<text text-anchor="middle" x="8258.5" y="-4280.3" font-family="Times,serif" font-size="14.00">return</text>
</g>
<!-- send_window = flow_controller_.SendWindowSize(); -->
<g id="node32" class="node"><title>send_window = flow_controller_.SendWindowSize();</title>
<ellipse fill="none" stroke="black" cx="7539" cy="-4240" rx="202.174" ry="18"/>
<text text-anchor="middle" x="7539" y="-4236.3" font-family="Times,serif" font-size="14.00">send_window = flow_controller_.SendWindowSize();</text>
</g>
<!-- size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_;&#45;&gt;send_window = flow_controller_.SendWindowSize(); -->
<g id="edge42" class="edge"><title>size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_;&#45;&gt;send_window = flow_controller_.SendWindowSize();</title>
<path fill="none" stroke="black" d="M7519.98,-4310.52C7523.81,-4296.53 7528.1,-4280.84 7531.64,-4267.91"/>
<polygon fill="black" stroke="black" points="7535.03,-4268.78 7534.29,-4258.21 7528.28,-4266.94 7535.03,-4268.78"/>
</g>
<!-- if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;} -->
<g id="node33" class="node"><title>if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="7557" cy="-4136" rx="327.086" ry="48.1667"/>
<text text-anchor="middle" x="7557" y="-4154.8" font-family="Times,serif" font-size="14.00">if (stream_contributes_to_connection_flow_control_) { </text>
<text text-anchor="middle" x="7557" y="-4139.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;send_window =</text>
<text text-anchor="middle" x="7557" y="-4124.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());</text>
<text text-anchor="middle" x="7557" y="-4109.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- send_window = flow_controller_.SendWindowSize();&#45;&gt;if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;} -->
<g id="edge43" class="edge"><title>send_window = flow_controller_.SendWindowSize();&#45;&gt;if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M7542.05,-4221.7C7543.42,-4213.94 7545.12,-4204.3 7546.88,-4194.33"/>
<polygon fill="black" stroke="black" points="7550.36,-4194.76 7548.65,-4184.31 7543.47,-4193.55 7550.36,-4194.76"/>
</g>
<!-- if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;} -->
<g id="node34" class="node"><title>if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="7526" cy="-4012" rx="275.097" ry="37.4533"/>
<text text-anchor="middle" x="7526" y="-4023.3" font-family="Times,serif" font-size="14.00">if (session_&#45;&gt;session_decides_what_to_write()) {</text>
<text text-anchor="middle" x="7526" y="-4008.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);</text>
<text text-anchor="middle" x="7526" y="-3993.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;}&#45;&gt;if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;} -->
<g id="edge44" class="edge"><title>if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;}&#45;&gt;if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M7545.01,-4087.83C7542.66,-4078.57 7540.2,-4068.87 7537.85,-4059.63"/>
<polygon fill="black" stroke="black" points="7541.21,-4058.66 7535.36,-4049.83 7534.43,-4060.38 7541.21,-4058.66"/>
</g>
<!-- if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;}&#45;&gt;QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin) -->
<g id="edge45" class="edge"><title>if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;}&#45;&gt;QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)</title>
<path fill="none" stroke="black" d="M7515.89,-3974.54C7513.29,-3965.16 7510.5,-3955.08 7507.91,-3945.74"/>
<polygon fill="black" stroke="black" points="7511.24,-3944.66 7505.2,-3935.96 7504.5,-3946.53 7511.24,-3944.66"/>
</g>
<!-- AddBytesSent(consumed_data.bytes_consumed) -->
<g id="node36" class="node"><title>AddBytesSent(consumed_data.bytes_consumed)</title>
<ellipse fill="none" stroke="black" cx="7735" cy="-3714" rx="183.401" ry="18"/>
<text text-anchor="middle" x="7735" y="-3710.3" font-family="Times,serif" font-size="14.00">AddBytesSent(consumed_data.bytes_consumed)</text>
</g>
<!-- OnStreamDataConsumed(consumed_data.bytes_consumed)&#45;&gt;AddBytesSent(consumed_data.bytes_consumed) -->
<g id="edge47" class="edge"><title>OnStreamDataConsumed(consumed_data.bytes_consumed)&#45;&gt;AddBytesSent(consumed_data.bytes_consumed)</title>
<path fill="none" stroke="black" d="M7676.04,-3798.87C7687.26,-3782.91 7704.14,-3758.9 7716.97,-3740.65"/>
<polygon fill="black" stroke="black" points="7720.01,-3742.41 7722.9,-3732.22 7714.28,-3738.39 7720.01,-3742.41"/>
</g>
<!-- if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;} -->
<g id="node37" class="node"><title>if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="7810" cy="-3600" rx="107.22" ry="37.4533"/>
<text text-anchor="middle" x="7810" y="-3611.3" font-family="Times,serif" font-size="14.00">if (write_side_closed_) {</text>
<text text-anchor="middle" x="7810" y="-3596.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;</text>
<text text-anchor="middle" x="7810" y="-3581.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- AddBytesSent(consumed_data.bytes_consumed)&#45;&gt;if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;} -->
<g id="edge48" class="edge"><title>AddBytesSent(consumed_data.bytes_consumed)&#45;&gt;if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M7746.39,-3695.99C7755.41,-3682.53 7768.42,-3663.1 7780.33,-3645.31"/>
<polygon fill="black" stroke="black" points="7783.41,-3647 7786.06,-3636.75 7777.59,-3643.11 7783.41,-3647"/>
</g>
<!--  &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;} -->
<g id="node38" class="node"><title> &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="7872" cy="-3306" rx="309.008" ry="217.578"/>
<text text-anchor="middle" x="7872" y="-3444.8" font-family="Times,serif" font-size="14.00"> &#160;if (consumed_data.bytes_consumed == write_length) {</text>
<text text-anchor="middle" x="7872" y="-3429.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (!fin_with_zero_data) {</text>
<text text-anchor="middle" x="7872" y="-3414.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();</text>
<text text-anchor="middle" x="7872" y="-3399.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;</text>
<text text-anchor="middle" x="7872" y="-3384.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {</text>
<text text-anchor="middle" x="7872" y="-3369.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;</text>
<text text-anchor="middle" x="7872" y="-3354.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;</text>
<text text-anchor="middle" x="7872" y="-3339.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;if (fin_received_) {</text>
<text text-anchor="middle" x="7872" y="-3324.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);</text>
<text text-anchor="middle" x="7872" y="-3309.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;} &#160;&#160;</text>
<text text-anchor="middle" x="7872" y="-3294.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;CloseWriteSide();</text>
<text text-anchor="middle" x="7872" y="-3279.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {</text>
<text text-anchor="middle" x="7872" y="-3264.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());</text>
<text text-anchor="middle" x="7872" y="-3249.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;</text>
<text text-anchor="middle" x="7872" y="-3234.8" font-family="Times,serif" font-size="14.00"> &#160;} else {</text>
<text text-anchor="middle" x="7872" y="-3219.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());</text>
<text text-anchor="middle" x="7872" y="-3204.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
<text text-anchor="middle" x="7872" y="-3189.8" font-family="Times,serif" font-size="14.00"> &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {</text>
<text text-anchor="middle" x="7872" y="-3174.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;busy_counter_ = 0;</text>
<text text-anchor="middle" x="7872" y="-3159.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;}&#45;&gt; &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;} -->
<g id="edge49" class="edge"><title>if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;}&#45;&gt; &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;}</title>
<path fill="none" stroke="black" d="M7817.73,-3562.61C7819.68,-3553.41 7821.92,-3542.85 7824.36,-3531.36"/>
<polygon fill="black" stroke="black" points="7827.8,-3532.02 7826.45,-3521.51 7820.95,-3530.57 7827.8,-3532.02"/>
</g>
<!--  &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;}&#45;&gt;void QuicStream::WriteBufferedData -->
<g id="edge50" class="edge"><title> &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;}&#45;&gt;void QuicStream::WriteBufferedData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7959.61,-3515.18C7966,-3542.91 7970,-3571.33 7970,-3599 7970,-4137 7970,-4137 7970,-4137 7970,-4168.16 8154.64,-4204.06 8273.03,-4223.88"/>
<polygon fill="black" stroke="black" points="8272.77,-4227.38 8283.21,-4225.57 8273.92,-4220.48 8272.77,-4227.38"/>
</g>
<!-- if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;} -->
<g id="node40" class="node"><title>if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="6939" cy="-3714" rx="194.182" ry="37.4533"/>
<text text-anchor="middle" x="6939" y="-3725.3" font-family="Times,serif" font-size="14.00">if (fin &amp;&amp; add_random_padding_after_fin_) { </text>
<text text-anchor="middle" x="6939" y="-3710.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;</text>
<text text-anchor="middle" x="6939" y="-3695.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)&#45;&gt;if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;} -->
<g id="edge52" class="edge"><title>QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)&#45;&gt;if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6923.41,-3789.99C6925.21,-3781.31 6927.28,-3771.37 6929.31,-3761.61"/>
<polygon fill="black" stroke="black" points="6932.79,-3762.08 6931.39,-3751.58 6925.93,-3760.66 6932.79,-3762.08"/>
</g>
<!-- return session()&#45;&gt;WritevData(this, id(), write_length, offset, state); -->
<g id="node41" class="node"><title>return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);</title>
<ellipse fill="none" stroke="black" cx="6944" cy="-3600" rx="248.392" ry="18"/>
<text text-anchor="middle" x="6944" y="-3596.3" font-family="Times,serif" font-size="14.00">return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);</text>
</g>
<!-- if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;}&#45;&gt;return session()&#45;&gt;WritevData(this, id(), write_length, offset, state); -->
<g id="edge53" class="edge"><title>if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;}&#45;&gt;return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);</title>
<path fill="none" stroke="black" d="M6940.64,-3676.33C6941.33,-3660.77 6942.13,-3642.95 6942.77,-3628.54"/>
<polygon fill="black" stroke="black" points="6946.28,-3628.44 6943.23,-3618.29 6939.29,-3628.12 6946.28,-3628.44"/>
</g>
<!-- return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);&#45;&gt;QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin) -->
<g id="edge54" class="edge"><title>return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);&#45;&gt;QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6997.01,-3617.6C7037.66,-3631.16 7094.64,-3651.95 7142,-3676 7261.61,-3736.73 7390.91,-3828.24 7455.79,-3876.16"/>
<polygon fill="black" stroke="black" points="7454.02,-3879.2 7464.13,-3882.34 7458.19,-3873.58 7454.02,-3879.2"/>
</g>
<!-- QuicConsumedData QuicSession::WritevData -->
<g id="node42" class="node"><title>QuicConsumedData QuicSession::WritevData</title>
<ellipse fill="gold" stroke="black" cx="6944" cy="-3306" rx="174.252" ry="18"/>
<text text-anchor="middle" x="6944" y="-3302.3" font-family="Times,serif" font-size="14.00">QuicConsumedData QuicSession::WritevData</text>
</g>
<!-- return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);&#45;&gt;QuicConsumedData QuicSession::WritevData -->
<g id="edge55" class="edge"><title>return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);&#45;&gt;QuicConsumedData QuicSession::WritevData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6944,-3571.47C6944,-3515.74 6944,-3390.14 6944,-3334.46"/>
<polygon fill="black" stroke="black" points="6940.5,-3571.61 6944,-3581.61 6947.5,-3571.61 6940.5,-3571.61"/>
<polygon fill="black" stroke="black" points="6947.5,-3334.3 6944,-3324.3 6940.5,-3334.3 6947.5,-3334.3"/>
</g>
<!-- if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream()) -->
<g id="node43" class="node"><title>if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())</title>
<polygon fill="none" stroke="black" points="6539,-3016 6167.99,-2998 6539,-2980 6910.01,-2998 6539,-3016"/>
<text text-anchor="middle" x="6539" y="-2994.3" font-family="Times,serif" font-size="14.00">if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())</text>
</g>
<!-- QuicConsumedData QuicSession::WritevData&#45;&gt;if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream()) -->
<g id="edge56" class="edge"><title>QuicConsumedData QuicSession::WritevData&#45;&gt;if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6921.65,-3288.11C6853.15,-3236.36 6646.11,-3079.92 6568.66,-3021.41"/>
<polygon fill="black" stroke="black" points="6570.39,-3018.33 6560.3,-3015.09 6566.17,-3023.91 6570.39,-3018.33"/>
</g>
<!-- if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())&#45;&gt;QuicConsumedData QuicSession::WritevData -->
<g id="edge57" class="edge"><title>if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())&#45;&gt;QuicConsumedData QuicSession::WritevData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6566.07,-3014.85C6583.74,-3025.46 6607.12,-3039.98 6627,-3054 6738.05,-3132.3 6862.4,-3235.69 6916.45,-3281.46"/>
<polygon fill="black" stroke="black" points="6914.31,-3284.25 6924.2,-3288.05 6918.84,-3278.91 6914.31,-3284.25"/>
<text text-anchor="middle" x="6751.5" y="-3058.3" font-family="Times,serif" font-size="14.00">Y &#160;return QuicConsumedData(0, false)</text>
</g>
<!-- if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId) -->
<g id="node44" class="node"><title>if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)</title>
<ellipse fill="none" stroke="black" cx="6809" cy="-2869" rx="219.521" ry="18"/>
<text text-anchor="middle" x="6809" y="-2865.3" font-family="Times,serif" font-size="14.00">if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)</text>
</g>
<!-- if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())&#45;&gt;if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId) -->
<g id="edge58" class="edge"><title>if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())&#45;&gt;if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)</title>
<path fill="none" stroke="black" d="M6571.84,-2981.55C6619.83,-2958.98 6709.31,-2916.89 6763.58,-2891.36"/>
<polygon fill="black" stroke="black" points="6765.4,-2894.38 6772.96,-2886.95 6762.42,-2888.04 6765.4,-2894.38"/>
<text text-anchor="middle" x="6688" y="-2930.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)&#45;&gt;QuicConsumedData QuicSession::WritevData -->
<g id="edge59" class="edge"><title>if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)&#45;&gt;QuicConsumedData QuicSession::WritevData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6841.71,-2886.92C6867.58,-2902.23 6902.06,-2927.37 6919,-2960 6974.32,-3066.6 6958.46,-3217.2 6948.88,-3277.99"/>
<polygon fill="black" stroke="black" points="6945.41,-3277.51 6947.24,-3287.94 6952.32,-3278.65 6945.41,-3277.51"/>
<text text-anchor="middle" x="7052.5" y="-2994.3" font-family="Times,serif" font-size="14.00">Y &#160;return QuicConsumedData(0, false)</text>
</g>
<!-- QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state) -->
<g id="node45" class="node"><title>QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)</title>
<ellipse fill="none" stroke="black" cx="6809" cy="-2678" rx="260.323" ry="26.7407"/>
<text text-anchor="middle" x="6809" y="-2681.8" font-family="Times,serif" font-size="14.00">QuicConsumedData data = </text>
<text text-anchor="middle" x="6809" y="-2666.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)</text>
</g>
<!-- if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)&#45;&gt;QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state) -->
<g id="edge60" class="edge"><title>if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)&#45;&gt;QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)</title>
<path fill="none" stroke="black" d="M6809,-2850.89C6809,-2820.38 6809,-2755.96 6809,-2715.23"/>
<polygon fill="black" stroke="black" points="6812.5,-2715.17 6809,-2705.17 6805.5,-2715.17 6812.5,-2715.17"/>
<text text-anchor="middle" x="6814" y="-2801.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- QuicSession::WritevData return data; -->
<g id="node46" class="node"><title>QuicSession::WritevData return data;</title>
<ellipse fill="none" stroke="black" cx="6967" cy="-2508" rx="143.456" ry="18"/>
<text text-anchor="middle" x="6967" y="-2504.3" font-family="Times,serif" font-size="14.00">QuicSession::WritevData return data;</text>
</g>
<!-- QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)&#45;&gt;QuicSession::WritevData return data; -->
<g id="edge61" class="edge"><title>QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)&#45;&gt;QuicSession::WritevData return data;</title>
<path fill="none" stroke="black" d="M6833.34,-2651.12C6863.51,-2619.04 6914.52,-2564.8 6944.04,-2533.42"/>
<polygon fill="black" stroke="black" points="6946.75,-2535.64 6951.05,-2525.96 6941.65,-2530.85 6946.75,-2535.64"/>
</g>
<!-- QuicConnection::SendStreamData -->
<g id="node48" class="node"><title>QuicConnection::SendStreamData</title>
<ellipse fill="none" stroke="black" cx="5961" cy="-2508" rx="132.382" ry="18"/>
<text text-anchor="middle" x="5961" y="-2504.3" font-family="Times,serif" font-size="14.00">QuicConnection::SendStreamData</text>
</g>
<!-- QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)&#45;&gt;QuicConnection::SendStreamData -->
<g id="edge63" class="edge"><title>QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)&#45;&gt;QuicConnection::SendStreamData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6682.61,-2651.96C6506.13,-2617 6190.89,-2554.54 6042.49,-2525.15"/>
<polygon fill="black" stroke="black" points="6681.93,-2655.39 6692.42,-2653.9 6683.29,-2648.53 6681.93,-2655.39"/>
<polygon fill="black" stroke="black" points="6043.02,-2521.68 6032.53,-2523.17 6041.66,-2528.55 6043.02,-2521.68"/>
</g>
<!-- QuicSession::WritevData return data;&#45;&gt;QuicConsumedData QuicSession::WritevData -->
<g id="edge62" class="edge"><title>QuicSession::WritevData return data;&#45;&gt;QuicConsumedData QuicSession::WritevData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7018.89,-2524.88C7081.36,-2547.61 7178,-2595.88 7178,-2677 7178,-2999 7178,-2999 7178,-2999 7178,-3128.29 7044.56,-3236.81 6979.21,-3282.2"/>
<polygon fill="black" stroke="black" points="6977.12,-3279.39 6970.84,-3287.93 6981.07,-3285.17 6977.12,-3279.39"/>
</g>
<!-- if (state == NO_FIN &amp;&amp; write_length == 0) -->
<g id="node47" class="node"><title>if (state == NO_FIN &amp;&amp; write_length == 0)</title>
<polygon fill="none" stroke="black" points="5902,-3324 5660.39,-3306 5902,-3288 6143.61,-3306 5902,-3324"/>
<text text-anchor="middle" x="5902" y="-3302.3" font-family="Times,serif" font-size="14.00">if (state == NO_FIN &amp;&amp; write_length == 0)</text>
</g>
<!-- if (state == NO_FIN &amp;&amp; write_length == 0)&#45;&gt;QuicConnection::SendStreamData -->
<g id="edge65" class="edge"><title>if (state == NO_FIN &amp;&amp; write_length == 0)&#45;&gt;QuicConnection::SendStreamData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5902.86,-3287.75C5905.12,-3241.19 5911,-3109.02 5911,-2999 5911,-2999 5911,-2999 5911,-2677 5911,-2625.15 5933.15,-2567.91 5947.96,-2535.41"/>
<polygon fill="black" stroke="black" points="5951.22,-2536.69 5952.29,-2526.15 5944.88,-2533.73 5951.22,-2536.69"/>
<text text-anchor="middle" x="6017.5" y="-2865.3" font-family="Times,serif" font-size="14.00">Y return QuicConsumedData(0, false);</text>
</g>
<!-- ScopedRetransmissionScheduler alarm_delayer(this) -->
<g id="node49" class="node"><title>ScopedRetransmissionScheduler alarm_delayer(this)</title>
<ellipse fill="none" stroke="black" cx="5680" cy="-2998" rx="198.349" ry="18"/>
<text text-anchor="middle" x="5680" y="-2994.3" font-family="Times,serif" font-size="14.00">ScopedRetransmissionScheduler alarm_delayer(this)</text>
</g>
<!-- if (state == NO_FIN &amp;&amp; write_length == 0)&#45;&gt;ScopedRetransmissionScheduler alarm_delayer(this) -->
<g id="edge66" class="edge"><title>if (state == NO_FIN &amp;&amp; write_length == 0)&#45;&gt;ScopedRetransmissionScheduler alarm_delayer(this)</title>
<path fill="none" stroke="black" d="M5890.06,-3288.55C5853.5,-3238.14 5742.82,-3085.59 5698.57,-3024.6"/>
<polygon fill="black" stroke="black" points="5701.25,-3022.33 5692.54,-3016.29 5695.58,-3026.44 5701.25,-3022.33"/>
<text text-anchor="middle" x="5733" y="-3058.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- QuicConnection::SendStreamData&#45;&gt;if (state == NO_FIN &amp;&amp; write_length == 0) -->
<g id="edge64" class="edge"><title>QuicConnection::SendStreamData&#45;&gt;if (state == NO_FIN &amp;&amp; write_length == 0)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6001.84,-2525.17C6055.5,-2549.42 6143,-2600.67 6143,-2677 6143,-2999 6143,-2999 6143,-2999 6143,-3131.35 6002.14,-3240.18 5935.8,-3284.1"/>
<polygon fill="black" stroke="black" points="5933.8,-3281.23 5927.34,-3289.62 5937.62,-3287.09 5933.8,-3281.23"/>
</g>
<!-- ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING) -->
<g id="node50" class="node"><title>ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)</title>
<ellipse fill="none" stroke="black" cx="5638" cy="-2869" rx="237.344" ry="18"/>
<text text-anchor="middle" x="5638" y="-2865.3" font-family="Times,serif" font-size="14.00">ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)</text>
</g>
<!-- ScopedRetransmissionScheduler alarm_delayer(this)&#45;&gt;ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING) -->
<g id="edge67" class="edge"><title>ScopedRetransmissionScheduler alarm_delayer(this)&#45;&gt;ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)</title>
<path fill="none" stroke="black" d="M5674.34,-2979.87C5667.29,-2958.57 5655.18,-2921.95 5646.89,-2896.89"/>
<polygon fill="black" stroke="black" points="5650.17,-2895.66 5643.71,-2887.26 5643.53,-2897.86 5650.17,-2895.66"/>
</g>
<!-- packet_generator_.ConsumeData(id, write_length, offset, state) -->
<g id="node51" class="node"><title>packet_generator_.ConsumeData(id, write_length, offset, state)</title>
<ellipse fill="none" stroke="black" cx="5637" cy="-2678" rx="235.394" ry="18"/>
<text text-anchor="middle" x="5637" y="-2674.3" font-family="Times,serif" font-size="14.00">packet_generator_.ConsumeData(id, write_length, offset, state)</text>
</g>
<!-- ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)&#45;&gt;packet_generator_.ConsumeData(id, write_length, offset, state) -->
<g id="edge68" class="edge"><title>ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)&#45;&gt;packet_generator_.ConsumeData(id, write_length, offset, state)</title>
<path fill="none" stroke="black" d="M5637.91,-2850.89C5637.74,-2818.02 5637.35,-2745.76 5637.14,-2706.2"/>
<polygon fill="black" stroke="black" points="5640.64,-2706.18 5637.09,-2696.2 5633.64,-2706.22 5640.64,-2706.18"/>
</g>
<!-- packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicConnection::SendStreamData -->
<g id="edge69" class="edge"><title>packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicConnection::SendStreamData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5669.55,-2660.12C5728.89,-2629.35 5854.56,-2564.19 5919.78,-2530.37"/>
<polygon fill="black" stroke="black" points="5921.69,-2533.33 5928.95,-2525.62 5918.46,-2527.11 5921.69,-2533.33"/>
</g>
<!-- QuicPacketGenerator::ConsumeData -->
<g id="node55" class="node"><title>QuicPacketGenerator::ConsumeData</title>
<ellipse fill="none" stroke="black" cx="5131" cy="-2508" rx="141.531" ry="18"/>
<text text-anchor="middle" x="5131" y="-2504.3" font-family="Times,serif" font-size="14.00">QuicPacketGenerator::ConsumeData</text>
</g>
<!-- packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicPacketGenerator::ConsumeData -->
<g id="edge70" class="edge"><title>packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicPacketGenerator::ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5588.28,-2655.84C5534.64,-2631.01 5445.77,-2589.94 5366,-2564 5316.48,-2547.89 5259.8,-2534.81 5214.47,-2525.45"/>
<polygon fill="black" stroke="black" points="5587,-2659.1 5597.55,-2660.13 5589.94,-2652.75 5587,-2659.1"/>
<polygon fill="black" stroke="black" points="5214.89,-2521.96 5204.39,-2523.39 5213.49,-2528.82 5214.89,-2521.96"/>
</g>
<!-- packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicPacketGenerator::ConsumeData -->
<g id="edge71" class="edge"><title>packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicPacketGenerator::ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5608.96,-2659.92C5562.82,-2635.74 5468.32,-2591.42 5384,-2564 5332.63,-2547.29 5273.57,-2533.83 5225.39,-2524.41"/>
<polygon fill="black" stroke="black" points="5225.76,-2520.92 5215.28,-2522.47 5224.43,-2527.79 5225.76,-2520.92"/>
</g>
<!-- // We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？ -->
<g id="node52" class="node"><title>// We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？</title>
<ellipse fill="lightgrey" stroke="black" cx="4972" cy="-3306" rx="326.525" ry="69.0935"/>
<text text-anchor="middle" x="4972" y="-3339.8" font-family="Times,serif" font-size="14.00">// We determine if we can enter the fast path before executing</text>
<text text-anchor="middle" x="4972" y="-3324.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;// the slow path loop.</text>
<text text-anchor="middle" x="4972" y="-3309.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;</text>
<text text-anchor="middle" x="4972" y="-3294.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;</text>
<text text-anchor="middle" x="4972" y="-3279.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;</text>
<text text-anchor="middle" x="4972" y="-3264.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;//快慢路径的区别是什么？</text>
</g>
<!--  &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE)) -->
<g id="node53" class="node"><title> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))</title>
<ellipse fill="lightgrey" stroke="black" cx="4736" cy="-2998" rx="332.01" ry="37.4533"/>
<text text-anchor="middle" x="4736" y="-3009.3" font-family="Times,serif" font-size="14.00"> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(</text>
<text text-anchor="middle" x="4736" y="-2994.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,</text>
<text text-anchor="middle" x="4736" y="-2979.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))</text>
</g>
<!-- // We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？&#45;&gt; &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE)) -->
<g id="edge76" class="edge"><title>// We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？&#45;&gt; &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))</title>
<path fill="none" stroke="black" d="M4919.92,-3237.47C4874.53,-3178.62 4809.98,-3094.92 4770.66,-3043.94"/>
<polygon fill="black" stroke="black" points="4773.21,-3041.52 4764.33,-3035.73 4767.67,-3045.79 4773.21,-3041.52"/>
</g>
<!-- packet_creator_.ConsumeData -->
<g id="node54" class="node"><title>packet_creator_.ConsumeData</title>
<polygon fill="gold" stroke="black" points="4548,-2887 4378.81,-2869 4548,-2851 4717.19,-2869 4548,-2887"/>
<text text-anchor="middle" x="4548" y="-2865.3" font-family="Times,serif" font-size="14.00">packet_creator_.ConsumeData</text>
</g>
<!--  &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt;packet_creator_.ConsumeData -->
<g id="edge77" class="edge"><title> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt;packet_creator_.ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4682.63,-2960.95C4648.93,-2938.18 4606.61,-2909.59 4578.51,-2890.61"/>
<polygon fill="black" stroke="black" points="4580.16,-2887.5 4569.91,-2884.8 4576.24,-2893.3 4580.16,-2887.5"/>
</g>
<!--  &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed); -->
<g id="node61" class="node"><title> &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);</title>
<ellipse fill="none" stroke="black" cx="5056" cy="-2869" rx="300.281" ry="37.4533"/>
<text text-anchor="middle" x="5056" y="-2880.3" font-family="Times,serif" font-size="14.00"> &#160;if (run_fast_path) {</text>
<text text-anchor="middle" x="5056" y="-2865.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,</text>
<text text-anchor="middle" x="5056" y="-2850.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);</text>
</g>
<!--  &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt; &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed); -->
<g id="edge82" class="edge"><title> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt; &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);</title>
<path fill="none" stroke="black" d="M4824.71,-2961.79C4866.24,-2945.31 4915.82,-2925.63 4958.41,-2908.73"/>
<polygon fill="black" stroke="black" points="4959.94,-2911.89 4967.95,-2904.95 4957.36,-2905.38 4959.94,-2911.89"/>
</g>
<!-- bool QuicConnection::ShouldGeneratePacket -->
<g id="node63" class="node"><title>bool QuicConnection::ShouldGeneratePacket</title>
<ellipse fill="none" stroke="black" cx="3692" cy="-2869" rx="170.402" ry="18"/>
<text text-anchor="middle" x="3692" y="-2865.3" font-family="Times,serif" font-size="14.00">bool QuicConnection::ShouldGeneratePacket</text>
</g>
<!--  &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt;bool QuicConnection::ShouldGeneratePacket -->
<g id="edge85" class="edge"><title> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt;bool QuicConnection::ShouldGeneratePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4504.22,-2968.8C4288.95,-2942.62 3977.15,-2904.69 3809.39,-2884.28"/>
<polygon fill="black" stroke="black" points="4503.93,-2972.29 4514.28,-2970.03 4504.77,-2965.35 4503.93,-2972.29"/>
<polygon fill="black" stroke="black" points="3809.64,-2880.78 3799.29,-2883.05 3808.8,-2887.73 3809.64,-2880.78"/>
</g>
<!-- packet_creator_.ConsumeData&#45;&gt;QuicPacketGenerator::ConsumeData -->
<g id="edge78" class="edge"><title>packet_creator_.ConsumeData&#45;&gt;QuicPacketGenerator::ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4554.26,-2851.41C4560.24,-2835.46 4569.44,-2810.66 4577,-2789 4607.73,-2701.03 4571.15,-2649.33 4643,-2590 4701.24,-2541.91 4905.77,-2559.9 4980,-2546 5007.76,-2540.8 5038.05,-2533.67 5064.17,-2527.06"/>
<polygon fill="black" stroke="black" points="5065.14,-2530.42 5073.96,-2524.55 5063.41,-2523.64 5065.14,-2530.42"/>
<text text-anchor="middle" x="4747.5" y="-2674.3" font-family="Times,serif" font-size="14.00">N return QuicConsumedData(0, false)</text>
</g>
<!-- packet_creator_.Flush() -->
<g id="node59" class="node"><title>packet_creator_.Flush()</title>
<ellipse fill="none" stroke="black" cx="4474" cy="-2678" rx="94.338" ry="18"/>
<text text-anchor="middle" x="4474" y="-2674.3" font-family="Times,serif" font-size="14.00">packet_creator_.Flush()</text>
</g>
<!-- packet_creator_.ConsumeData&#45;&gt;packet_creator_.Flush() -->
<g id="edge79" class="edge"><title>packet_creator_.ConsumeData&#45;&gt;packet_creator_.Flush()</title>
<path fill="none" stroke="black" d="M4541.56,-2851.56C4528.75,-2818.84 4499.97,-2745.33 4484.43,-2705.63"/>
<polygon fill="black" stroke="black" points="4487.59,-2704.12 4480.69,-2696.08 4481.08,-2706.67 4487.59,-2704.12"/>
<text text-anchor="middle" x="4532" y="-2801.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- bool QuicPacketCreator::ConsumeData(QuicStreamId id,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame) -->
<g id="node90" class="node"><title>bool QuicPacketCreator::ConsumeData(QuicStreamId id,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame)</title>
<ellipse fill="none" stroke="black" cx="4121" cy="-2678" rx="234.079" ry="79.8063"/>
<text text-anchor="middle" x="4121" y="-2719.3" font-family="Times,serif" font-size="14.00">bool QuicPacketCreator::ConsumeData(QuicStreamId id,</text>
<text text-anchor="middle" x="4121" y="-2704.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,</text>
<text text-anchor="middle" x="4121" y="-2689.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,</text>
<text text-anchor="middle" x="4121" y="-2674.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,</text>
<text text-anchor="middle" x="4121" y="-2659.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,</text>
<text text-anchor="middle" x="4121" y="-2644.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,</text>
<text text-anchor="middle" x="4121" y="-2629.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame)</text>
</g>
<!-- packet_creator_.ConsumeData&#45;&gt;bool QuicPacketCreator::ConsumeData(QuicStreamId id,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame) -->
<g id="edge116" class="edge"><title>packet_creator_.ConsumeData&#45;&gt;bool QuicPacketCreator::ConsumeData(QuicStreamId id,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4506.87,-2850.17C4470.15,-2834.23 4414.93,-2810.18 4367,-2789 4335.84,-2775.23 4302.51,-2760.4 4270.75,-2746.22"/>
<polygon fill="black" stroke="black" points="4505.68,-2853.47 4516.25,-2854.24 4508.47,-2847.05 4505.68,-2853.47"/>
<polygon fill="black" stroke="black" points="4271.96,-2742.92 4261.4,-2742.04 4269.1,-2749.32 4271.96,-2742.92"/>
</g>
<!-- const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush); -->
<g id="node56" class="node"><title>const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush);</title>
<ellipse fill="none" stroke="black" cx="5042" cy="-2393" rx="315.055" ry="37.4533"/>
<text text-anchor="middle" x="5042" y="-2404.3" font-family="Times,serif" font-size="14.00">const bool flush =</text>
<text text-anchor="middle" x="5042" y="-2389.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();</text>
<text text-anchor="middle" x="5042" y="-2374.3" font-family="Times,serif" font-size="14.00"> &#160;SendQueuedFrames(flush);</text>
</g>
<!-- QuicPacketGenerator::ConsumeData&#45;&gt;const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush); -->
<g id="edge72" class="edge"><title>QuicPacketGenerator::ConsumeData&#45;&gt;const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush);</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5117.48,-2489.84C5106.77,-2476.24 5091.31,-2456.6 5077.16,-2438.64"/>
<polygon fill="black" stroke="black" points="5079.71,-2436.22 5070.77,-2430.53 5074.21,-2440.56 5079.71,-2436.22"/>
</g>
<!--  &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();} -->
<g id="node57" class="node"><title> &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();}</title>
<ellipse fill="none" stroke="black" cx="5050" cy="-2264" rx="304.145" ry="26.7407"/>
<text text-anchor="middle" x="5050" y="-2267.8" font-family="Times,serif" font-size="14.00"> &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {</text>
<text text-anchor="middle" x="5050" y="-2252.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;packet_creator_.Flush();}</text>
</g>
<!-- const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush);&#45;&gt; &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();} -->
<g id="edge73" class="edge"><title>const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush);&#45;&gt; &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();}</title>
<path fill="none" stroke="black" d="M5044.31,-2355.27C5045.38,-2338.28 5046.65,-2318.17 5047.72,-2301.24"/>
<polygon fill="black" stroke="black" points="5051.22,-2301.37 5048.35,-2291.17 5044.23,-2300.93 5051.22,-2301.37"/>
</g>
<!-- if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);} -->
<g id="node58" class="node"><title>if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);}</title>
<ellipse fill="none" stroke="black" cx="5169" cy="-2129" rx="167.376" ry="26.7407"/>
<text text-anchor="middle" x="5169" y="-2132.8" font-family="Times,serif" font-size="14.00">if (!fin &amp;&amp; (write_length == 0)) {</text>
<text text-anchor="middle" x="5169" y="-2117.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return QuicConsumedData(0, false);}</text>
</g>
<!--  &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();}&#45;&gt;if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);} -->
<g id="edge74" class="edge"><title> &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();}&#45;&gt;if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);}</title>
<path fill="none" stroke="black" d="M5073.23,-2237.04C5091.98,-2216.08 5118.52,-2186.42 5138.9,-2163.64"/>
<polygon fill="black" stroke="black" points="5141.77,-2165.68 5145.83,-2155.89 5136.56,-2161.01 5141.77,-2165.68"/>
</g>
<!-- if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);}&#45;&gt;// We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？ -->
<g id="edge75" class="edge"><title>if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);}&#45;&gt;// We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？</title>
<path fill="none" stroke="black" d="M5261.3,-2151.46C5316.5,-2170.38 5376,-2204.37 5376,-2263 5376,-2999 5376,-2999 5376,-2999 5376,-3117.41 5264.35,-3195.89 5158.44,-3243.7"/>
<polygon fill="black" stroke="black" points="5156.92,-3240.54 5149.2,-3247.8 5159.76,-3246.94 5156.92,-3240.54"/>
</g>
<!-- run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize; -->
<g id="node60" class="node"><title>run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;</title>
<ellipse fill="none" stroke="black" cx="4675" cy="-2508" rx="295.917" ry="37.4533"/>
<text text-anchor="middle" x="4675" y="-2519.3" font-family="Times,serif" font-size="14.00">run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;</text>
<text text-anchor="middle" x="4675" y="-2504.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;</text>
<text text-anchor="middle" x="4675" y="-2489.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;</text>
</g>
<!-- packet_creator_.Flush()&#45;&gt;run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize; -->
<g id="edge80" class="edge"><title>packet_creator_.Flush()&#45;&gt;run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;</title>
<path fill="none" stroke="black" d="M4491.87,-2659.95C4515.86,-2637.31 4560.08,-2596.41 4600,-2564 4605.22,-2559.76 4610.73,-2555.44 4616.29,-2551.19"/>
<polygon fill="black" stroke="black" points="4618.59,-2553.84 4624.46,-2545.01 4614.37,-2548.26 4618.59,-2553.84"/>
</g>
<!-- void QuicPacketCreator::Flush() -->
<g id="node92" class="node"><title>void QuicPacketCreator::Flush()</title>
<ellipse fill="none" stroke="black" cx="3098" cy="-2508" rx="126.133" ry="18"/>
<text text-anchor="middle" x="3098" y="-2504.3" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::Flush()</text>
</g>
<!-- packet_creator_.Flush()&#45;&gt;void QuicPacketCreator::Flush() -->
<g id="edge117" class="edge"><title>packet_creator_.Flush()&#45;&gt;void QuicPacketCreator::Flush()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4452.74,-2652.62C4432.9,-2631.79 4401.29,-2603.16 4367,-2590 4186.28,-2520.61 3690.09,-2559.83 3497,-2546 3398.51,-2538.95 3286.59,-2528.34 3206.4,-2520.29"/>
<polygon fill="black" stroke="black" points="4450.38,-2655.22 4459.74,-2660.18 4455.51,-2650.46 4450.38,-2655.22"/>
<polygon fill="black" stroke="black" points="3206.59,-2516.79 3196.29,-2519.27 3205.89,-2523.76 3206.59,-2516.79"/>
</g>
<!-- run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;&#45;&gt; &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE)) -->
<g id="edge81" class="edge"><title>run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;&#45;&gt; &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4777.29,-2543.34C4797.46,-2554.95 4816.06,-2570.17 4828,-2590 4850.81,-2627.89 4851.07,-2751.27 4828,-2789 4806.64,-2823.94 4768.4,-2796.72 4746,-2831 4733.6,-2849.98 4732.65,-2908.15 4733.77,-2950.28"/>
<polygon fill="black" stroke="black" points="4730.27,-2950.45 4734.08,-2960.34 4737.27,-2950.24 4730.27,-2950.45"/>
</g>
<!--  &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);} -->
<g id="node62" class="node"><title> &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}</title>
<ellipse fill="none" stroke="black" cx="5029" cy="-2678" rx="167.938" ry="26.7407"/>
<text text-anchor="middle" x="5029" y="-2681.8" font-family="Times,serif" font-size="14.00"> &#160;if (has_handshake) {</text>
<text text-anchor="middle" x="5029" y="-2666.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}</text>
</g>
<!--  &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);&#45;&gt; &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);} -->
<g id="edge83" class="edge"><title> &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);&#45;&gt; &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}</title>
<path fill="none" stroke="black" d="M5050.73,-2831.11C5045.94,-2797.57 5038.91,-2748.37 5034.16,-2715.09"/>
<polygon fill="black" stroke="black" points="5037.58,-2714.28 5032.7,-2704.88 5030.65,-2715.27 5037.58,-2714.28"/>
</g>
<!--  &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}&#45;&gt;QuicPacketGenerator::ConsumeData -->
<g id="edge84" class="edge"><title> &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}&#45;&gt;QuicPacketGenerator::ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5013.27,-2651.19C5000.69,-2626.88 4987.75,-2590.34 5005,-2564 5015.85,-2547.42 5032.92,-2535.81 5051.03,-2527.69"/>
<polygon fill="black" stroke="black" points="5052.66,-2530.8 5060.57,-2523.75 5049.99,-2524.33 5052.66,-2530.8"/>
<text text-anchor="middle" x="5188" y="-2568.3" font-family="Times,serif" font-size="14.00">return QuicConsumedData(total_bytes_consumed, fin_consumed);</text>
</g>
<!--  if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="node64" class="node"><title> if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="3676" cy="-2678" rx="166.316" ry="37.4533"/>
<text text-anchor="middle" x="3676" y="-2689.3" font-family="Times,serif" font-size="14.00"> if (handshake == IS_HANDSHAKE) {</text>
<text text-anchor="middle" x="3676" y="-2674.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3676" y="-2659.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- bool QuicConnection::ShouldGeneratePacket&#45;&gt; if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="edge86" class="edge"><title>bool QuicConnection::ShouldGeneratePacket&#45;&gt; if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3690.55,-2850.89C3688.18,-2822.89 3683.39,-2766.32 3679.96,-2725.72"/>
<polygon fill="black" stroke="black" points="3683.42,-2725.18 3679.09,-2715.51 3676.45,-2725.77 3683.42,-2725.18"/>
</g>
<!-- return CanWrite(retransmittable); -->
<g id="node65" class="node"><title>return CanWrite(retransmittable);</title>
<ellipse fill="none" stroke="black" cx="3733" cy="-2508" rx="129.483" ry="18"/>
<text text-anchor="middle" x="3733" y="-2504.3" font-family="Times,serif" font-size="14.00">return CanWrite(retransmittable);</text>
</g>
<!--  if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt;return CanWrite(retransmittable); -->
<g id="edge87" class="edge"><title> if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt;return CanWrite(retransmittable);</title>
<path fill="none" stroke="black" d="M3688.37,-2640.55C3699.04,-2609.09 3714.21,-2564.37 3723.83,-2536.02"/>
<polygon fill="black" stroke="black" points="3727.21,-2536.97 3727.11,-2526.37 3720.58,-2534.72 3727.21,-2536.97"/>
</g>
<!-- return CanWrite(retransmittable);&#45;&gt;bool QuicConnection::ShouldGeneratePacket -->
<g id="edge88" class="edge"><title>return CanWrite(retransmittable);&#45;&gt;bool QuicConnection::ShouldGeneratePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3774.33,-2525.14C3801.5,-2538.18 3834.91,-2559.44 3851,-2590 3871.6,-2629.13 3874.3,-2751.41 3851,-2789 3832.83,-2818.32 3800.15,-2837.11 3769.13,-2848.96"/>
<polygon fill="black" stroke="black" points="3767.78,-2845.73 3759.57,-2852.42 3770.17,-2852.31 3767.78,-2845.73"/>
</g>
<!-- bool QuicConnection::CanWrite -->
<g id="node66" class="node"><title>bool QuicConnection::CanWrite</title>
<ellipse fill="gold" stroke="black" cx="3856" cy="-2393" rx="126.133" ry="18"/>
<text text-anchor="middle" x="3856" y="-2389.3" font-family="Times,serif" font-size="14.00">bool QuicConnection::CanWrite</text>
</g>
<!-- return CanWrite(retransmittable);&#45;&gt;bool QuicConnection::CanWrite -->
<g id="edge89" class="edge"><title>return CanWrite(retransmittable);&#45;&gt;bool QuicConnection::CanWrite</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3758.95,-2483.16C3779.81,-2463.99 3808.98,-2437.19 3829.89,-2417.99"/>
<polygon fill="black" stroke="black" points="3756.41,-2480.74 3751.41,-2490.08 3761.15,-2485.89 3756.41,-2480.74"/>
<polygon fill="black" stroke="black" points="3832.46,-2420.38 3837.46,-2411.03 3827.73,-2415.22 3832.46,-2420.38"/>
</g>
<!--  &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node67" class="node"><title> &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3856" cy="-2264" rx="85.9015" ry="37.4533"/>
<text text-anchor="middle" x="3856" y="-2275.3" font-family="Times,serif" font-size="14.00"> &#160;if (!connected_) {</text>
<text text-anchor="middle" x="3856" y="-2260.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3856" y="-2245.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- bool QuicConnection::CanWrite&#45;&gt; &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge90" class="edge"><title>bool QuicConnection::CanWrite&#45;&gt; &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M3856,-2374.87C3856,-2358.74 3856,-2333.83 3856,-2311.8"/>
<polygon fill="black" stroke="black" points="3859.5,-2311.6 3856,-2301.6 3852.5,-2311.6 3859.5,-2311.6"/>
</g>
<!--  &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="node68" class="node"><title> &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3856" cy="-2129" rx="356.073" ry="58.8803"/>
<text text-anchor="middle" x="3856" y="-2155.3" font-family="Times,serif" font-size="14.00"> &#160;if (session_decides_what_to_write() &amp;&amp;</text>
<text text-anchor="middle" x="3856" y="-2140.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { </text>
<text text-anchor="middle" x="3856" y="-2125.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.</text>
<text text-anchor="middle" x="3856" y="-2110.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3856" y="-2095.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="edge91" class="edge"><title> &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;}</title>
<path fill="none" stroke="black" d="M3856,-2226.31C3856,-2217.46 3856,-2207.73 3856,-2197.95"/>
<polygon fill="black" stroke="black" points="3859.5,-2197.79 3856,-2187.79 3852.5,-2197.79 3859.5,-2197.79"/>
</g>
<!--  &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} -->
<g id="node69" class="node"><title> &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3856" cy="-1920" rx="194.182" ry="111.946"/>
<text text-anchor="middle" x="3856" y="-1983.8" font-family="Times,serif" font-size="14.00"> &#160;if (add_to_blocked_list_if_writer_blocked_) {</text>
<text text-anchor="middle" x="3856" y="-1968.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (HandleWriteBlocked()) {</text>
<text text-anchor="middle" x="3856" y="-1953.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3856" y="-1938.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;&#160;</text>
<text text-anchor="middle" x="3856" y="-1923.8" font-family="Times,serif" font-size="14.00"> &#160;} else {</text>
<text text-anchor="middle" x="3856" y="-1908.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {</text>
<text text-anchor="middle" x="3856" y="-1893.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();</text>
<text text-anchor="middle" x="3856" y="-1878.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3856" y="-1863.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;&#160;</text>
<text text-anchor="middle" x="3856" y="-1848.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt; &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} -->
<g id="edge92" class="edge"><title> &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt; &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;}</title>
<path fill="none" stroke="black" d="M3856,-2070.06C3856,-2061.19 3856,-2051.75 3856,-2042.11"/>
<polygon fill="black" stroke="black" points="3859.5,-2041.99 3856,-2031.99 3852.5,-2041.99 3859.5,-2041.99"/>
</g>
<!-- // Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node70" class="node"><title>// Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3856" cy="-1679" rx="255.459" ry="90.5193"/>
<text text-anchor="middle" x="3856" y="-1727.8" font-family="Times,serif" font-size="14.00">// Allow acks to be sent immediately.</text>
<text text-anchor="middle" x="3856" y="-1712.8" font-family="Times,serif" font-size="14.00"> &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {</text>
<text text-anchor="middle" x="3856" y="-1697.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3856" y="-1682.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
<text text-anchor="middle" x="3856" y="-1667.8" font-family="Times,serif" font-size="14.00"> &#160;// If the send alarm is set, wait for it to fire.</text>
<text text-anchor="middle" x="3856" y="-1652.8" font-family="Times,serif" font-size="14.00"> &#160;if (send_alarm_&#45;&gt;IsSet()) {</text>
<text text-anchor="middle" x="3856" y="-1637.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3856" y="-1622.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;}&#45;&gt;// Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge93" class="edge"><title> &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;}&#45;&gt;// Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M3856,-1808.25C3856,-1798.74 3856,-1789.16 3856,-1779.75"/>
<polygon fill="black" stroke="black" points="3859.5,-1779.61 3856,-1769.61 3852.5,-1779.61 3859.5,-1779.61"/>
</g>
<!-- QuicTime now = clock_&#45;&gt;Now(); -->
<g id="node71" class="node"><title>QuicTime now = clock_&#45;&gt;Now();</title>
<ellipse fill="none" stroke="black" cx="3856" cy="-1385" rx="131.408" ry="18"/>
<text text-anchor="middle" x="3856" y="-1381.3" font-family="Times,serif" font-size="14.00">QuicTime now = clock_&#45;&gt;Now();</text>
</g>
<!-- // Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt;QuicTime now = clock_&#45;&gt;Now(); -->
<g id="edge94" class="edge"><title>// Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt;QuicTime now = clock_&#45;&gt;Now();</title>
<path fill="none" stroke="black" d="M3856,-1588.41C3856,-1528.18 3856,-1452.83 3856,-1413.22"/>
<polygon fill="black" stroke="black" points="3859.5,-1413.04 3856,-1403.04 3852.5,-1413.04 3859.5,-1413.04"/>
</g>
<!-- QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now) -->
<g id="node72" class="node"><title>QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)</title>
<ellipse fill="none" stroke="black" cx="3856" cy="-1120" rx="260.916" ry="18"/>
<text text-anchor="middle" x="3856" y="-1116.3" font-family="Times,serif" font-size="14.00">QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)</text>
</g>
<!-- QuicTime now = clock_&#45;&gt;Now();&#45;&gt;QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now) -->
<g id="edge95" class="edge"><title>QuicTime now = clock_&#45;&gt;Now();&#45;&gt;QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)</title>
<path fill="none" stroke="black" d="M3856,-1366.74C3856,-1322.16 3856,-1202.84 3856,-1148.57"/>
<polygon fill="black" stroke="black" points="3859.5,-1148.32 3856,-1138.32 3852.5,-1148.32 3859.5,-1148.32"/>
</g>
<!--  &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node73" class="node"><title> &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3886" cy="-876" rx="115.448" ry="48.1667"/>
<text text-anchor="middle" x="3886" y="-894.8" font-family="Times,serif" font-size="14.00"> &#160;if (delay.IsInfinite()) {</text>
<text text-anchor="middle" x="3886" y="-879.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();</text>
<text text-anchor="middle" x="3886" y="-864.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3886" y="-849.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)&#45;&gt; &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge96" class="edge"><title>QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)&#45;&gt; &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M3858.11,-1101.98C3862.36,-1067.72 3872.11,-989.033 3878.88,-934.445"/>
<polygon fill="black" stroke="black" points="3882.39,-934.563 3880.15,-924.209 3875.44,-933.702 3882.39,-934.563"/>
</g>
<!-- QuicTime::Delta QuicSentPacketManager::TimeUntilSend -->
<g id="node75" class="node"><title>QuicTime::Delta QuicSentPacketManager::TimeUntilSend</title>
<ellipse fill="none" stroke="black" cx="3256" cy="-876" rx="219.996" ry="18"/>
<text text-anchor="middle" x="3256" y="-872.3" font-family="Times,serif" font-size="14.00">QuicTime::Delta QuicSentPacketManager::TimeUntilSend</text>
</g>
<!-- QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)&#45;&gt;QuicTime::Delta QuicSentPacketManager::TimeUntilSend -->
<g id="edge99" class="edge"><title>QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)&#45;&gt;QuicTime::Delta QuicSentPacketManager::TimeUntilSend</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3758.85,-1100.91C3683.12,-1084.91 3576.36,-1058.15 3488,-1020 3411.19,-986.837 3329.81,-931.265 3286.81,-900.061"/>
<polygon fill="black" stroke="black" points="3758.35,-1104.38 3768.86,-1103 3759.78,-1097.53 3758.35,-1104.38"/>
<polygon fill="black" stroke="black" points="3288.62,-897.05 3278.49,-893.974 3284.49,-902.701 3288.62,-897.05"/>
</g>
<!--  &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node74" class="node"><title> &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3895" cy="-568" rx="323.283" ry="111.946"/>
<text text-anchor="middle" x="3895" y="-631.8" font-family="Times,serif" font-size="14.00"> &#160;// Scheduler requires a delay.</text>
<text text-anchor="middle" x="3895" y="-616.8" font-family="Times,serif" font-size="14.00"> &#160;if (!delay.IsZero()) {</text>
<text text-anchor="middle" x="3895" y="-601.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {</text>
<text text-anchor="middle" x="3895" y="-586.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.</text>
<text text-anchor="middle" x="3895" y="-571.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3895" y="-556.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;&#160;</text>
<text text-anchor="middle" x="3895" y="-541.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.</text>
<text text-anchor="middle" x="3895" y="-526.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));</text>
<text text-anchor="middle" x="3895" y="-511.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3895" y="-496.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge97" class="edge"><title> &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M3887.39,-827.858C3888.47,-791.077 3890.02,-738.287 3891.44,-689.962"/>
<polygon fill="black" stroke="black" points="3894.95,-689.823 3891.74,-679.725 3887.95,-689.618 3894.95,-689.823"/>
</g>
<!--  &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt;bool QuicConnection::CanWrite -->
<g id="edge98" class="edge"><title> &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt;bool QuicConnection::CanWrite</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4071.38,-661.791C4143.36,-713.296 4210,-785.224 4210,-875 4210,-1570 4210,-1570 4210,-1570 4210,-1792.28 4218.56,-1847.74 4221,-2070 4221.58,-2122.44 4247.54,-2142.77 4221,-2188 4158.3,-2294.86 4016.97,-2349.91 3929.72,-2374.73"/>
<polygon fill="black" stroke="black" points="3928.58,-2371.42 3919.88,-2377.47 3930.46,-2378.16 3928.58,-2371.42"/>
<text text-anchor="middle" x="4224" y="-1675.3" font-family="Times,serif" font-size="14.00">true</text>
</g>
<!--  &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;} -->
<g id="node76" class="node"><title> &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3231" cy="-568" rx="195.303" ry="37.4533"/>
<text text-anchor="middle" x="3231" y="-579.3" font-family="Times,serif" font-size="14.00"> &#160;if (pending_timer_transmission_count_ &gt; 0) {</text>
<text text-anchor="middle" x="3231" y="-564.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return QuicTime::Delta::Zero();</text>
<text text-anchor="middle" x="3231" y="-549.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- QuicTime::Delta QuicSentPacketManager::TimeUntilSend&#45;&gt; &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;} -->
<g id="edge100" class="edge"><title>QuicTime::Delta QuicSentPacketManager::TimeUntilSend&#45;&gt; &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3254.58,-857.671C3250.82,-811.613 3240.47,-684.954 3234.82,-615.71"/>
<polygon fill="black" stroke="black" points="3238.29,-615.201 3233.98,-605.519 3231.31,-615.771 3238.29,-615.201"/>
</g>
<!--  &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;} -->
<g id="node77" class="node"><title> &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3216" cy="-356" rx="260.323" ry="48.1667"/>
<text text-anchor="middle" x="3216" y="-374.8" font-family="Times,serif" font-size="14.00"> &#160;if (using_pacing_) {</text>
<text text-anchor="middle" x="3216" y="-359.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,</text>
<text text-anchor="middle" x="3216" y="-344.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());</text>
<text text-anchor="middle" x="3216" y="-329.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}&#45;&gt; &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;} -->
<g id="edge101" class="edge"><title> &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}&#45;&gt; &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;}</title>
<path fill="none" stroke="black" d="M3228.39,-530.421C3226.1,-498.411 3222.74,-451.376 3220.1,-414.363"/>
<polygon fill="black" stroke="black" points="3223.58,-413.935 3219.37,-404.21 3216.59,-414.434 3223.58,-413.935"/>
</g>
<!--  &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());

 &#160;&#160;&#160;} -->
<g id="node78" class="node"><title> &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());

 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="3182" cy="-1385" rx="260.323" ry="59.2941"/>
<text text-anchor="middle" x="3182" y="-1411.8" font-family="Times,serif" font-size="14.00"> &#160;if (using_pacing_) {</text>
<text text-anchor="middle" x="3182" y="-1396.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,</text>
<text text-anchor="middle" x="3182" y="-1381.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());</text>
<text text-anchor="middle" x="3182" y="-1350.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!--  &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite(); -->
<g id="node79" class="node"><title> &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();</title>
<ellipse fill="none" stroke="black" cx="3182" cy="-1120" rx="294.235" ry="37.4533"/>
<text text-anchor="middle" x="3182" y="-1131.3" font-family="Times,serif" font-size="14.00"> &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())</text>
<text text-anchor="middle" x="3182" y="-1116.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()</text>
<text text-anchor="middle" x="3182" y="-1101.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();</text>
</g>
<!--  &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());

 &#160;&#160;&#160;}&#45;&gt; &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite(); -->
<g id="edge102" class="edge"><title> &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());

 &#160;&#160;&#160;}&#45;&gt; &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();</title>
<path fill="none" stroke="black" d="M3182,-1325.31C3182,-1277.79 3182,-1211.76 3182,-1167.77"/>
<polygon fill="black" stroke="black" points="3185.5,-1167.64 3182,-1157.64 3178.5,-1167.64 3185.5,-1167.64"/>
</g>
<!--  &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();&#45;&gt;QuicTime::Delta QuicSentPacketManager::TimeUntilSend -->
<g id="edge103" class="edge"><title> &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();&#45;&gt;QuicTime::Delta QuicSentPacketManager::TimeUntilSend</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3193.16,-1082.51C3208.19,-1033.37 3234.57,-947.084 3247.86,-903.618"/>
<polygon fill="black" stroke="black" points="3251.21,-904.618 3250.79,-894.031 3244.52,-902.571 3251.21,-904.618"/>
</g>
<!-- !sender_&#45;&gt;CanSend(bytes_in_flight) -->
<g id="node80" class="node"><title>!sender_&#45;&gt;CanSend(bytes_in_flight)</title>
<polygon fill="gold" stroke="black" points="2132,-1403 1934.57,-1385 2132,-1367 2329.43,-1385 2132,-1403"/>
<text text-anchor="middle" x="2132" y="-1381.3" font-family="Times,serif" font-size="14.00">!sender_&#45;&gt;CanSend(bytes_in_flight)</text>
</g>
<!-- QuicTime::Delta PacingSender::TimeUntilSend -->
<g id="node82" class="node"><title>QuicTime::Delta PacingSender::TimeUntilSend</title>
<ellipse fill="none" stroke="black" cx="2375" cy="-568" rx="180.526" ry="18"/>
<text text-anchor="middle" x="2375" y="-564.3" font-family="Times,serif" font-size="14.00">QuicTime::Delta PacingSender::TimeUntilSend</text>
</g>
<!-- !sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend -->
<g id="edge106" class="edge"><title>!sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2110.55,-1368.78C2067.72,-1337.03 1972.13,-1259.11 1930,-1168 1889.65,-1080.74 1907.05,-740.416 1913,-732 1981.12,-635.733 2110.97,-595.93 2215.71,-579.667"/>
<polygon fill="black" stroke="black" points="2216.39,-583.104 2225.76,-578.165 2215.36,-576.181 2216.39,-583.104"/>
<text text-anchor="middle" x="2021.5" y="-1042.3" font-family="Times,serif" font-size="14.00">Y &amp;&amp; return QuicTime::Delta::Infinite()</text>
</g>
<!--  &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;} -->
<g id="node83" class="node"><title> &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="2228" cy="-1120" rx="289.31" ry="48.1667"/>
<text text-anchor="middle" x="2228" y="-1138.8" font-family="Times,serif" font-size="14.00"> &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {</text>
<text text-anchor="middle" x="2228" y="-1123.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.</text>
<text text-anchor="middle" x="2228" y="-1108.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return QuicTime::Delta::Zero();</text>
<text text-anchor="middle" x="2228" y="-1093.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- !sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt; &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;} -->
<g id="edge107" class="edge"><title>!sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt; &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}</title>
<path fill="none" stroke="black" d="M2138.15,-1367.15C2151.81,-1329.72 2185.21,-1238.23 2207.21,-1177.95"/>
<polygon fill="black" stroke="black" points="2210.64,-1178.78 2210.78,-1168.18 2204.06,-1176.38 2210.64,-1178.78"/>
<text text-anchor="middle" x="2208" y="-1190.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- virtual bool CanSend(QuicByteCount bytes_in_flight) = 0 -->
<g id="node85" class="node"><title>virtual bool CanSend(QuicByteCount bytes_in_flight) = 0</title>
<ellipse fill="none" stroke="black" cx="1650" cy="-1120" rx="217.121" ry="18"/>
<text text-anchor="middle" x="1650" y="-1116.3" font-family="Times,serif" font-size="14.00">virtual bool CanSend(QuicByteCount bytes_in_flight) = 0</text>
</g>
<!-- !sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt;virtual bool CanSend(QuicByteCount bytes_in_flight) = 0 -->
<g id="edge110" class="edge"><title>!sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt;virtual bool CanSend(QuicByteCount bytes_in_flight) = 0</title>
<path fill="none" stroke="black" d="M2105.05,-1369.3C2024.57,-1325.38 1785.61,-1194.99 1690.1,-1142.88"/>
<polygon fill="black" stroke="black" points="1691.5,-1139.66 1681.05,-1137.94 1688.15,-1145.8 1691.5,-1139.66"/>
</g>
<!--  &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight()) -->
<g id="node81" class="node"><title> &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight())</title>
<ellipse fill="none" stroke="black" cx="2740" cy="-876" rx="258.141" ry="37.4533"/>
<text text-anchor="middle" x="2740" y="-887.3" font-family="Times,serif" font-size="14.00"> &#160;if (using_pacing_) {</text>
<text text-anchor="middle" x="2740" y="-872.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,</text>
<text text-anchor="middle" x="2740" y="-857.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight())</text>
</g>
<!--  &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight())&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend -->
<g id="edge104" class="edge"><title> &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight())&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2688.91,-832.171C2610.74,-766.636 2464.09,-643.685 2402.91,-592.399"/>
<polygon fill="black" stroke="black" points="2687.14,-835.256 2697.06,-838.998 2691.64,-829.891 2687.14,-835.256"/>
<polygon fill="black" stroke="black" points="2405.11,-589.679 2395.2,-585.936 2400.62,-595.043 2405.11,-589.679"/>
</g>
<!-- QuicTime::Delta PacingSender::TimeUntilSend&#45;&gt;!sender_&#45;&gt;CanSend(bytes_in_flight) -->
<g id="edge105" class="edge"><title>QuicTime::Delta PacingSender::TimeUntilSend&#45;&gt;!sender_&#45;&gt;CanSend(bytes_in_flight)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2489.78,-581.901C2654.27,-603.02 2944.19,-650.937 3007,-732 3026.6,-757.296 3024.87,-993.454 3007,-1020 2972.71,-1070.94 2935.78,-1048.61 2879,-1072 2610.68,-1182.54 2289.23,-1317.74 2174.92,-1365.9"/>
<polygon fill="black" stroke="black" points="2173.31,-1362.78 2165.46,-1369.89 2176.03,-1369.23 2173.31,-1362.78"/>
</g>
<!--  &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;} -->
<g id="node84" class="node"><title> &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="2193" cy="-876" rx="270.233" ry="37.4533"/>
<text text-anchor="middle" x="2193" y="-887.3" font-family="Times,serif" font-size="14.00"> &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {</text>
<text text-anchor="middle" x="2193" y="-872.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;</text>
<text text-anchor="middle" x="2193" y="-857.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}&#45;&gt; &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;} -->
<g id="edge108" class="edge"><title> &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}&#45;&gt; &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;}</title>
<path fill="none" stroke="black" d="M2221.17,-1071.77C2214.99,-1029.07 2205.95,-966.556 2199.79,-923.948"/>
<polygon fill="black" stroke="black" points="2203.22,-923.233 2198.33,-913.837 2196.3,-924.235 2203.22,-923.233"/>
</g>
<!--  &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;}&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend -->
<g id="edge109" class="edge"><title> &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;}&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend</title>
<path fill="none" stroke="black" d="M2214.77,-838.393C2252.06,-775.709 2327.22,-649.325 2359.6,-594.899"/>
<polygon fill="black" stroke="black" points="2362.67,-596.585 2364.77,-586.202 2356.65,-593.007 2362.67,-596.585"/>
<text text-anchor="middle" x="2382.5" y="-702.3" font-family="Times,serif" font-size="14.00"> return QuicTime::Delta::Zero()</text>
</g>
<!-- bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight) -->
<g id="node86" class="node"><title>bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)</title>
<ellipse fill="none" stroke="black" cx="1617" cy="-876" rx="260.44" ry="18"/>
<text text-anchor="middle" x="1617" y="-872.3" font-family="Times,serif" font-size="14.00">bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)</text>
</g>
<!-- virtual bool CanSend(QuicByteCount bytes_in_flight) = 0&#45;&gt;bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight) -->
<g id="edge111" class="edge"><title>virtual bool CanSend(QuicByteCount bytes_in_flight) = 0&#45;&gt;bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)</title>
<path fill="none" stroke="black" d="M1647.68,-1101.98C1642.05,-1060.69 1627.62,-954.864 1620.75,-904.472"/>
<polygon fill="black" stroke="black" points="1624.18,-903.757 1619.36,-894.322 1617.25,-904.703 1624.18,-903.757"/>
</g>
<!--  &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;} -->
<g id="node87" class="node"><title> &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1591" cy="-568" rx="266.369" ry="58.8803"/>
<text text-anchor="middle" x="1591" y="-594.3" font-family="Times,serif" font-size="14.00"> &#160;if (!no_prr_ &amp;&amp; InRecovery()) {</text>
<text text-anchor="middle" x="1591" y="-579.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// PRR is used when in recovery.</text>
<text text-anchor="middle" x="1591" y="-564.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,</text>
<text text-anchor="middle" x="1591" y="-549.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());</text>
<text text-anchor="middle" x="1591" y="-534.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)&#45;&gt; &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;} -->
<g id="edge112" class="edge"><title>bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)&#45;&gt; &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1615.53,-857.671C1611.99,-816.037 1602.86,-708.544 1596.79,-637.132"/>
<polygon fill="black" stroke="black" points="1600.25,-636.537 1595.92,-626.87 1593.28,-637.13 1600.25,-636.537"/>
</g>
<!--  &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="node88" class="node"><title> &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1591" cy="-356" rx="205.091" ry="37.4533"/>
<text text-anchor="middle" x="1591" y="-367.3" font-family="Times,serif" font-size="14.00"> &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {</text>
<text text-anchor="middle" x="1591" y="-352.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="1591" y="-337.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;}&#45;&gt; &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="edge113" class="edge"><title> &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;}&#45;&gt; &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;}</title>
<path fill="none" stroke="black" d="M1591,-509.061C1591,-475.902 1591,-434.849 1591,-403.76"/>
<polygon fill="black" stroke="black" points="1594.5,-403.624 1591,-393.624 1587.5,-403.624 1594.5,-403.624"/>
</g>
<!--  &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="node89" class="node"><title> &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1591" cy="-232" rx="266.369" ry="37.4533"/>
<text text-anchor="middle" x="1591" y="-243.3" font-family="Times,serif" font-size="14.00"> &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {</text>
<text text-anchor="middle" x="1591" y="-228.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="1591" y="-213.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt; &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="edge114" class="edge"><title> &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt; &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;}</title>
<path fill="none" stroke="black" d="M1591,-318.396C1591,-306.212 1591,-292.473 1591,-279.635"/>
<polygon fill="black" stroke="black" points="1594.5,-279.578 1591,-269.578 1587.5,-279.578 1594.5,-279.578"/>
</g>
<!--  &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt;bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight) -->
<g id="edge115" class="edge"><title> &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt;bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1752.82,-261.801C1772.56,-271.211 1790.75,-283.629 1805,-300 1845.83,-346.9 1786.1,-392.054 1828,-438 1839.77,-450.905 1855.34,-434.169 1866,-448 1897.48,-488.831 1888.57,-633.649 1866,-680 1824.47,-765.281 1725.59,-824.264 1665.69,-853.606"/>
<polygon fill="black" stroke="black" points="1663.92,-850.573 1656.42,-858.06 1666.95,-856.882 1663.92,-850.573"/>
<text text-anchor="middle" x="1859" y="-426.3" font-family="Times,serif" font-size="14.00">return false</text>
</g>
<!-- if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0) -->
<g id="node91" class="node"><title>if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)</title>
<polygon fill="none" stroke="black" points="2921,-3324 2596.81,-3306 2921,-3288 3245.19,-3306 2921,-3324"/>
<text text-anchor="middle" x="2921" y="-3302.3" font-family="Times,serif" font-size="14.00">if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)</text>
</g>
<!-- if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)&#45;&gt;void QuicPacketCreator::Flush() -->
<g id="edge119" class="edge"><title>if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)&#45;&gt;void QuicPacketCreator::Flush()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2936.53,-3288.6C2975.99,-3245.13 3077,-3121.84 3077,-2999 3077,-2999 3077,-2999 3077,-2677 3077,-2626.87 3086.32,-2568.97 3092.54,-2535.91"/>
<polygon fill="black" stroke="black" points="3095.98,-2536.57 3094.44,-2526.08 3089.11,-2535.24 3095.98,-2536.57"/>
<text text-anchor="middle" x="3113.5" y="-2865.3" font-family="Times,serif" font-size="14.00">Y &amp;&amp; return</text>
</g>
<!-- serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer() -->
<g id="node93" class="node"><title>serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()</title>
<ellipse fill="none" stroke="black" cx="2837" cy="-2998" rx="214.221" ry="18"/>
<text text-anchor="middle" x="2837" y="-2994.3" font-family="Times,serif" font-size="14.00">serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()</text>
</g>
<!-- if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)&#45;&gt;serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer() -->
<g id="edge120" class="edge"><title>if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)&#45;&gt;serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()</title>
<path fill="none" stroke="black" d="M2916.36,-3288.11C2902.51,-3237.66 2861.35,-3087.72 2844.41,-3026"/>
<polygon fill="black" stroke="black" points="2847.75,-3024.93 2841.73,-3016.21 2841,-3026.78 2847.75,-3024.93"/>
<text text-anchor="middle" x="2861" y="-3058.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- void QuicPacketCreator::Flush()&#45;&gt;if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0) -->
<g id="edge118" class="edge"><title>void QuicPacketCreator::Flush()&#45;&gt;if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3110.69,-2526.13C3131.12,-2555.44 3169,-2617.79 3169,-2677 3169,-2999 3169,-2999 3169,-2999 3169,-3132.18 3025.47,-3239.82 2956.79,-3283.71"/>
<polygon fill="black" stroke="black" points="2954.61,-3280.94 2948.01,-3289.23 2958.34,-3286.87 2954.61,-3280.94"/>
</g>
<!-- SerializePacket(serialized_packet_buffer, kMaxPacketSize) -->
<g id="node94" class="node"><title>SerializePacket(serialized_packet_buffer, kMaxPacketSize)</title>
<ellipse fill="none" stroke="black" cx="2819" cy="-2869" rx="221.445" ry="18"/>
<text text-anchor="middle" x="2819" y="-2865.3" font-family="Times,serif" font-size="14.00">SerializePacket(serialized_packet_buffer, kMaxPacketSize)</text>
</g>
<!-- serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()&#45;&gt;SerializePacket(serialized_packet_buffer, kMaxPacketSize) -->
<g id="edge121" class="edge"><title>serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()&#45;&gt;SerializePacket(serialized_packet_buffer, kMaxPacketSize)</title>
<path fill="none" stroke="black" d="M2834.57,-2979.87C2831.57,-2958.66 2826.41,-2922.28 2822.86,-2897.23"/>
<polygon fill="black" stroke="black" points="2826.32,-2896.67 2821.45,-2887.26 2819.38,-2897.65 2826.32,-2896.67"/>
</g>
<!-- OnSerializedPacket() -->
<g id="node95" class="node"><title>OnSerializedPacket()</title>
<ellipse fill="none" stroke="black" cx="2819" cy="-2678" rx="85.19" ry="18"/>
<text text-anchor="middle" x="2819" y="-2674.3" font-family="Times,serif" font-size="14.00">OnSerializedPacket()</text>
</g>
<!-- SerializePacket(serialized_packet_buffer, kMaxPacketSize)&#45;&gt;OnSerializedPacket() -->
<g id="edge122" class="edge"><title>SerializePacket(serialized_packet_buffer, kMaxPacketSize)&#45;&gt;OnSerializedPacket()</title>
<path fill="none" stroke="black" d="M2819,-2850.89C2819,-2818.02 2819,-2745.76 2819,-2706.2"/>
<polygon fill="black" stroke="black" points="2822.5,-2706.2 2819,-2696.2 2815.5,-2706.2 2822.5,-2706.2"/>
</g>
<!-- void QuicPacketCreator::SerializePacket -->
<g id="node96" class="node"><title>void QuicPacketCreator::SerializePacket</title>
<ellipse fill="none" stroke="black" cx="2036" cy="-2678" rx="154.529" ry="18"/>
<text text-anchor="middle" x="2036" y="-2674.3" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::SerializePacket</text>
</g>
<!-- SerializePacket(serialized_packet_buffer, kMaxPacketSize)&#45;&gt;void QuicPacketCreator::SerializePacket -->
<g id="edge124" class="edge"><title>SerializePacket(serialized_packet_buffer, kMaxPacketSize)&#45;&gt;void QuicPacketCreator::SerializePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2742.01,-2849.42C2591.04,-2812.98 2257.97,-2732.58 2109.7,-2696.79"/>
<polygon fill="black" stroke="black" points="2741.36,-2852.86 2751.9,-2851.8 2743,-2846.06 2741.36,-2852.86"/>
<polygon fill="black" stroke="black" points="2110.31,-2693.34 2099.77,-2694.39 2108.67,-2700.14 2110.31,-2693.34"/>
</g>
<!-- OnSerializedPacket()&#45;&gt;void QuicPacketCreator::Flush() -->
<g id="edge123" class="edge"><title>OnSerializedPacket()&#45;&gt;void QuicPacketCreator::Flush()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2845.75,-2660.89C2895.98,-2630.64 3004.47,-2565.32 3061.41,-2531.03"/>
<polygon fill="black" stroke="black" points="3063.33,-2533.96 3070.09,-2525.8 3059.72,-2527.97 3063.33,-2533.96"/>
</g>
<!-- void QuicPacketCreator::OnSerializedPacket() -->
<g id="node103" class="node"><title>void QuicPacketCreator::OnSerializedPacket()</title>
<ellipse fill="none" stroke="black" cx="2398" cy="-2508" rx="175.227" ry="18"/>
<text text-anchor="middle" x="2398" y="-2504.3" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::OnSerializedPacket()</text>
</g>
<!-- OnSerializedPacket()&#45;&gt;void QuicPacketCreator::OnSerializedPacket() -->
<g id="edge132" class="edge"><title>OnSerializedPacket()&#45;&gt;void QuicPacketCreator::OnSerializedPacket()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2771.44,-2658.02C2691.57,-2626.15 2531.18,-2562.14 2449.03,-2529.36"/>
<polygon fill="black" stroke="black" points="2770.31,-2661.34 2780.9,-2661.79 2772.91,-2654.84 2770.31,-2661.34"/>
<polygon fill="black" stroke="black" points="2450,-2525.98 2439.41,-2525.53 2447.4,-2532.48 2450,-2525.98"/>
</g>
<!-- FillPacketHeader(&amp;header) -->
<g id="node97" class="node"><title>FillPacketHeader(&amp;header)</title>
<ellipse fill="none" stroke="black" cx="1950" cy="-2508" rx="108.31" ry="18"/>
<text text-anchor="middle" x="1950" y="-2504.3" font-family="Times,serif" font-size="14.00">FillPacketHeader(&amp;header)</text>
</g>
<!-- void QuicPacketCreator::SerializePacket&#45;&gt;FillPacketHeader(&amp;header) -->
<g id="edge125" class="edge"><title>void QuicPacketCreator::SerializePacket&#45;&gt;FillPacketHeader(&amp;header)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2027.28,-2659.97C2012.21,-2630.53 1981.21,-2569.98 1963.39,-2535.17"/>
<polygon fill="black" stroke="black" points="1966.41,-2533.38 1958.74,-2526.08 1960.18,-2536.57 1966.41,-2533.38"/>
</g>
<!-- MaybeAddPadding() -->
<g id="node98" class="node"><title>MaybeAddPadding()</title>
<ellipse fill="none" stroke="black" cx="1887" cy="-2393" rx="85.2138" ry="18"/>
<text text-anchor="middle" x="1887" y="-2389.3" font-family="Times,serif" font-size="14.00">MaybeAddPadding()</text>
</g>
<!-- FillPacketHeader(&amp;header)&#45;&gt;MaybeAddPadding() -->
<g id="edge126" class="edge"><title>FillPacketHeader(&amp;header)&#45;&gt;MaybeAddPadding()</title>
<path fill="none" stroke="black" d="M1940.43,-2489.84C1930.06,-2471.23 1913.38,-2441.32 1901.42,-2419.86"/>
<polygon fill="black" stroke="black" points="1904.38,-2417.98 1896.45,-2410.95 1898.26,-2421.39 1904.38,-2417.98"/>
</g>
<!-- framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_) -->
<g id="node99" class="node"><title>framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_)</title>
<ellipse fill="none" stroke="black" cx="1872" cy="-2264" rx="216.062" ry="26.7407"/>
<text text-anchor="middle" x="1872" y="-2267.8" font-family="Times,serif" font-size="14.00">framer_&#45;&gt;BuildDataPacket(header, queued_frames_,</text>
<text text-anchor="middle" x="1872" y="-2252.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;encrypted_buffer, packet_size_)</text>
</g>
<!-- MaybeAddPadding()&#45;&gt;framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_) -->
<g id="edge127" class="edge"><title>MaybeAddPadding()&#45;&gt;framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_)</title>
<path fill="none" stroke="black" d="M1884.98,-2374.87C1882.76,-2356.12 1879.15,-2325.49 1876.29,-2301.34"/>
<polygon fill="black" stroke="black" points="1879.73,-2300.62 1875.08,-2291.1 1872.78,-2301.44 1879.73,-2300.62"/>
</g>
<!-- encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer) -->
<g id="node100" class="node"><title>encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)</title>
<ellipse fill="none" stroke="black" cx="1868" cy="-2129" rx="303.023" ry="48.1667"/>
<text text-anchor="middle" x="1868" y="-2147.8" font-family="Times,serif" font-size="14.00">encrypted_length = framer_&#45;&gt;EncryptInPlace(</text>
<text text-anchor="middle" x="1868" y="-2132.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,</text>
<text text-anchor="middle" x="1868" y="-2117.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,</text>
<text text-anchor="middle" x="1868" y="-2102.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)</text>
</g>
<!-- framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_)&#45;&gt;encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer) -->
<g id="edge128" class="edge"><title>framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_)&#45;&gt;encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)</title>
<path fill="none" stroke="black" d="M1871.22,-2237.04C1870.79,-2222.82 1870.24,-2204.6 1869.72,-2187.25"/>
<polygon fill="black" stroke="black" points="1873.22,-2187.05 1869.42,-2177.16 1866.22,-2187.26 1873.22,-2187.05"/>
</g>
<!-- queued_frames_.clear() -->
<g id="node101" class="node"><title>queued_frames_.clear()</title>
<ellipse fill="none" stroke="black" cx="1906" cy="-1920" rx="94.338" ry="18"/>
<text text-anchor="middle" x="1906" y="-1916.3" font-family="Times,serif" font-size="14.00">queued_frames_.clear()</text>
</g>
<!-- encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)&#45;&gt;queued_frames_.clear() -->
<g id="edge129" class="edge"><title>encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)&#45;&gt;queued_frames_.clear()</title>
<path fill="none" stroke="black" d="M1876.67,-2080.77C1884.18,-2039.85 1894.79,-1982.08 1900.97,-1948.38"/>
<polygon fill="black" stroke="black" points="1904.45,-1948.81 1902.82,-1938.34 1897.57,-1947.54 1904.45,-1948.81"/>
</g>
<!-- packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length; -->
<g id="node102" class="node"><title>packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;</title>
<ellipse fill="none" stroke="black" cx="1929" cy="-1679" rx="200.228" ry="26.7407"/>
<text text-anchor="middle" x="1929" y="-1682.8" font-family="Times,serif" font-size="14.00">packet_.encrypted_buffer = encrypted_buffer;</text>
<text text-anchor="middle" x="1929" y="-1667.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;</text>
</g>
<!-- queued_frames_.clear()&#45;&gt;packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length; -->
<g id="edge130" class="edge"><title>queued_frames_.clear()&#45;&gt;packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;</title>
<path fill="none" stroke="black" d="M1907.65,-1901.81C1911.37,-1863.16 1920.47,-1768.69 1925.5,-1716.36"/>
<polygon fill="black" stroke="black" points="1929.01,-1716.47 1926.48,-1706.18 1922.04,-1715.8 1929.01,-1716.47"/>
</g>
<!-- packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;&#45;&gt;void QuicPacketCreator::SerializePacket -->
<g id="edge131" class="edge"><title>packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;&#45;&gt;void QuicPacketCreator::SerializePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1991.52,-1704.65C2068.73,-1739.69 2190,-1811.79 2190,-1919 2190,-2509 2190,-2509 2190,-2509 2190,-2575.77 2123.08,-2627.51 2077.47,-2655.03"/>
<polygon fill="black" stroke="black" points="2075.51,-2652.12 2068.66,-2660.2 2079.05,-2658.15 2075.51,-2652.12"/>
</g>
<!-- SerializedPacket packet(std::move(packet_)) -->
<g id="node104" class="node"><title>SerializedPacket packet(std::move(packet_))</title>
<ellipse fill="none" stroke="black" cx="2384" cy="-2393" rx="168.478" ry="18"/>
<text text-anchor="middle" x="2384" y="-2389.3" font-family="Times,serif" font-size="14.00">SerializedPacket packet(std::move(packet_))</text>
</g>
<!-- void QuicPacketCreator::OnSerializedPacket()&#45;&gt;SerializedPacket packet(std::move(packet_)) -->
<g id="edge133" class="edge"><title>void QuicPacketCreator::OnSerializedPacket()&#45;&gt;SerializedPacket packet(std::move(packet_))</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2395.87,-2489.84C2393.62,-2471.67 2390.04,-2442.72 2387.39,-2421.39"/>
<polygon fill="black" stroke="black" points="2390.85,-2420.82 2386.15,-2411.32 2383.9,-2421.68 2390.85,-2420.82"/>
</g>
<!-- ClearPacket() -->
<g id="node105" class="node"><title>ClearPacket()</title>
<ellipse fill="none" stroke="black" cx="2384" cy="-2264" rx="59.2173" ry="18"/>
<text text-anchor="middle" x="2384" y="-2260.3" font-family="Times,serif" font-size="14.00">ClearPacket()</text>
</g>
<!-- SerializedPacket packet(std::move(packet_))&#45;&gt;ClearPacket() -->
<g id="edge134" class="edge"><title>SerializedPacket packet(std::move(packet_))&#45;&gt;ClearPacket()</title>
<path fill="none" stroke="black" d="M2384,-2374.87C2384,-2353.76 2384,-2317.6 2384,-2292.56"/>
<polygon fill="black" stroke="black" points="2387.5,-2292.26 2384,-2282.26 2380.5,-2292.26 2387.5,-2292.26"/>
</g>
<!-- delegate_&#45;&gt;OnSerializedPacket(&amp;packet) -->
<g id="node106" class="node"><title>delegate_&#45;&gt;OnSerializedPacket(&amp;packet)</title>
<ellipse fill="none" stroke="black" cx="2384" cy="-2129" rx="157.404" ry="18"/>
<text text-anchor="middle" x="2384" y="-2125.3" font-family="Times,serif" font-size="14.00">delegate_&#45;&gt;OnSerializedPacket(&amp;packet)</text>
</g>
<!-- ClearPacket()&#45;&gt;delegate_&#45;&gt;OnSerializedPacket(&amp;packet) -->
<g id="edge135" class="edge"><title>ClearPacket()&#45;&gt;delegate_&#45;&gt;OnSerializedPacket(&amp;packet)</title>
<path fill="none" stroke="black" d="M2384,-2245.88C2384,-2223.44 2384,-2183.8 2384,-2157.21"/>
<polygon fill="black" stroke="black" points="2387.5,-2157.05 2384,-2147.05 2380.5,-2157.05 2387.5,-2157.05"/>
</g>
<!-- delegate_&#45;&gt;OnSerializedPacket(&amp;packet)&#45;&gt;void QuicPacketCreator::OnSerializedPacket() -->
<g id="edge136" class="edge"><title>delegate_&#45;&gt;OnSerializedPacket(&amp;packet)&#45;&gt;void QuicPacketCreator::OnSerializedPacket()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2404.26,-2146.9C2443.63,-2181.23 2529.38,-2263.65 2561,-2355 2573.65,-2391.54 2582.69,-2409.99 2561,-2442 2545.62,-2464.68 2520.93,-2479.45 2495.36,-2489.07"/>
<polygon fill="black" stroke="black" points="2494.19,-2485.77 2485.92,-2492.38 2496.51,-2492.37 2494.19,-2485.77"/>
</g>
<!-- void QuicConnection::OnSerializedPacket -->
<g id="node107" class="node"><title>void QuicConnection::OnSerializedPacket</title>
<ellipse fill="none" stroke="black" cx="2378" cy="-1920" rx="160.304" ry="18"/>
<text text-anchor="middle" x="2378" y="-1916.3" font-family="Times,serif" font-size="14.00">void QuicConnection::OnSerializedPacket</text>
</g>
<!-- delegate_&#45;&gt;OnSerializedPacket(&amp;packet)&#45;&gt;void QuicConnection::OnSerializedPacket -->
<g id="edge137" class="edge"><title>delegate_&#45;&gt;OnSerializedPacket(&amp;packet)&#45;&gt;void QuicConnection::OnSerializedPacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2383.21,-2100.59C2382.06,-2060.92 2379.94,-1987.95 2378.79,-1948.33"/>
<polygon fill="black" stroke="black" points="2379.71,-2100.81 2383.5,-2110.71 2386.71,-2100.61 2379.71,-2100.81"/>
<polygon fill="black" stroke="black" points="2382.28,-1947.99 2378.5,-1938.1 2375.29,-1948.2 2382.28,-1947.99"/>
</g>
<!-- SendOrQueuePacket(serialized_packet) -->
<g id="node108" class="node"><title>SendOrQueuePacket(serialized_packet)</title>
<ellipse fill="none" stroke="black" cx="2378" cy="-1679" rx="150.181" ry="18"/>
<text text-anchor="middle" x="2378" y="-1675.3" font-family="Times,serif" font-size="14.00">SendOrQueuePacket(serialized_packet)</text>
</g>
<!-- void QuicConnection::OnSerializedPacket&#45;&gt;SendOrQueuePacket(serialized_packet) -->
<g id="edge138" class="edge"><title>void QuicConnection::OnSerializedPacket&#45;&gt;SendOrQueuePacket(serialized_packet)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2374.3,-1901.81C2370.51,-1860.73 2370.25,-1756.58 2373.53,-1707.02"/>
<polygon fill="black" stroke="black" points="2377.02,-1707.27 2374.31,-1697.03 2370.04,-1706.73 2377.02,-1707.27"/>
</g>
<!-- SendOrQueuePacket(serialized_packet)&#45;&gt;void QuicConnection::OnSerializedPacket -->
<g id="edge139" class="edge"><title>SendOrQueuePacket(serialized_packet)&#45;&gt;void QuicConnection::OnSerializedPacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2381.69,-1697.03C2385.49,-1737.96 2385.75,-1842.09 2382.48,-1891.8"/>
<polygon fill="black" stroke="black" points="2378.99,-1891.57 2381.7,-1901.81 2385.97,-1892.11 2378.99,-1891.57"/>
</g>
<!-- void QuicConnection::SendOrQueuePacket -->
<g id="node110" class="node"><title>void QuicConnection::SendOrQueuePacket</title>
<ellipse fill="none" stroke="black" cx="426" cy="-1385" rx="164.153" ry="18"/>
<text text-anchor="middle" x="426" y="-1381.3" font-family="Times,serif" font-size="14.00">void QuicConnection::SendOrQueuePacket</text>
</g>
<!-- SendOrQueuePacket(serialized_packet)&#45;&gt;void QuicConnection::SendOrQueuePacket -->
<g id="edge140" class="edge"><title>SendOrQueuePacket(serialized_packet)&#45;&gt;void QuicConnection::SendOrQueuePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2345.39,-1655.48C2311.53,-1633.53 2256.19,-1601.54 2203,-1588 2030.57,-1544.09 766.785,-1617.14 602,-1550 531.461,-1521.26 472.101,-1450.23 443.794,-1411.76"/>
<polygon fill="black" stroke="black" points="2343.65,-1658.53 2353.93,-1661.1 2347.5,-1652.68 2343.65,-1658.53"/>
<polygon fill="black" stroke="black" points="446.286,-1409.23 437.595,-1403.17 440.61,-1413.33 446.286,-1409.23"/>
</g>
<!-- if (!queued_packets_.empty() || !WritePacket(packet)) -->
<g id="node109" class="node"><title>if (!queued_packets_.empty() || !WritePacket(packet))</title>
<polygon fill="none" stroke="black" points="303,-2411 16.8339,-2393 303,-2375 589.166,-2393 303,-2411"/>
<text text-anchor="middle" x="303" y="-2389.3" font-family="Times,serif" font-size="14.00">if (!queued_packets_.empty() || !WritePacket(packet))</text>
</g>
<!-- packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet) -->
<g id="node111" class="node"><title>packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)</title>
<ellipse fill="none" stroke="black" cx="204" cy="-2264" rx="187.251" ry="18"/>
<text text-anchor="middle" x="204" y="-2260.3" font-family="Times,serif" font-size="14.00">packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)</text>
</g>
<!-- if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet) -->
<g id="edge142" class="edge"><title>if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)</title>
<path fill="none" stroke="black" d="M290.26,-2375.66C273.369,-2353.99 243.396,-2315.54 223.609,-2290.15"/>
<polygon fill="black" stroke="black" points="226.231,-2287.83 217.323,-2282.09 220.71,-2292.13 226.231,-2287.83"/>
<text text-anchor="middle" x="265" y="-2325.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- ClearSerializedPacket(packet) -->
<g id="node114" class="node"><title>ClearSerializedPacket(packet)</title>
<ellipse fill="none" stroke="black" cx="304" cy="-1679" rx="116.484" ry="18"/>
<text text-anchor="middle" x="304" y="-1675.3" font-family="Times,serif" font-size="14.00">ClearSerializedPacket(packet)</text>
</g>
<!-- if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;ClearSerializedPacket(packet) -->
<g id="edge146" class="edge"><title>if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;ClearSerializedPacket(packet)</title>
<path fill="none" stroke="black" d="M330.716,-2376.54C352.856,-2362.73 382.912,-2340.48 400,-2313 411.557,-2294.41 411,-2286.89 411,-2265 411,-2265 411,-2265 411,-1919 411,-1869.22 414.408,-1854.25 396,-1808 380.09,-1768.02 349.02,-1728.87 327.413,-1704.61"/>
<polygon fill="black" stroke="black" points="329.796,-1702.02 320.484,-1696.97 324.612,-1706.73 329.796,-1702.02"/>
<text text-anchor="middle" x="416" y="-2125.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- bool QuicConnection::WritePacket(SerializedPacket* packet) -->
<g id="node115" class="node"><title>bool QuicConnection::WritePacket(SerializedPacket* packet)</title>
<ellipse fill="none" stroke="black" cx="947" cy="-2264" rx="229.145" ry="18"/>
<text text-anchor="middle" x="947" y="-2260.3" font-family="Times,serif" font-size="14.00">bool QuicConnection::WritePacket(SerializedPacket* packet)</text>
</g>
<!-- if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;bool QuicConnection::WritePacket(SerializedPacket* packet) -->
<g id="edge148" class="edge"><title>if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;bool QuicConnection::WritePacket(SerializedPacket* packet)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M378.627,-2377.09C497.751,-2353.59 728.651,-2308.06 856.437,-2282.86"/>
<polygon fill="black" stroke="black" points="377.727,-2373.7 368.593,-2379.06 379.081,-2380.56 377.727,-2373.7"/>
<polygon fill="black" stroke="black" points="857.454,-2286.23 866.588,-2280.86 856.099,-2279.36 857.454,-2286.23"/>
</g>
<!-- void QuicConnection::SendOrQueuePacket&#45;&gt;if (!queued_packets_.empty() || !WritePacket(packet)) -->
<g id="edge141" class="edge"><title>void QuicConnection::SendOrQueuePacket&#45;&gt;if (!queued_packets_.empty() || !WritePacket(packet))</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M427.394,-1403.1C430.935,-1448.08 440,-1573.45 440,-1678 440,-2265 440,-2265 440,-2265 440,-2316 388.308,-2352.26 348.428,-2372.65"/>
<polygon fill="black" stroke="black" points="346.774,-2369.57 339.354,-2377.13 349.871,-2375.84 346.774,-2369.57"/>
</g>
<!-- queued_packets_.push_back(*packet) -->
<g id="node112" class="node"><title>queued_packets_.push_back(*packet)</title>
<ellipse fill="none" stroke="black" cx="224" cy="-2129" rx="143.931" ry="18"/>
<text text-anchor="middle" x="224" y="-2125.3" font-family="Times,serif" font-size="14.00">queued_packets_.push_back(*packet)</text>
</g>
<!-- packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)&#45;&gt;queued_packets_.push_back(*packet) -->
<g id="edge143" class="edge"><title>packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)&#45;&gt;queued_packets_.push_back(*packet)</title>
<path fill="none" stroke="black" d="M206.574,-2245.88C209.949,-2223.44 215.91,-2183.8 219.908,-2157.21"/>
<polygon fill="black" stroke="black" points="223.41,-2157.46 221.436,-2147.05 216.488,-2156.42 223.41,-2157.46"/>
</g>
<!-- packet&#45;&gt;retransmittable_frames.clear() -->
<g id="node113" class="node"><title>packet&#45;&gt;retransmittable_frames.clear()</title>
<ellipse fill="none" stroke="black" cx="238" cy="-1920" rx="149.23" ry="18"/>
<text text-anchor="middle" x="238" y="-1916.3" font-family="Times,serif" font-size="14.00">packet&#45;&gt;retransmittable_frames.clear()</text>
</g>
<!-- queued_packets_.push_back(*packet)&#45;&gt;packet&#45;&gt;retransmittable_frames.clear() -->
<g id="edge144" class="edge"><title>queued_packets_.push_back(*packet)&#45;&gt;packet&#45;&gt;retransmittable_frames.clear()</title>
<path fill="none" stroke="black" d="M225.17,-2110.71C227.605,-2074.7 233.237,-1991.43 236.162,-1948.18"/>
<polygon fill="black" stroke="black" points="239.661,-1948.31 236.844,-1938.1 232.677,-1947.84 239.661,-1948.31"/>
</g>
<!-- packet&#45;&gt;retransmittable_frames.clear()&#45;&gt;ClearSerializedPacket(packet) -->
<g id="edge145" class="edge"><title>packet&#45;&gt;retransmittable_frames.clear()&#45;&gt;ClearSerializedPacket(packet)</title>
<path fill="none" stroke="black" d="M242.747,-1901.81C254.115,-1860.64 282.973,-1756.14 296.626,-1706.7"/>
<polygon fill="black" stroke="black" points="300.008,-1707.6 299.296,-1697.03 293.261,-1705.74 300.008,-1707.6"/>
</g>
<!-- ClearSerializedPacket(packet)&#45;&gt;void QuicConnection::SendOrQueuePacket -->
<g id="edge147" class="edge"><title>ClearSerializedPacket(packet)&#45;&gt;void QuicConnection::SendOrQueuePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M311.266,-1660.61C331.779,-1611.51 390.232,-1471.61 414.852,-1412.68"/>
<polygon fill="black" stroke="black" points="418.146,-1413.88 418.772,-1403.3 411.687,-1411.18 418.146,-1413.88"/>
</g>
<!--  &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="node116" class="node"><title> &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="947" cy="-2129" rx="157.527" ry="48.1667"/>
<text text-anchor="middle" x="947" y="-2147.8" font-family="Times,serif" font-size="14.00"> &#160;if (ShouldDiscardPacket(*packet)) {</text>
<text text-anchor="middle" x="947" y="-2132.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;++stats_.packets_discarded;</text>
<text text-anchor="middle" x="947" y="-2117.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="947" y="-2102.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- bool QuicConnection::WritePacket(SerializedPacket* packet)&#45;&gt; &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="edge149" class="edge"><title>bool QuicConnection::WritePacket(SerializedPacket* packet)&#45;&gt; &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M947,-2245.88C947,-2231.05 947,-2208.71 947,-2187.59"/>
<polygon fill="black" stroke="black" points="950.5,-2187.36 947,-2177.36 943.5,-2187.36 950.5,-2187.36"/>
</g>
<!--  &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="node117" class="node"><title> &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="947" cy="-1920" rx="325.464" ry="48.1667"/>
<text text-anchor="middle" x="947" y="-1938.8" font-family="Times,serif" font-size="14.00"> &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {</text>
<text text-anchor="middle" x="947" y="-1923.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);</text>
<text text-anchor="middle" x="947" y="-1908.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="947" y="-1893.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!--  &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt; &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="edge150" class="edge"><title> &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt; &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M947,-2080.77C947,-2050.41 947,-2010.76 947,-1978.56"/>
<polygon fill="black" stroke="black" points="950.5,-1978.39 947,-1968.39 943.5,-1978.39 950.5,-1978.39"/>
</g>
<!--  &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node118" class="node"><title> &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="947" cy="-1679" rx="275.097" ry="48.1667"/>
<text text-anchor="middle" x="947" y="-1697.8" font-family="Times,serif" font-size="14.00"> &#160;const bool is_termination_packet = IsTerminationPacket(*packet);</text>
<text text-anchor="middle" x="947" y="-1682.8" font-family="Times,serif" font-size="14.00"> &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {</text>
<text text-anchor="middle" x="947" y="-1667.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="947" y="-1652.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt; &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge151" class="edge"><title> &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt; &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M947,-1871.78C947,-1833.15 947,-1778.39 947,-1737.26"/>
<polygon fill="black" stroke="black" points="950.5,-1737.12 947,-1727.12 943.5,-1737.12 950.5,-1737.12"/>
</g>
<!--  &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;} -->
<g id="node119" class="node"><title> &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="947" cy="-1385" rx="333.071" ry="164.512"/>
<text text-anchor="middle" x="947" y="-1486.3" font-family="Times,serif" font-size="14.00"> &#160;// Measure the RTT from before the write begins to avoid underestimating the</text>
<text text-anchor="middle" x="947" y="-1471.3" font-family="Times,serif" font-size="14.00"> &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out</text>
<text text-anchor="middle" x="947" y="-1456.3" font-family="Times,serif" font-size="14.00"> &#160;// during the WritePacket below.</text>
<text text-anchor="middle" x="947" y="-1441.3" font-family="Times,serif" font-size="14.00"> &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();</text>
<text text-anchor="middle" x="947" y="-1426.3" font-family="Times,serif" font-size="14.00"> &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {</text>
<text text-anchor="middle" x="947" y="-1411.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();</text>
<text text-anchor="middle" x="947" y="-1396.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;</text>
<text text-anchor="middle" x="947" y="-1381.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;QuicTime now = packet_send_time;</text>
<text text-anchor="middle" x="947" y="-1366.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (next_release_time &gt; now) {</text>
<text text-anchor="middle" x="947" y="-1351.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;</text>
<text text-anchor="middle" x="947" y="-1336.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.</text>
<text text-anchor="middle" x="947" y="-1321.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;</text>
<text text-anchor="middle" x="947" y="-1306.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="947" y="-1291.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);</text>
<text text-anchor="middle" x="947" y="-1276.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;} -->
<g id="edge152" class="edge"><title> &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;}</title>
<path fill="none" stroke="black" d="M947,-1630.76C947,-1610.65 947,-1585.84 947,-1559.8"/>
<polygon fill="black" stroke="black" points="950.5,-1559.76 947,-1549.76 943.5,-1559.76 950.5,-1559.76"/>
</g>
<!--  WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_); -->
<g id="node120" class="node"><title> WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);</title>
<ellipse fill="none" stroke="black" cx="920" cy="-1120" rx="285.507" ry="37.4533"/>
<text text-anchor="middle" x="920" y="-1131.3" font-family="Times,serif" font-size="14.00"> WriteResult result = writer_&#45;&gt;WritePacket(</text>
<text text-anchor="middle" x="920" y="-1116.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),</text>
<text text-anchor="middle" x="920" y="-1101.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);</text>
</g>
<!--  &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;}&#45;&gt; WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_); -->
<g id="edge153" class="edge"><title> &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;}&#45;&gt; WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);</title>
<path fill="none" stroke="black" d="M930.208,-1220.43C928.256,-1201.42 926.402,-1183.36 924.823,-1167.98"/>
<polygon fill="black" stroke="black" points="928.279,-1167.37 923.776,-1157.78 921.315,-1168.08 928.279,-1167.37"/>
</g>
<!--  &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;} -->
<g id="node121" class="node"><title> &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="928" cy="-876" rx="301.341" ry="143.585"/>
<text text-anchor="middle" x="928" y="-962.3" font-family="Times,serif" font-size="14.00"> &#160;if (result.status == WRITE_STATUS_BLOCKED) {</text>
<text text-anchor="middle" x="928" y="-947.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue</text>
<text text-anchor="middle" x="928" y="-932.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// trying to write when it will not be able to.</text>
<text text-anchor="middle" x="928" y="-917.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());</text>
<text text-anchor="middle" x="928" y="-902.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();</text>
<text text-anchor="middle" x="928" y="-887.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// If the socket buffers the data, then the packet should not</text>
<text text-anchor="middle" x="928" y="-872.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary</text>
<text text-anchor="middle" x="928" y="-857.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite</text>
<text text-anchor="middle" x="928" y="-842.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.</text>
<text text-anchor="middle" x="928" y="-827.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {</text>
<text text-anchor="middle" x="928" y="-812.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="928" y="-797.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="928" y="-782.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);&#45;&gt; &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;} -->
<g id="edge154" class="edge"><title> WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);&#45;&gt; &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;}</title>
<path fill="none" stroke="black" d="M921.206,-1082.51C921.697,-1067.67 922.3,-1049.44 922.941,-1030.02"/>
<polygon fill="black" stroke="black" points="926.448,-1029.88 923.28,-1019.77 919.452,-1029.65 926.448,-1029.88"/>
</g>
<!--  &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet)); -->
<g id="node122" class="node"><title> &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));</title>
<ellipse fill="none" stroke="black" cx="934" cy="-568" rx="301.402" ry="37.4533"/>
<text text-anchor="middle" x="934" y="-579.3" font-family="Times,serif" font-size="14.00"> &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(</text>
<text text-anchor="middle" x="934" y="-564.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,</text>
<text text-anchor="middle" x="934" y="-549.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));</text>
</g>
<!--  &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;}&#45;&gt; &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet)); -->
<g id="edge155" class="edge"><title> &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;}&#45;&gt; &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));</title>
<path fill="none" stroke="black" d="M930.798,-732.303C931.621,-690.307 932.465,-647.271 933.08,-615.928"/>
<polygon fill="black" stroke="black" points="936.582,-615.833 933.279,-605.766 929.584,-615.695 936.582,-615.833"/>
</g>
<!--  &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;} -->
<g id="node123" class="node"><title> &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="936" cy="-356" rx="280.582" ry="37.4533"/>
<text text-anchor="middle" x="936" y="-367.3" font-family="Times,serif" font-size="14.00"> &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {</text>
<text text-anchor="middle" x="936" y="-352.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;SetRetransmissionAlarm();</text>
<text text-anchor="middle" x="936" y="-337.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));&#45;&gt; &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;} -->
<g id="edge156" class="edge"><title> &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));&#45;&gt; &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;}</title>
<path fill="none" stroke="black" d="M934.348,-530.421C934.683,-495.296 935.19,-442.079 935.554,-403.865"/>
<polygon fill="black" stroke="black" points="939.057,-403.545 935.652,-393.512 932.057,-403.478 939.057,-403.545"/>
</g>
<!--  &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length())); -->
<g id="node124" class="node"><title> &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));</title>
<ellipse fill="none" stroke="black" cx="938" cy="-232" rx="323.283" ry="37.4533"/>
<text text-anchor="middle" x="938" y="-243.3" font-family="Times,serif" font-size="14.00"> &#160;packet_generator_.UpdatePacketNumberLength(</text>
<text text-anchor="middle" x="938" y="-228.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),</text>
<text text-anchor="middle" x="938" y="-213.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));</text>
</g>
<!--  &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;}&#45;&gt; &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length())); -->
<g id="edge157" class="edge"><title> &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;}&#45;&gt; &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));</title>
<path fill="none" stroke="black" d="M936.6,-318.396C936.8,-306.212 937.025,-292.473 937.235,-279.635"/>
<polygon fill="black" stroke="black" points="940.736,-279.634 937.4,-269.578 933.737,-279.519 940.736,-279.634"/>
</g>
<!--  &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;} -->
<g id="node125" class="node"><title> &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1010" cy="-86" rx="265.248" ry="69.0935"/>
<text text-anchor="middle" x="1010" y="-119.8" font-family="Times,serif" font-size="14.00"> &#160;stats_.bytes_sent += result.bytes_written;</text>
<text text-anchor="middle" x="1010" y="-104.8" font-family="Times,serif" font-size="14.00"> &#160;++stats_.packets_sent;</text>
<text text-anchor="middle" x="1010" y="-89.8" font-family="Times,serif" font-size="14.00"> &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {</text>
<text text-anchor="middle" x="1010" y="-74.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;</text>
<text text-anchor="middle" x="1010" y="-59.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;++stats_.packets_retransmitted;</text>
<text text-anchor="middle" x="1010" y="-44.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));&#45;&gt; &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;} -->
<g id="edge158" class="edge"><title> &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));&#45;&gt; &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;}</title>
<path fill="none" stroke="black" d="M956.355,-194.29C960.995,-185.01 966.155,-174.69 971.389,-164.222"/>
<polygon fill="black" stroke="black" points="974.655,-165.517 975.996,-155.007 968.394,-162.386 974.655,-165.517"/>
</g>
<!--  &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;}&#45;&gt;bool QuicConnection::WritePacket(SerializedPacket* packet) -->
<g id="edge159" class="edge"><title> &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;}&#45;&gt;bool QuicConnection::WritePacket(SerializedPacket* packet)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1208.43,-132.192C1232.63,-145.697 1254.31,-163.232 1270,-186 1325.88,-267.069 1254.98,-973.544 1254,-1072 1253.57,-1114.66 1241.55,-1127.19 1254,-1168 1262.13,-1194.65 1280.49,-1193.47 1289,-1220 1336.29,-1367.33 1299,-1413.27 1299,-1568 1299,-2130 1299,-2130 1299,-2130 1299,-2184.27 1150.74,-2224.12 1046.66,-2245.4"/>
<polygon fill="black" stroke="black" points="1045.85,-2242 1036.74,-2247.4 1047.23,-2248.86 1045.85,-2242"/>
<text text-anchor="middle" x="1283" y="-1116.3" font-family="Times,serif" font-size="14.00">return true</text>
</g>
</g>
</svg>
