<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.30.1 (20150306.0020)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="11255pt" height="6558pt"
 viewBox="0.00 0.00 11255.00 6558.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 6554)">
<title>%3</title>
<polygon fill="white" stroke="white" points="-4,5 -4,-6554 11252,-6554 11252,5 -4,5"/>
<g id="clust1" class="cluster"><title>cluster_ngx_http_quic_response_body_available</title>
<polygon fill="none" stroke="black" points="9631,-6020 9631,-6336 10551,-6336 10551,-6020 9631,-6020"/>
</g>
<g id="clust2" class="cluster"><title>cluster_stream_OnNginxBodyAvailable</title>
<polygon fill="none" stroke="black" points="10559,-5611 10559,-6072 11239,-6072 11239,-5611 10559,-5611"/>
</g>
<g id="clust3" class="cluster"><title>cluster_QuicStream_WriteOrBufferData</title>
<polygon fill="none" stroke="black" points="8511,-5431 8511,-6248 9235,-6248 9235,-5431 8511,-5431"/>
</g>
<g id="clust4" class="cluster"><title>cluster_QuicStreamSendBuffer_SaveStreamData</title>
<polygon fill="none" stroke="black" points="9243,-5528 9243,-6000 9807,-6000 9807,-5528 9243,-5528"/>
<text text-anchor="middle" x="9525" y="-5984.8" font-family="Times,serif" font-size="14.00">void QuicStreamSendBuffer::SaveStreamData</text>
<text text-anchor="middle" x="9525" y="-5969.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;用于将nginx body数据切分成iovec，用于stream发送</text>
</g>
<g id="clust5" class="cluster"><title>cluster_QuicStream_WriteBufferedData</title>
<polygon fill="none" stroke="black" points="7515,-4288 7515,-5854 8503,-5854 8503,-4288 7515,-4288"/>
</g>
<g id="clust6" class="cluster"><title>cluster_QuicStream_WritevDataInner</title>
<polygon fill="none" stroke="black" points="6915,-4782 6915,-5060 7507,-5060 7507,-4782 6915,-4782"/>
</g>
<g id="clust7" class="cluster"><title>cluster_QuicSession_WritevData</title>
<polygon fill="none" stroke="black" points="6443,-3558 6443,-4563 7470,-4563 7470,-3558 6443,-3558"/>
<text text-anchor="middle" x="6956.5" y="-4547.8" font-family="Times,serif" font-size="14.00">QuicSession::WritevData</text>
</g>
<g id="clust8" class="cluster"><title>cluster_QuicConnection_SendStreamData</title>
<polygon fill="none" stroke="black" points="5676,-3558 5676,-4563 6435,-4563 6435,-3558 5676,-3558"/>
<text text-anchor="middle" x="6055.5" y="-4547.8" font-family="Times,serif" font-size="14.00">QuicConnection::SendStreamData</text>
</g>
<g id="clust9" class="cluster"><title>cluster_QuicPacketGenerator_ConsumeData</title>
<polygon fill="none" stroke="black" points="4162,-3096 4162,-4615 5176,-4615 5176,-3096 4162,-3096"/>
<text text-anchor="middle" x="4669" y="-4599.8" font-family="Times,serif" font-size="14.00">QuicPacketGenerator::ConsumeData</text>
</g>
<g id="clust10" class="cluster"><title>cluster_</title>
<polygon fill="none" stroke="black" points="3474,-3360 3474,-3997 4154,-3997 4154,-3360 3474,-3360"/>
<text text-anchor="middle" x="3814" y="-3981.8" font-family="Times,serif" font-size="14.00">QuicPacketGenerator::ConsumeDataFastPath(</text>
<text text-anchor="middle" x="3814" y="-3966.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamId id, </text>
<text text-anchor="middle" x="3814" y="-3951.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;size_t write_length,</text>
<text text-anchor="middle" x="3814" y="-3936.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;QuicStreamOffset offset,</text>
<text text-anchor="middle" x="3814" y="-3921.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;bool fin,</text>
<text text-anchor="middle" x="3814" y="-3906.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;size_t total_bytes_consumed)</text>
<text text-anchor="middle" x="3814" y="-3891.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;其中write_length表示可以送的最大数据，受限于发送窗口. </text>
<text text-anchor="middle" x="3814" y="-3876.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;offset表示stream中的偏移</text>
<text text-anchor="middle" x="3814" y="-3861.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;</text>
</g>
<g id="clust11" class="cluster"><title>cluster_QuicConnection_ShouldGeneratePacket</title>
<polygon fill="none" stroke="black" points="3053,-3558 3053,-4126 3423,-4126 3423,-3558 3053,-3558"/>
<text text-anchor="middle" x="3238" y="-4110.8" font-family="Times,serif" font-size="14.00">bool QuicConnection::ShouldGeneratePacket</text>
</g>
<g id="clust12" class="cluster"><title>cluster_QuicConnection_CanWrite</title>
<polygon fill="none" stroke="black" points="2718,-1512 2718,-3444 3466,-3444 3466,-1512 2718,-1512"/>
<text text-anchor="middle" x="3092" y="-3428.8" font-family="Times,serif" font-size="14.00">bool QuicConnection::CanWrite</text>
</g>
<g id="clust13" class="cluster"><title>cluster_QuicSentPacketManager_TimeUntilSend</title>
<polygon fill="none" stroke="black" points="3485,-648 3485,-1975 4469,-1975 4469,-648 3485,-648"/>
<text text-anchor="middle" x="3977" y="-1959.8" font-family="Times,serif" font-size="14.00">QuicTime::Delta PacingSender::TimeUntilSend</text>
</g>
<g id="clust14" class="cluster"><title>cluster_TcpCubicSenderBytes_CanSend</title>
<polygon fill="none" stroke="black" points="2907,-18 2907,-941 3477,-941 3477,-18 2907,-18"/>
</g>
<g id="clust15" class="cluster"><title>cluster_QuicPacketCreator_ConsumeData</title>
<polygon fill="none" stroke="black" points="5184,-3740 5184,-3939 5668,-3939 5668,-3740 5184,-3740"/>
<text text-anchor="middle" x="5426" y="-3923.8" font-family="Times,serif" font-size="14.00">bool QuicPacketCreator::ConsumeData</text>
</g>
<g id="clust16" class="cluster"><title>cluster_QuicPacketCreator_Flush</title>
<polygon fill="none" stroke="black" points="2359,-3558 2359,-4563 3023,-4563 3023,-3558 2359,-3558"/>
<text text-anchor="middle" x="2691" y="-4547.8" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::Flush()</text>
</g>
<g id="clust17" class="cluster"><title>cluster_QuicPacketCreator_SerializePacket</title>
<polygon fill="none" stroke="black" points="1709,-2646 1709,-3877 2351,-3877 2351,-2646 1709,-2646"/>
<text text-anchor="middle" x="2030" y="-3861.8" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::SerializePacket</text>
</g>
<g id="clust18" class="cluster"><title>cluster_QuicPacketCreator_OnSerializedPacket</title>
<polygon fill="none" stroke="black" points="8,-3105 8,-3610 382,-3610 382,-3105 8,-3105"/>
</g>
<g id="clust19" class="cluster"><title>cluster_QuicConnection_OnSerializedPacket</title>
<polygon fill="none" stroke="black" points="44,-2655 44,-2971 382,-2971 382,-2655 44,-2655"/>
<text text-anchor="middle" x="213" y="-2955.8" font-family="Times,serif" font-size="14.00">void QuicConnection::OnSerializedPacket</text>
</g>
<g id="clust20" class="cluster"><title>cluster_QuicConnection_SendOrQueuePacket</title>
<polygon fill="none" stroke="black" points="390,-2361 390,-3444 980,-3444 980,-2361 390,-2361"/>
<text text-anchor="middle" x="685" y="-3428.8" font-family="Times,serif" font-size="14.00">void QuicConnection::SendOrQueuePacket</text>
</g>
<g id="clust21" class="cluster"><title>cluster_QuicConnection_WritePacket</title>
<polygon fill="none" stroke="black" points="988,-1072 988,-3315 1690,-3315 1690,-1072 988,-1072"/>
<text text-anchor="middle" x="1339" y="-3299.8" font-family="Times,serif" font-size="14.00">bool QuicConnection::WritePacket(SerializedPacket* packet)</text>
</g>
<g id="clust22" class="cluster"><title>cluster_QuicPerConnectionPacketWriter_WritePacket</title>
<polygon fill="none" stroke="black" points="1698,-1597 1698,-1952 2248,-1952 2248,-1597 1698,-1597"/>
</g>
<g id="clust23" class="cluster"><title>cluster_QuicDefaultPacketWriter_WritePacket</title>
<polygon fill="none" stroke="black" points="1698,-1104 1698,-1460 2201,-1460 2201,-1104 1698,-1104"/>
</g>
<g id="clust24" class="cluster"><title>cluster_QuicSocketUtils_WritePacket</title>
<polygon fill="lightgrey" stroke="lightgrey" points="2209,-8 2209,-1214 2899,-1214 2899,-8 2209,-8"/>
<text text-anchor="middle" x="2554" y="-1198.8" font-family="Times,serif" font-size="14.00">WriteResult QuicSocketUtils::WritePacket</text>
<text text-anchor="middle" x="2554" y="-1183.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;最底层的发送函数</text>
</g>
<!-- ngx_http_quic_send_chain入口函数 -->
<g id="node1" class="node"><title>ngx_http_quic_send_chain入口函数</title>
<ellipse fill="red" stroke="black" cx="9643" cy="-6532" rx="138.157" ry="18"/>
<text text-anchor="middle" x="9643" y="-6528.3" font-family="Times,serif" font-size="14.00">ngx_http_quic_send_chain入口函数</text>
</g>
<!-- while (in)循环 -->
<g id="node4" class="node"><title>while (in)循环</title>
<ellipse fill="none" stroke="black" cx="9708" cy="-6458" rx="61.6163" ry="18"/>
<text text-anchor="middle" x="9708" y="-6454.3" font-family="Times,serif" font-size="14.00">while (in)循环</text>
</g>
<!-- ngx_http_quic_send_chain入口函数&#45;&gt;while (in)循环 -->
<g id="edge1" class="edge"><title>ngx_http_quic_send_chain入口函数&#45;&gt;while (in)循环</title>
<path fill="none" stroke="red" stroke-dasharray="5,2" d="M9658.4,-6513.94C9666.58,-6504.88 9676.77,-6493.59 9685.79,-6483.6"/>
<polygon fill="red" stroke="red" points="9688.6,-6485.71 9692.71,-6475.94 9683.41,-6481.02 9688.6,-6485.71"/>
</g>
<!-- if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf) -->
<g id="node2" class="node"><title>if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)</title>
<polygon fill="none" stroke="black" points="9173,-6328 8724.68,-6310 9173,-6292 9621.32,-6310 9173,-6328"/>
<text text-anchor="middle" x="9173" y="-6306.3" font-family="Times,serif" font-size="14.00">if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)</text>
</g>
<!-- last=1 -->
<g id="node6" class="node"><title>last=1</title>
<ellipse fill="none" stroke="black" cx="9297" cy="-6222" rx="32.2457" ry="18"/>
<text text-anchor="middle" x="9297" y="-6218.3" font-family="Times,serif" font-size="14.00">last=1</text>
</g>
<!-- if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)&#45;&gt;last=1 -->
<g id="edge4" class="edge"><title>if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)&#45;&gt;last=1</title>
<path fill="none" stroke="black" d="M9196.32,-6292.82C9217.01,-6278.48 9247.26,-6257.5 9269.2,-6242.28"/>
<polygon fill="black" stroke="black" points="9271.23,-6245.13 9277.45,-6236.56 9267.24,-6239.38 9271.23,-6245.13"/>
<text text-anchor="middle" x="9252" y="-6262.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- if (in&#45;&gt;buf&#45;&gt;in_file) -->
<g id="node3" class="node"><title>if (in&#45;&gt;buf&#45;&gt;in_file)</title>
<polygon fill="none" stroke="black" points="9433,-6152 9316.4,-6134 9433,-6116 9549.6,-6134 9433,-6152"/>
<text text-anchor="middle" x="9433" y="-6130.3" font-family="Times,serif" font-size="14.00">if (in&#45;&gt;buf&#45;&gt;in_file)</text>
</g>
<!-- if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file) -->
<g id="edge5" class="edge"><title>if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file)</title>
<path fill="none" stroke="black" d="M9234.66,-6294.45C9267.34,-6284.78 9307.02,-6269.79 9338,-6248 9372.17,-6223.97 9401.34,-6184.74 9418.02,-6159.4"/>
<polygon fill="black" stroke="black" points="9421.12,-6161.05 9423.59,-6150.74 9415.24,-6157.26 9421.12,-6161.05"/>
<text text-anchor="middle" x="9389" y="-6218.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log) -->
<g id="node7" class="node"><title>file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)</title>
<ellipse fill="none" stroke="black" cx="9433" cy="-6046" rx="190.15" ry="18"/>
<text text-anchor="middle" x="9433" y="-6042.3" font-family="Times,serif" font-size="14.00">file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)</text>
</g>
<!-- if (in&#45;&gt;buf&#45;&gt;in_file)&#45;&gt;file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log) -->
<g id="edge7" class="edge"><title>if (in&#45;&gt;buf&#45;&gt;in_file)&#45;&gt;file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)</title>
<path fill="none" stroke="black" d="M9433,-6115.6C9433,-6103.75 9433,-6087.82 9433,-6074.29"/>
<polygon fill="black" stroke="black" points="9436.5,-6074.08 9433,-6064.08 9429.5,-6074.08 9436.5,-6074.08"/>
<text text-anchor="middle" x="9438" y="-6086.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id) -->
<g id="node9" class="node"><title>int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</title>
<ellipse fill="none" stroke="black" cx="10091" cy="-6310" rx="451.565" ry="18"/>
<text text-anchor="middle" x="10091" y="-6306.3" font-family="Times,serif" font-size="14.00">int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</text>
</g>
<!-- if (in&#45;&gt;buf&#45;&gt;in_file)&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id) -->
<g id="edge12" class="edge"><title>if (in&#45;&gt;buf&#45;&gt;in_file)&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</title>
<path fill="none" stroke="black" d="M9432.4,-6152.25C9432.55,-6177.48 9436.92,-6224.06 9465,-6248 9491.48,-6270.57 9646.74,-6285.79 9796,-6295.38"/>
<polygon fill="black" stroke="black" points="9796.07,-6298.89 9806.28,-6296.03 9796.52,-6291.9 9796.07,-6298.89"/>
<text text-anchor="middle" x="9470" y="-6218.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- buf_len = ngx_buf_size(in&#45;&gt;buf) -->
<g id="node5" class="node"><title>buf_len = ngx_buf_size(in&#45;&gt;buf)</title>
<ellipse fill="none" stroke="black" cx="9744" cy="-6384" rx="128.058" ry="18"/>
<text text-anchor="middle" x="9744" y="-6380.3" font-family="Times,serif" font-size="14.00">buf_len = ngx_buf_size(in&#45;&gt;buf)</text>
</g>
<!-- while (in)循环&#45;&gt;buf_len = ngx_buf_size(in&#45;&gt;buf) -->
<g id="edge2" class="edge"><title>while (in)循环&#45;&gt;buf_len = ngx_buf_size(in&#45;&gt;buf)</title>
<path fill="none" stroke="red" stroke-dasharray="5,2" d="M9716.53,-6439.94C9720.77,-6431.45 9726,-6421.01 9730.74,-6411.51"/>
<polygon fill="red" stroke="red" points="9733.94,-6412.95 9735.28,-6402.44 9727.68,-6409.82 9733.94,-6412.95"/>
</g>
<!-- return in -->
<g id="node12" class="node"><title>return in</title>
<ellipse fill="none" stroke="black" cx="9557" cy="-6384" rx="40.4202" ry="18"/>
<text text-anchor="middle" x="9557" y="-6380.3" font-family="Times,serif" font-size="14.00">return in</text>
</g>
<!-- while (in)循环&#45;&gt;return in -->
<g id="edge15" class="edge"><title>while (in)循环&#45;&gt;return in</title>
<path fill="none" stroke="red" d="M9677.08,-6442.26C9652.75,-6430.65 9618.8,-6414.47 9593.2,-6402.26"/>
<polygon fill="red" stroke="red" points="9594.37,-6398.94 9583.84,-6397.8 9591.36,-6405.26 9594.37,-6398.94"/>
</g>
<!-- buf_len = ngx_buf_size(in&#45;&gt;buf)&#45;&gt;if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf) -->
<g id="edge3" class="edge"><title>buf_len = ngx_buf_size(in&#45;&gt;buf)&#45;&gt;if ((buf_len == 0 || in&#45;&gt;buf&#45;&gt;in_file || in&#45;&gt;buf&#45;&gt;last_in_chain) &amp;&amp; in&#45;&gt;buf&#45;&gt;last_buf)</title>
<path fill="none" stroke="red" d="M9652.26,-6371.43C9552.55,-6358.86 9393.13,-6338.76 9285.83,-6325.23"/>
<polygon fill="red" stroke="red" points="9285.97,-6321.72 9275.61,-6323.94 9285.09,-6328.66 9285.97,-6321.72"/>
</g>
<!-- last=1&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file) -->
<g id="edge6" class="edge"><title>last=1&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file)</title>
<path fill="none" stroke="black" d="M9313.98,-6206.4C9326.93,-6195.64 9345.46,-6181.01 9363,-6170 9373.15,-6163.63 9384.61,-6157.49 9395.27,-6152.19"/>
<polygon fill="black" stroke="black" points="9396.93,-6155.28 9404.39,-6147.76 9393.86,-6148.98 9396.93,-6155.28"/>
<text text-anchor="middle" x="9368" y="-6174.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len) -->
<g id="node8" class="node"><title>n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)</title>
<ellipse fill="none" stroke="black" cx="9995" cy="-5936" rx="172.327" ry="18"/>
<text text-anchor="middle" x="9995" y="-5932.3" font-family="Times,serif" font-size="14.00">n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)</text>
</g>
<!-- file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)&#45;&gt;n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len) -->
<g id="edge8" class="edge"><title>file_buf = ngx_alloc(buf_len, r&#45;&gt;connection&#45;&gt;log)&#45;&gt;n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)</title>
<path fill="none" stroke="black" d="M9538.67,-6031C9567.32,-6027.3 9598.34,-6023.4 9627,-6020 9708.69,-6010.3 9730.71,-6017.88 9811,-6000 9857.59,-5989.63 9908.84,-5971.5 9945.39,-5957.34"/>
<polygon fill="black" stroke="black" points="9946.78,-5960.56 9954.82,-5953.65 9944.23,-5954.04 9946.78,-5960.56"/>
</g>
<!-- n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id) -->
<g id="edge9" class="edge"><title>n = read(in&#45;&gt;buf&#45;&gt;file&#45;&gt;fd, file_buf, buf_len)&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</title>
<path fill="none" stroke="black" d="M9998.61,-5954.12C10002.8,-5975.34 10009,-6012.67 10009,-6045 10009,-6223 10009,-6223 10009,-6223 10009,-6249.65 10029.9,-6271.31 10050.6,-6286.22"/>
<polygon fill="black" stroke="black" points="10048.8,-6289.26 10059.1,-6292 10052.8,-6283.48 10048.8,-6289.26"/>
</g>
<!-- free(file_buf) -->
<g id="node10" class="node"><title>free(file_buf)</title>
<ellipse fill="none" stroke="black" cx="9542" cy="-6222" rx="57.2688" ry="18"/>
<text text-anchor="middle" x="9542" y="-6218.3" font-family="Times,serif" font-size="14.00">free(file_buf)</text>
</g>
<!-- int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;free(file_buf) -->
<g id="edge10" class="edge"><title>int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;free(file_buf)</title>
<path fill="none" stroke="black" d="M9922.96,-6293.27C9834.36,-6283.38 9724.18,-6268.55 9627,-6248 9614.89,-6245.44 9601.99,-6242.02 9590,-6238.53"/>
<polygon fill="black" stroke="black" points="9590.77,-6235.11 9580.18,-6235.6 9588.77,-6241.81 9590.77,-6235.11"/>
</g>
<!-- in = in&#45;&gt;next -->
<g id="node11" class="node"><title>in = in&#45;&gt;next</title>
<ellipse fill="none" stroke="black" cx="9907" cy="-6532" rx="57.2688" ry="18"/>
<text text-anchor="middle" x="9907" y="-6528.3" font-family="Times,serif" font-size="14.00">in = in&#45;&gt;next</text>
</g>
<!-- int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;in = in&#45;&gt;next -->
<g id="edge13" class="edge"><title>int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;in = in&#45;&gt;next</title>
<path fill="none" stroke="red" d="M10076.8,-6328.03C10044.3,-6366.8 9964.91,-6461.76 9927.34,-6506.68"/>
<polygon fill="red" stroke="red" points="9924.56,-6504.55 9920.83,-6514.46 9929.93,-6509.04 9924.56,-6504.55"/>
</g>
<!-- string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len) -->
<g id="node13" class="node"><title>string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)</title>
<ellipse fill="none" stroke="black" cx="10304" cy="-6222" rx="238.293" ry="18"/>
<text text-anchor="middle" x="10304" y="-6218.3" font-family="Times,serif" font-size="14.00">string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)</text>
</g>
<!-- int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len) -->
<g id="edge17" class="edge"><title>int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)&#45;&gt;string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10133.1,-6292.01C10167.5,-6278.12 10216.2,-6258.44 10252.9,-6243.65"/>
<polygon fill="black" stroke="black" points="10254.4,-6246.8 10262.4,-6239.81 10251.8,-6240.31 10254.4,-6246.8"/>
</g>
<!-- free(file_buf)&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file) -->
<g id="edge11" class="edge"><title>free(file_buf)&#45;&gt;if (in&#45;&gt;buf&#45;&gt;in_file)</title>
<path fill="none" stroke="black" d="M9521.75,-6205.03C9504.16,-6191.15 9478.57,-6170.95 9459.38,-6155.81"/>
<polygon fill="black" stroke="black" points="9461.34,-6152.9 9451.32,-6149.46 9457.01,-6158.4 9461.34,-6152.9"/>
</g>
<!-- in = in&#45;&gt;next&#45;&gt;while (in)循环 -->
<g id="edge14" class="edge"><title>in = in&#45;&gt;next&#45;&gt;while (in)循环</title>
<path fill="none" stroke="red" stroke-dasharray="5,2" d="M9870.96,-6517.96C9838.41,-6506.18 9790.29,-6488.77 9754.78,-6475.92"/>
<polygon fill="red" stroke="red" points="9755.71,-6472.54 9745.12,-6472.43 9753.33,-6479.12 9755.71,-6472.54"/>
</g>
<!-- return in&#45;&gt;ngx_http_quic_send_chain入口函数 -->
<g id="edge16" class="edge"><title>return in&#45;&gt;ngx_http_quic_send_chain入口函数</title>
<path fill="none" stroke="red" stroke-dasharray="5,2" d="M9566.71,-6401.48C9581.61,-6426.77 9610.24,-6475.38 9627.87,-6505.32"/>
<polygon fill="red" stroke="red" points="9624.88,-6507.13 9632.97,-6513.97 9630.91,-6503.57 9624.88,-6507.13"/>
</g>
<!-- quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin) -->
<g id="node14" class="node"><title>quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)</title>
<ellipse fill="none" stroke="black" cx="10304" cy="-6134" rx="204.123" ry="18"/>
<text text-anchor="middle" x="10304" y="-6130.3" font-family="Times,serif" font-size="14.00">quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)</text>
</g>
<!-- string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)&#45;&gt;quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin) -->
<g id="edge18" class="edge"><title>string ngx_body = string(reinterpret_cast&lt;char*&gt;(buf), buf_len)&#45;&gt;quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)</title>
<path fill="none" stroke="black" d="M10304,-6203.6C10304,-6191.75 10304,-6175.82 10304,-6162.29"/>
<polygon fill="black" stroke="black" points="10307.5,-6162.08 10304,-6152.08 10300.5,-6162.08 10307.5,-6162.08"/>
</g>
<!-- return 0 -->
<g id="node15" class="node"><title>return 0</title>
<ellipse fill="none" stroke="black" cx="10137" cy="-6046" rx="38.0212" ry="18"/>
<text text-anchor="middle" x="10137" y="-6042.3" font-family="Times,serif" font-size="14.00">return 0</text>
</g>
<!-- quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)&#45;&gt;return 0 -->
<g id="edge19" class="edge"><title>quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)&#45;&gt;return 0</title>
<path fill="none" stroke="black" d="M10271.4,-6116.21C10242.5,-6101.31 10200.3,-6079.6 10170.9,-6064.48"/>
<polygon fill="black" stroke="black" points="10172.4,-6061.29 10161.9,-6059.82 10169.2,-6067.51 10172.4,-6061.29"/>
</g>
<!-- void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin) -->
<g id="node16" class="node"><title>void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)</title>
<ellipse fill="none" stroke="black" cx="10899" cy="-6046" rx="332.181" ry="18"/>
<text text-anchor="middle" x="10899" y="-6042.3" font-family="Times,serif" font-size="14.00">void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)</text>
</g>
<!-- quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)&#45;&gt;void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin) -->
<g id="edge21" class="edge"><title>quic_stream&#45;&gt;OnNginxBodyAvailable(ngx_body, fin)&#45;&gt;void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10415.4,-6116.9C10518.7,-6101.97 10672,-6079.81 10778.2,-6064.46"/>
<polygon fill="black" stroke="black" points="10414.7,-6113.47 10405.3,-6118.36 10415.7,-6120.4 10414.7,-6113.47"/>
<polygon fill="black" stroke="black" points="10778.9,-6067.89 10788.3,-6063 10777.9,-6060.96 10778.9,-6067.89"/>
</g>
<!-- return 0&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id) -->
<g id="edge20" class="edge"><title>return 0&#45;&gt;int ngx_http_quic_response_body_available(void *stream, unsigned char *buf, const int buf_len, int last_buf, int stream_id)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10124.6,-6063.23C10104.6,-6090.48 10066.7,-6147.97 10056,-6204 10052.3,-6223.21 10051,-6229.1 10056,-6248 10059.3,-6260.41 10065.8,-6272.92 10072.3,-6283.35"/>
<polygon fill="black" stroke="black" points="10069.5,-6285.5 10078,-6291.93 10075.4,-6281.65 10069.5,-6285.5"/>
</g>
<!-- if (write_side_closed() || fin_buffered() -->
<g id="node17" class="node"><title>if (write_side_closed() || fin_buffered()</title>
<ellipse fill="none" stroke="black" cx="10899" cy="-5936" rx="149.23" ry="18"/>
<text text-anchor="middle" x="10899" y="-5932.3" font-family="Times,serif" font-size="14.00">if (write_side_closed() || fin_buffered()</text>
</g>
<!-- void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)&#45;&gt;if (write_side_closed() || fin_buffered() -->
<g id="edge22" class="edge"><title>void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)&#45;&gt;if (write_side_closed() || fin_buffered()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10899,-6027.65C10899,-6010.56 10899,-5984.22 10899,-5964.32"/>
<polygon fill="black" stroke="black" points="10902.5,-5964.31 10899,-5954.31 10895.5,-5964.31 10902.5,-5964.31"/>
</g>
<!-- return; -->
<g id="node18" class="node"><title>return;</title>
<ellipse fill="none" stroke="black" cx="10856" cy="-5828" rx="34.1708" ry="18"/>
<text text-anchor="middle" x="10856" y="-5824.3" font-family="Times,serif" font-size="14.00">return;</text>
</g>
<!-- if (write_side_closed() || fin_buffered()&#45;&gt;return; -->
<g id="edge23" class="edge"><title>if (write_side_closed() || fin_buffered()&#45;&gt;return;</title>
<path fill="none" stroke="black" d="M10892.1,-5917.97C10885.2,-5901.05 10874.6,-5874.86 10866.7,-5855.28"/>
<polygon fill="black" stroke="black" points="10869.9,-5853.94 10862.9,-5845.99 10863.4,-5856.57 10869.9,-5853.94"/>
<text text-anchor="middle" x="10888" y="-5888.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- WriteOrBufferData(body, fin, nullptr) -->
<g id="node19" class="node"><title>WriteOrBufferData(body, fin, nullptr)</title>
<ellipse fill="none" stroke="black" cx="10758" cy="-5637" rx="146.356" ry="18"/>
<text text-anchor="middle" x="10758" y="-5633.3" font-family="Times,serif" font-size="14.00">WriteOrBufferData(body, fin, nullptr)</text>
</g>
<!-- if (write_side_closed() || fin_buffered()&#45;&gt;WriteOrBufferData(body, fin, nullptr) -->
<g id="edge24" class="edge"><title>if (write_side_closed() || fin_buffered()&#45;&gt;WriteOrBufferData(body, fin, nullptr)</title>
<path fill="none" stroke="black" d="M10864,-5918.42C10843.1,-5906.69 10817.8,-5888.96 10803,-5866 10762.3,-5802.66 10757,-5710.51 10757.2,-5665.21"/>
<polygon fill="black" stroke="black" points="10760.7,-5665.05 10757.3,-5655 10753.7,-5664.96 10760.7,-5665.05"/>
<text text-anchor="middle" x="10808" y="-5824.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- return;&#45;&gt;WriteOrBufferData(body, fin, nullptr) -->
<g id="edge25" class="edge"><title>return;&#45;&gt;WriteOrBufferData(body, fin, nullptr)</title>
<path fill="none" stroke="black" d="M10847.5,-5810.56C10830.5,-5777.77 10792.2,-5704.01 10771.7,-5664.38"/>
<polygon fill="black" stroke="black" points="10774.6,-5662.35 10766.9,-5655.08 10768.4,-5665.57 10774.6,-5662.35"/>
</g>
<!-- WriteOrBufferData(body, fin, nullptr)&#45;&gt;void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin) -->
<g id="edge26" class="edge"><title>WriteOrBufferData(body, fin, nullptr)&#45;&gt;void QuicSimpleServerStream::OnNginxBodyAvailable(const std::string &amp;body, bool fin)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10750.2,-5655.36C10726.3,-5711.78 10659.9,-5892.54 10741,-6000 10748.9,-6010.45 10771.4,-6019.18 10797.1,-6026.1"/>
<polygon fill="black" stroke="black" points="10796.5,-6029.56 10807.1,-6028.66 10798.2,-6022.78 10796.5,-6029.56"/>
</g>
<!-- void QuicStream::WriteOrBufferData -->
<g id="node22" class="node"><title>void QuicStream::WriteOrBufferData</title>
<ellipse fill="none" stroke="black" cx="8971" cy="-5457" rx="145.38" ry="18"/>
<text text-anchor="middle" x="8971" y="-5453.3" font-family="Times,serif" font-size="14.00">void QuicStream::WriteOrBufferData</text>
</g>
<!-- WriteOrBufferData(body, fin, nullptr)&#45;&gt;void QuicStream::WriteOrBufferData -->
<g id="edge27" class="edge"><title>WriteOrBufferData(body, fin, nullptr)&#45;&gt;void QuicStream::WriteOrBufferData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M10648.9,-5622.46C10472.8,-5600.86 10114.9,-5557.98 9811,-5528 9560.84,-5503.32 9268.18,-5480.24 9102.7,-5467.73"/>
<polygon fill="black" stroke="black" points="10648.6,-5625.95 10658.9,-5623.7 10649.4,-5619 10648.6,-5625.95"/>
<polygon fill="black" stroke="black" points="9102.71,-5464.22 9092.48,-5466.96 9102.18,-5471.2 9102.71,-5464.22"/>
</g>
<!-- if (data.length() &gt; 0) -->
<g id="node20" class="node"><title>if (data.length() &gt; 0)</title>
<polygon fill="none" stroke="black" points="8746,-6240 8627.64,-6222 8746,-6204 8864.36,-6222 8746,-6240"/>
<text text-anchor="middle" x="8746" y="-6218.3" font-family="Times,serif" font-size="14.00">if (data.length() &gt; 0)</text>
</g>
<!-- struct iovec iov(MakeIovec(data)) -->
<g id="node23" class="node"><title>struct iovec iov(MakeIovec(data))</title>
<ellipse fill="none" stroke="black" cx="8941" cy="-6134" rx="131.408" ry="18"/>
<text text-anchor="middle" x="8941" y="-6130.3" font-family="Times,serif" font-size="14.00">struct iovec iov(MakeIovec(data))</text>
</g>
<!-- if (data.length() &gt; 0)&#45;&gt;struct iovec iov(MakeIovec(data)) -->
<g id="edge29" class="edge"><title>if (data.length() &gt; 0)&#45;&gt;struct iovec iov(MakeIovec(data))</title>
<path fill="none" stroke="black" d="M8774.77,-6208.31C8806.19,-6194.46 8856.96,-6172.06 8894.14,-6155.67"/>
<polygon fill="black" stroke="black" points="8896.02,-6158.66 8903.76,-6151.42 8893.2,-6152.26 8896.02,-6158.66"/>
<text text-anchor="middle" x="8866" y="-6174.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_)) -->
<g id="node21" class="node"><title>if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))</title>
<polygon fill="none" stroke="black" points="8883,-5846 8539.85,-5828 8883,-5810 9226.15,-5828 8883,-5846"/>
<text text-anchor="middle" x="8883" y="-5824.3" font-family="Times,serif" font-size="14.00">if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))</text>
</g>
<!-- if (data.length() &gt; 0)&#45;&gt;if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_)) -->
<g id="edge33" class="edge"><title>if (data.length() &gt; 0)&#45;&gt;if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))</title>
<path fill="none" stroke="black" d="M8746,-6203.87C8746,-6186.51 8746,-6158.89 8746,-6135 8746,-6135 8746,-6135 8746,-5935 8746,-5891.89 8788.96,-5863.82 8826.76,-5847.47"/>
<polygon fill="black" stroke="black" points="8828.33,-5850.61 8836.24,-5843.56 8825.66,-5844.14 8828.33,-5850.61"/>
<text text-anchor="middle" x="8751" y="-6042.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- WriteBufferedData() -->
<g id="node26" class="node"><title>WriteBufferedData()</title>
<ellipse fill="none" stroke="black" cx="8850" cy="-5637" rx="85.2138" ry="18"/>
<text text-anchor="middle" x="8850" y="-5633.3" font-family="Times,serif" font-size="14.00">WriteBufferedData()</text>
</g>
<!-- if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))&#45;&gt;WriteBufferedData() -->
<g id="edge34" class="edge"><title>if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))&#45;&gt;WriteBufferedData()</title>
<path fill="none" stroke="black" d="M8880.01,-5809.89C8874.27,-5777.02 8861.66,-5704.76 8854.75,-5665.2"/>
<polygon fill="black" stroke="black" points="8858.17,-5664.45 8853,-5655.2 8851.28,-5665.66 8858.17,-5664.45"/>
<text text-anchor="middle" x="8879" y="-5760.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))&#45;&gt;void QuicStream::WriteOrBufferData -->
<g id="edge35" class="edge"><title>if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))&#45;&gt;void QuicStream::WriteOrBufferData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8897.98,-5810.72C8912.5,-5793.89 8933.77,-5766.17 8944,-5738 8976.01,-5649.91 8975.2,-5536.53 8972.79,-5485.29"/>
<polygon fill="black" stroke="black" points="8976.27,-5484.85 8972.24,-5475.05 8969.28,-5485.22 8976.27,-5484.85"/>
<text text-anchor="middle" x="8979" y="-5633.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- void QuicStream::WriteOrBufferData&#45;&gt;if (data.length() &gt; 0) -->
<g id="edge28" class="edge"><title>void QuicStream::WriteOrBufferData&#45;&gt;if (data.length() &gt; 0)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8894.12,-5472.32C8850.96,-5482.88 8797.59,-5500.34 8756,-5528 8595.77,-5634.56 8520,-5698.57 8520,-5891 8520,-6135 8520,-6135 8520,-6135 8520,-6170.14 8616.64,-6196.1 8683.53,-6209.85"/>
<polygon fill="black" stroke="black" points="8683.09,-6213.34 8693.58,-6211.88 8684.47,-6206.47 8683.09,-6213.34"/>
</g>
<!-- send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length()) -->
<g id="node24" class="node"><title>send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())</title>
<ellipse fill="none" stroke="black" cx="8985" cy="-6046" rx="211.347" ry="18"/>
<text text-anchor="middle" x="8985" y="-6042.3" font-family="Times,serif" font-size="14.00">send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())</text>
</g>
<!-- struct iovec iov(MakeIovec(data))&#45;&gt;send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length()) -->
<g id="edge30" class="edge"><title>struct iovec iov(MakeIovec(data))&#45;&gt;send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())</title>
<path fill="none" stroke="black" d="M8949.69,-6116.01C8955.92,-6103.84 8964.42,-6087.22 8971.53,-6073.33"/>
<polygon fill="black" stroke="black" points="8974.74,-6074.75 8976.17,-6064.25 8968.5,-6071.56 8974.74,-6074.75"/>
</g>
<!-- OnDataBuffered(offset, data.length(), ack_listener) -->
<g id="node25" class="node"><title>OnDataBuffered(offset, data.length(), ack_listener)</title>
<ellipse fill="none" stroke="black" cx="8964" cy="-5936" rx="192.075" ry="18"/>
<text text-anchor="middle" x="8964" y="-5932.3" font-family="Times,serif" font-size="14.00">OnDataBuffered(offset, data.length(), ack_listener)</text>
</g>
<!-- send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())&#45;&gt;OnDataBuffered(offset, data.length(), ack_listener) -->
<g id="edge31" class="edge"><title>send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())&#45;&gt;OnDataBuffered(offset, data.length(), ack_listener)</title>
<path fill="none" stroke="black" d="M8981.63,-6027.65C8978.3,-6010.56 8973.18,-5984.22 8969.31,-5964.32"/>
<polygon fill="black" stroke="black" points="8972.71,-5963.46 8967.37,-5954.31 8965.84,-5964.79 8972.71,-5963.46"/>
</g>
<!-- void QuicStreamSendBuffer::SaveStreamData -->
<g id="node28" class="node"><title>void QuicStreamSendBuffer::SaveStreamData</title>
<ellipse fill="none" stroke="black" cx="9426" cy="-5936" rx="175.227" ry="18"/>
<text text-anchor="middle" x="9426" y="-5932.3" font-family="Times,serif" font-size="14.00">void QuicStreamSendBuffer::SaveStreamData</text>
</g>
<!-- send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())&#45;&gt;void QuicStreamSendBuffer::SaveStreamData -->
<g id="edge38" class="edge"><title>send_buffer_.SaveStreamData(&amp;iov, 1, 0, data.length())&#45;&gt;void QuicStreamSendBuffer::SaveStreamData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M9098.24,-6028.66C9142.47,-6021.31 9193.42,-6011.65 9239,-6000 9285.16,-5988.21 9336.36,-5970.63 9373.49,-5957.04"/>
<polygon fill="black" stroke="black" points="9097.63,-6025.22 9088.33,-6030.29 9098.76,-6032.12 9097.63,-6025.22"/>
<polygon fill="black" stroke="black" points="9374.93,-5960.24 9383.1,-5953.5 9372.5,-5953.68 9374.93,-5960.24"/>
</g>
<!-- OnDataBuffered(offset, data.length(), ack_listener)&#45;&gt;if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_)) -->
<g id="edge32" class="edge"><title>OnDataBuffered(offset, data.length(), ack_listener)&#45;&gt;if (!had_buffered_data &amp;&amp; (HasBufferedData() || fin_buffered_))</title>
<path fill="none" stroke="black" d="M8950.99,-5917.97C8937.68,-5900.56 8916.88,-5873.34 8901.79,-5853.59"/>
<polygon fill="black" stroke="black" points="8904.57,-5851.46 8895.71,-5845.64 8899.01,-5855.71 8904.57,-5851.46"/>
</g>
<!-- WriteBufferedData()&#45;&gt;void QuicStream::WriteOrBufferData -->
<g id="edge36" class="edge"><title>WriteBufferedData()&#45;&gt;void QuicStream::WriteOrBufferData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8861.6,-5618.93C8882.92,-5587.57 8928.44,-5520.6 8953.52,-5483.71"/>
<polygon fill="black" stroke="black" points="8956.71,-5485.25 8959.43,-5475.02 8950.92,-5481.32 8956.71,-5485.25"/>
</g>
<!-- void QuicStream::WriteBufferedData -->
<g id="node27" class="node"><title>void QuicStream::WriteBufferedData</title>
<ellipse fill="none" stroke="black" cx="8663" cy="-5457" rx="143.931" ry="18"/>
<text text-anchor="middle" x="8663" y="-5453.3" font-family="Times,serif" font-size="14.00">void QuicStream::WriteBufferedData</text>
</g>
<!-- WriteBufferedData()&#45;&gt;void QuicStream::WriteBufferedData -->
<g id="edge37" class="edge"><title>WriteBufferedData()&#45;&gt;void QuicStream::WriteBufferedData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8824.76,-5611.98C8789.12,-5578.05 8724.38,-5516.43 8688.56,-5482.33"/>
<polygon fill="black" stroke="black" points="8822.75,-5614.89 8832.41,-5619.25 8827.58,-5609.82 8822.75,-5614.89"/>
<polygon fill="black" stroke="black" points="8690.61,-5479.45 8680.96,-5475.09 8685.79,-5484.52 8690.61,-5479.45"/>
</g>
<!-- if (session_&#45;&gt;ShouldYield(id())) -->
<g id="node31" class="node"><title>if (session_&#45;&gt;ShouldYield(id()))</title>
<polygon fill="none" stroke="black" points="8298,-5846 8120.9,-5828 8298,-5810 8475.1,-5828 8298,-5846"/>
<text text-anchor="middle" x="8298" y="-5824.3" font-family="Times,serif" font-size="14.00">if (session_&#45;&gt;ShouldYield(id()))</text>
</g>
<!-- void QuicStream::WriteBufferedData&#45;&gt;if (session_&#45;&gt;ShouldYield(id())) -->
<g id="edge42" class="edge"><title>void QuicStream::WriteBufferedData&#45;&gt;if (session_&#45;&gt;ShouldYield(id()))</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8618.93,-5474.19C8594.11,-5485.54 8564.63,-5503.16 8547,-5528 8491.81,-5605.77 8563.25,-5664.08 8503,-5738 8469.66,-5778.91 8413.87,-5801.47 8368.91,-5813.63"/>
<polygon fill="black" stroke="black" points="8368,-5810.25 8359.2,-5816.15 8369.76,-5817.03 8368,-5810.25"/>
</g>
<!--  const QuicByteCount max_data_slice_size =
 &#160;&#160;&#160;GetQuicFlag(FLAGS_quic_send_buffer_max_data_slice_size)
 &#160;&#160;&#160;max_data_slice_size这个值等于4096 -->
<g id="node29" class="node"><title> const QuicByteCount max_data_slice_size =
 &#160;&#160;&#160;GetQuicFlag(FLAGS_quic_send_buffer_max_data_slice_size)
 &#160;&#160;&#160;max_data_slice_size这个值等于4096</title>
<ellipse fill="none" stroke="black" cx="9535" cy="-5828" rx="264.187" ry="37.4533"/>
<text text-anchor="middle" x="9535" y="-5839.3" font-family="Times,serif" font-size="14.00"> const QuicByteCount max_data_slice_size =</text>
<text text-anchor="middle" x="9535" y="-5824.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;GetQuicFlag(FLAGS_quic_send_buffer_max_data_slice_size)</text>
<text text-anchor="middle" x="9535" y="-5809.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;max_data_slice_size这个值等于4096</text>
</g>
<!-- void QuicStreamSendBuffer::SaveStreamData&#45;&gt; const QuicByteCount max_data_slice_size =
 &#160;&#160;&#160;GetQuicFlag(FLAGS_quic_send_buffer_max_data_slice_size)
 &#160;&#160;&#160;max_data_slice_size这个值等于4096 -->
<g id="edge39" class="edge"><title>void QuicStreamSendBuffer::SaveStreamData&#45;&gt; const QuicByteCount max_data_slice_size =
 &#160;&#160;&#160;GetQuicFlag(FLAGS_quic_send_buffer_max_data_slice_size)
 &#160;&#160;&#160;max_data_slice_size这个值等于4096</title>
<path fill="none" stroke="black" d="M9443.51,-5917.97C9456.14,-5905.69 9473.79,-5888.53 9490.22,-5872.55"/>
<polygon fill="black" stroke="black" points="9492.93,-5874.8 9497.66,-5865.31 9488.05,-5869.78 9492.93,-5874.8"/>
</g>
<!-- while (data_length &gt; 0) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t slice_len = std::min(data_length, max_data_slice_size);
 &#160;&#160;&#160;QuicMemSlice slice(allocator_, slice_len);
 &#160;&#160;&#160;QuicUtils::CopyToBuffer(iov, iov_count, iov_offset, slice_len,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const_cast&lt;char*&gt;(slice.data()));
 &#160;&#160;&#160;SaveMemSlice(std::move(slice));
 &#160;&#160;&#160;data_length &#45;= slice_len;
 &#160;&#160;&#160;iov_offset += slice_len;
 &#160;} -->
<g id="node30" class="node"><title>while (data_length &gt; 0) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t slice_len = std::min(data_length, max_data_slice_size);
 &#160;&#160;&#160;QuicMemSlice slice(allocator_, slice_len);
 &#160;&#160;&#160;QuicUtils::CopyToBuffer(iov, iov_count, iov_offset, slice_len,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const_cast&lt;char*&gt;(slice.data()));
 &#160;&#160;&#160;SaveMemSlice(std::move(slice));
 &#160;&#160;&#160;data_length &#45;= slice_len;
 &#160;&#160;&#160;iov_offset += slice_len;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="9525" cy="-5637" rx="272.415" ry="101.233"/>
<text text-anchor="middle" x="9525" y="-5693.3" font-family="Times,serif" font-size="14.00">while (data_length &gt; 0) {</text>
<text text-anchor="middle" x="9525" y="-5678.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t slice_len = std::min(data_length, max_data_slice_size);</text>
<text text-anchor="middle" x="9525" y="-5663.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;QuicMemSlice slice(allocator_, slice_len);</text>
<text text-anchor="middle" x="9525" y="-5648.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;QuicUtils::CopyToBuffer(iov, iov_count, iov_offset, slice_len,</text>
<text text-anchor="middle" x="9525" y="-5633.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const_cast&lt;char*&gt;(slice.data()));</text>
<text text-anchor="middle" x="9525" y="-5618.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;SaveMemSlice(std::move(slice));</text>
<text text-anchor="middle" x="9525" y="-5603.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;data_length &#45;= slice_len;</text>
<text text-anchor="middle" x="9525" y="-5588.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;iov_offset += slice_len;</text>
<text text-anchor="middle" x="9525" y="-5573.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  const QuicByteCount max_data_slice_size =
 &#160;&#160;&#160;GetQuicFlag(FLAGS_quic_send_buffer_max_data_slice_size)
 &#160;&#160;&#160;max_data_slice_size这个值等于4096&#45;&gt;while (data_length &gt; 0) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t slice_len = std::min(data_length, max_data_slice_size);
 &#160;&#160;&#160;QuicMemSlice slice(allocator_, slice_len);
 &#160;&#160;&#160;QuicUtils::CopyToBuffer(iov, iov_count, iov_offset, slice_len,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const_cast&lt;char*&gt;(slice.data()));
 &#160;&#160;&#160;SaveMemSlice(std::move(slice));
 &#160;&#160;&#160;data_length &#45;= slice_len;
 &#160;&#160;&#160;iov_offset += slice_len;
 &#160;} -->
<g id="edge40" class="edge"><title> const QuicByteCount max_data_slice_size =
 &#160;&#160;&#160;GetQuicFlag(FLAGS_quic_send_buffer_max_data_slice_size)
 &#160;&#160;&#160;max_data_slice_size这个值等于4096&#45;&gt;while (data_length &gt; 0) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t slice_len = std::min(data_length, max_data_slice_size);
 &#160;&#160;&#160;QuicMemSlice slice(allocator_, slice_len);
 &#160;&#160;&#160;QuicUtils::CopyToBuffer(iov, iov_count, iov_offset, slice_len,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const_cast&lt;char*&gt;(slice.data()));
 &#160;&#160;&#160;SaveMemSlice(std::move(slice));
 &#160;&#160;&#160;data_length &#45;= slice_len;
 &#160;&#160;&#160;iov_offset += slice_len;
 &#160;}</title>
<path fill="none" stroke="black" d="M9533.05,-5790.11C9532.4,-5777.89 9531.65,-5763.59 9530.86,-5748.74"/>
<polygon fill="black" stroke="black" points="9534.34,-5748.19 9530.31,-5738.39 9527.35,-5748.56 9534.34,-5748.19"/>
</g>
<!-- while (data_length &gt; 0) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t slice_len = std::min(data_length, max_data_slice_size);
 &#160;&#160;&#160;QuicMemSlice slice(allocator_, slice_len);
 &#160;&#160;&#160;QuicUtils::CopyToBuffer(iov, iov_count, iov_offset, slice_len,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const_cast&lt;char*&gt;(slice.data()));
 &#160;&#160;&#160;SaveMemSlice(std::move(slice));
 &#160;&#160;&#160;data_length &#45;= slice_len;
 &#160;&#160;&#160;iov_offset += slice_len;
 &#160;}&#45;&gt;void QuicStreamSendBuffer::SaveStreamData -->
<g id="edge41" class="edge"><title>while (data_length &gt; 0) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t slice_len = std::min(data_length, max_data_slice_size);
 &#160;&#160;&#160;QuicMemSlice slice(allocator_, slice_len);
 &#160;&#160;&#160;QuicUtils::CopyToBuffer(iov, iov_count, iov_offset, slice_len,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const_cast&lt;char*&gt;(slice.data()));
 &#160;&#160;&#160;SaveMemSlice(std::move(slice));
 &#160;&#160;&#160;data_length &#45;= slice_len;
 &#160;&#160;&#160;iov_offset += slice_len;
 &#160;}&#45;&gt;void QuicStreamSendBuffer::SaveStreamData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M9339.79,-5711.26C9308.68,-5731.99 9280.52,-5757.91 9262,-5790 9245.12,-5819.26 9243.31,-5837.86 9262,-5866 9278.36,-5890.63 9305.41,-5906.49 9332.87,-5916.69"/>
<polygon fill="black" stroke="black" points="9331.99,-5920.09 9342.59,-5920.07 9334.29,-5913.48 9331.99,-5920.09"/>
</g>
<!-- session_&#45;&gt;MarkConnectionLevelWriteBlocked(id()) -->
<g id="node33" class="node"><title>session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())</title>
<ellipse fill="none" stroke="black" cx="8298" cy="-5637" rx="196.399" ry="18"/>
<text text-anchor="middle" x="8298" y="-5633.3" font-family="Times,serif" font-size="14.00">session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())</text>
</g>
<!-- if (session_&#45;&gt;ShouldYield(id()))&#45;&gt;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id()) -->
<g id="edge43" class="edge"><title>if (session_&#45;&gt;ShouldYield(id()))&#45;&gt;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())</title>
<path fill="none" stroke="black" d="M8298,-5809.89C8298,-5777.02 8298,-5704.76 8298,-5665.2"/>
<polygon fill="black" stroke="black" points="8301.5,-5665.2 8298,-5655.2 8294.5,-5665.2 8301.5,-5665.2"/>
<text text-anchor="middle" x="8303" y="-5760.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_; -->
<g id="node34" class="node"><title>size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_;</title>
<ellipse fill="none" stroke="black" cx="7803" cy="-5637" rx="280.021" ry="37.4533"/>
<text text-anchor="middle" x="7803" y="-5648.3" font-family="Times,serif" font-size="14.00">size_t write_length = BufferedDataBytes();</text>
<text text-anchor="middle" x="7803" y="-5633.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);</text>
<text text-anchor="middle" x="7803" y="-5618.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;bool fin = fin_buffered_;</text>
</g>
<!-- if (session_&#45;&gt;ShouldYield(id()))&#45;&gt;size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_; -->
<g id="edge45" class="edge"><title>if (session_&#45;&gt;ShouldYield(id()))&#45;&gt;size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_;</title>
<path fill="none" stroke="black" d="M8262.8,-5813.56C8188.75,-5785.29 8014.56,-5718.78 7903.1,-5676.22"/>
<polygon fill="black" stroke="black" points="7904.11,-5672.86 7893.52,-5672.56 7901.61,-5679.4 7904.11,-5672.86"/>
<text text-anchor="middle" x="8157" y="-5760.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin) -->
<g id="node32" class="node"><title>QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)</title>
<ellipse fill="gold" stroke="black" cx="7791" cy="-5117" rx="263.066" ry="26.7407"/>
<text text-anchor="middle" x="7791" y="-5120.8" font-family="Times,serif" font-size="14.00">QuicConsumedData consumed_data = </text>
<text text-anchor="middle" x="7791" y="-5105.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)</text>
</g>
<!-- OnStreamDataConsumed(consumed_data.bytes_consumed) -->
<g id="node38" class="node"><title>OnStreamDataConsumed(consumed_data.bytes_consumed)</title>
<ellipse fill="none" stroke="black" cx="8002" cy="-5025" rx="223.37" ry="18"/>
<text text-anchor="middle" x="8002" y="-5021.3" font-family="Times,serif" font-size="14.00">OnStreamDataConsumed(consumed_data.bytes_consumed)</text>
</g>
<!-- QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)&#45;&gt;OnStreamDataConsumed(consumed_data.bytes_consumed) -->
<g id="edge50" class="edge"><title>QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)&#45;&gt;OnStreamDataConsumed(consumed_data.bytes_consumed)</title>
<path fill="none" stroke="black" d="M7850.06,-5090.81C7882.65,-5076.91 7922.63,-5059.85 7953.4,-5046.73"/>
<polygon fill="black" stroke="black" points="7954.81,-5049.93 7962.64,-5042.79 7952.06,-5043.49 7954.81,-5049.93"/>
</g>
<!-- QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin) -->
<g id="node42" class="node"><title>QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)</title>
<ellipse fill="none" stroke="black" cx="7211" cy="-5025" rx="287.189" ry="26.7407"/>
<text text-anchor="middle" x="7211" y="-5028.8" font-family="Times,serif" font-size="14.00">QuicConsumedData QuicStream::WritevDataInner(size_t write_length,</text>
<text text-anchor="middle" x="7211" y="-5013.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)</text>
</g>
<!-- QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)&#45;&gt;QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin) -->
<g id="edge55" class="edge"><title>QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)&#45;&gt;QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7640.51,-5092.65C7555.7,-5079.49 7450,-5063.09 7364.68,-5049.85"/>
<polygon fill="black" stroke="black" points="7640.18,-5096.14 7650.6,-5094.21 7641.25,-5089.22 7640.18,-5096.14"/>
<polygon fill="black" stroke="black" points="7365.06,-5046.36 7354.64,-5048.29 7363.99,-5053.28 7365.06,-5046.36"/>
</g>
<!-- session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())&#45;&gt;void QuicStream::WriteBufferedData -->
<g id="edge44" class="edge"><title>session_&#45;&gt;MarkConnectionLevelWriteBlocked(id())&#45;&gt;void QuicStream::WriteBufferedData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8315.55,-5618.73C8345.71,-5590.04 8410.5,-5532.69 8476,-5502 8503.27,-5489.22 8534.57,-5479.98 8563.66,-5473.38"/>
<polygon fill="black" stroke="black" points="8564.41,-5476.8 8573.43,-5471.24 8562.91,-5469.96 8564.41,-5476.8"/>
<text text-anchor="middle" x="8492.5" y="-5506.3" font-family="Times,serif" font-size="14.00">return</text>
</g>
<!-- send_window = flow_controller_.SendWindowSize();
 &#160;&#160;&#160;初始值是kMinimumFlowControlSendWindow=16K，发送数据时为6*1024*1024 -->
<g id="node35" class="node"><title>send_window = flow_controller_.SendWindowSize();
 &#160;&#160;&#160;初始值是kMinimumFlowControlSendWindow=16K，发送数据时为6*1024*1024</title>
<ellipse fill="none" stroke="black" cx="7859" cy="-5457" rx="335.314" ry="26.7407"/>
<text text-anchor="middle" x="7859" y="-5460.8" font-family="Times,serif" font-size="14.00">send_window = flow_controller_.SendWindowSize();</text>
<text text-anchor="middle" x="7859" y="-5445.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;初始值是kMinimumFlowControlSendWindow=16K，发送数据时为6*1024*1024</text>
</g>
<!-- size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_;&#45;&gt;send_window = flow_controller_.SendWindowSize();
 &#160;&#160;&#160;初始值是kMinimumFlowControlSendWindow=16K，发送数据时为6*1024*1024 -->
<g id="edge46" class="edge"><title>size_t write_length = BufferedDataBytes();
 &#160;&#160;&#160;bool fin_with_zero_data = (fin_buffered_ &amp;&amp; write_length == 0);
 &#160;&#160;&#160;bool fin = fin_buffered_;&#45;&gt;send_window = flow_controller_.SendWindowSize();
 &#160;&#160;&#160;初始值是kMinimumFlowControlSendWindow=16K，发送数据时为6*1024*1024</title>
<path fill="none" stroke="black" d="M7814.47,-5599.55C7824.18,-5568.66 7838.04,-5524.62 7847.71,-5493.89"/>
<polygon fill="black" stroke="black" points="7851.15,-5494.61 7850.81,-5484.02 7844.47,-5492.51 7851.15,-5494.61"/>
</g>
<!-- if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;} -->
<g id="node36" class="node"><title>if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="7852" cy="-5344" rx="327.086" ry="48.1667"/>
<text text-anchor="middle" x="7852" y="-5362.8" font-family="Times,serif" font-size="14.00">if (stream_contributes_to_connection_flow_control_) { </text>
<text text-anchor="middle" x="7852" y="-5347.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;send_window =</text>
<text text-anchor="middle" x="7852" y="-5332.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());</text>
<text text-anchor="middle" x="7852" y="-5317.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- send_window = flow_controller_.SendWindowSize();
 &#160;&#160;&#160;初始值是kMinimumFlowControlSendWindow=16K，发送数据时为6*1024*1024&#45;&gt;if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;} -->
<g id="edge47" class="edge"><title>send_window = flow_controller_.SendWindowSize();
 &#160;&#160;&#160;初始值是kMinimumFlowControlSendWindow=16K，发送数据时为6*1024*1024&#45;&gt;if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M7857.36,-5429.98C7856.83,-5421.61 7856.22,-5411.97 7855.61,-5402.27"/>
<polygon fill="black" stroke="black" points="7859.1,-5401.94 7854.98,-5392.18 7852.11,-5402.39 7859.1,-5401.94"/>
</g>
<!-- if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;} -->
<g id="node37" class="node"><title>if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="7820" cy="-5220" rx="275.097" ry="37.4533"/>
<text text-anchor="middle" x="7820" y="-5231.3" font-family="Times,serif" font-size="14.00">if (session_&#45;&gt;session_decides_what_to_write()) {</text>
<text text-anchor="middle" x="7820" y="-5216.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);</text>
<text text-anchor="middle" x="7820" y="-5201.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;}&#45;&gt;if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;} -->
<g id="edge48" class="edge"><title>if (stream_contributes_to_connection_flow_control_) { 
 &#160;&#160;&#160;send_window =
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;std::min(send_window, connection_flow_controller_&#45;&gt;SendWindowSize());
 &#160;&#160;&#160;}&#45;&gt;if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M7839.63,-5295.83C7837.2,-5286.57 7834.65,-5276.87 7832.23,-5267.63"/>
<polygon fill="black" stroke="black" points="7835.58,-5266.61 7829.66,-5257.83 7828.81,-5268.39 7835.58,-5266.61"/>
</g>
<!-- if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;}&#45;&gt;QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin) -->
<g id="edge49" class="edge"><title>if (session_&#45;&gt;session_decides_what_to_write()) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;SetTransmissionType(NOT_RETRANSMISSION);
 &#160;&#160;&#160;}&#45;&gt;QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)</title>
<path fill="none" stroke="black" d="M7809.53,-5182.54C7806.84,-5173.16 7803.94,-5163.08 7801.26,-5153.74"/>
<polygon fill="black" stroke="black" points="7804.58,-5152.61 7798.45,-5143.96 7797.85,-5154.54 7804.58,-5152.61"/>
</g>
<!-- AddBytesSent(consumed_data.bytes_consumed) -->
<g id="node39" class="node"><title>AddBytesSent(consumed_data.bytes_consumed)</title>
<ellipse fill="none" stroke="black" cx="8083" cy="-4922" rx="183.401" ry="18"/>
<text text-anchor="middle" x="8083" y="-4918.3" font-family="Times,serif" font-size="14.00">AddBytesSent(consumed_data.bytes_consumed)</text>
</g>
<!-- OnStreamDataConsumed(consumed_data.bytes_consumed)&#45;&gt;AddBytesSent(consumed_data.bytes_consumed) -->
<g id="edge51" class="edge"><title>OnStreamDataConsumed(consumed_data.bytes_consumed)&#45;&gt;AddBytesSent(consumed_data.bytes_consumed)</title>
<path fill="none" stroke="black" d="M8015.74,-5006.87C8028.66,-4990.76 8048.15,-4966.46 8062.83,-4948.15"/>
<polygon fill="black" stroke="black" points="8065.67,-4950.21 8069.19,-4940.22 8060.21,-4945.83 8065.67,-4950.21"/>
</g>
<!-- if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;} -->
<g id="node40" class="node"><title>if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="8160" cy="-4808" rx="107.22" ry="37.4533"/>
<text text-anchor="middle" x="8160" y="-4819.3" font-family="Times,serif" font-size="14.00">if (write_side_closed_) {</text>
<text text-anchor="middle" x="8160" y="-4804.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;</text>
<text text-anchor="middle" x="8160" y="-4789.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- AddBytesSent(consumed_data.bytes_consumed)&#45;&gt;if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;} -->
<g id="edge52" class="edge"><title>AddBytesSent(consumed_data.bytes_consumed)&#45;&gt;if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M8094.69,-4903.99C8103.95,-4890.53 8117.31,-4871.1 8129.54,-4853.31"/>
<polygon fill="black" stroke="black" points="8132.64,-4854.97 8135.43,-4844.75 8126.88,-4851 8132.64,-4854.97"/>
</g>
<!--  &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;} -->
<g id="node41" class="node"><title> &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="8179" cy="-4514" rx="309.008" ry="217.578"/>
<text text-anchor="middle" x="8179" y="-4652.8" font-family="Times,serif" font-size="14.00"> &#160;if (consumed_data.bytes_consumed == write_length) {</text>
<text text-anchor="middle" x="8179" y="-4637.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (!fin_with_zero_data) {</text>
<text text-anchor="middle" x="8179" y="-4622.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();</text>
<text text-anchor="middle" x="8179" y="-4607.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;</text>
<text text-anchor="middle" x="8179" y="-4592.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {</text>
<text text-anchor="middle" x="8179" y="-4577.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;</text>
<text text-anchor="middle" x="8179" y="-4562.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;</text>
<text text-anchor="middle" x="8179" y="-4547.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;if (fin_received_) {</text>
<text text-anchor="middle" x="8179" y="-4532.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);</text>
<text text-anchor="middle" x="8179" y="-4517.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;} &#160;&#160;</text>
<text text-anchor="middle" x="8179" y="-4502.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;CloseWriteSide();</text>
<text text-anchor="middle" x="8179" y="-4487.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {</text>
<text text-anchor="middle" x="8179" y="-4472.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());</text>
<text text-anchor="middle" x="8179" y="-4457.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;</text>
<text text-anchor="middle" x="8179" y="-4442.8" font-family="Times,serif" font-size="14.00"> &#160;} else {</text>
<text text-anchor="middle" x="8179" y="-4427.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());</text>
<text text-anchor="middle" x="8179" y="-4412.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
<text text-anchor="middle" x="8179" y="-4397.8" font-family="Times,serif" font-size="14.00"> &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {</text>
<text text-anchor="middle" x="8179" y="-4382.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;busy_counter_ = 0;</text>
<text text-anchor="middle" x="8179" y="-4367.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;}&#45;&gt; &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;} -->
<g id="edge53" class="edge"><title>if (write_side_closed_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
 &#160;&#160;&#160;}&#45;&gt; &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;}</title>
<path fill="none" stroke="black" d="M8162.39,-4770.31C8162.93,-4761.9 8163.56,-4752.35 8164.23,-4742.01"/>
<polygon fill="black" stroke="black" points="8167.73,-4742.06 8164.89,-4731.86 8160.75,-4741.61 8167.73,-4742.06"/>
</g>
<!--  &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;}&#45;&gt;void QuicStream::WriteBufferedData -->
<g id="edge54" class="edge"><title> &#160;if (consumed_data.bytes_consumed == write_length) {
 &#160;&#160;&#160;if (!fin_with_zero_data) {
 &#160;&#160;&#160;&#160;&#160;MaybeSendBlocked();
 &#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;if (fin &amp;&amp; consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;fin_sent_ = true;
 &#160;&#160;&#160;&#160;&#160;fin_outstanding_ = true;
 &#160;&#160;&#160;&#160;&#160;if (fin_received_) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;session_&#45;&gt;StreamDraining(id_);
 &#160;&#160;&#160;&#160;&#160;} &#160;&#160;
 &#160;&#160;&#160;&#160;&#160;CloseWriteSide();
 &#160;&#160;&#160;} else if (fin &amp;&amp; !consumed_data.fin_consumed) {
 &#160;&#160;&#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;&#160;&#160;} &#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;session_&#45;&gt;MarkConnectionLevelWriteBlocked(id());
 &#160;}
 &#160;if (consumed_data.bytes_consumed &gt; 0 || consumed_data.fin_consumed) {
 &#160;&#160;&#160;busy_counter_ = 0;
 &#160;}&#45;&gt;void QuicStream::WriteBufferedData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M8304.47,-4713.31C8315.16,-4743.64 8322,-4775.39 8322,-4807 8322,-5345 8322,-5345 8322,-5345 8322,-5372.57 8485.2,-5415.12 8585.8,-5438.72"/>
<polygon fill="black" stroke="black" points="8585.1,-5442.15 8595.63,-5441.02 8586.69,-5435.34 8585.1,-5442.15"/>
</g>
<!-- if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;} -->
<g id="node43" class="node"><title>if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="7224" cy="-4922" rx="194.182" ry="37.4533"/>
<text text-anchor="middle" x="7224" y="-4933.3" font-family="Times,serif" font-size="14.00">if (fin &amp;&amp; add_random_padding_after_fin_) { </text>
<text text-anchor="middle" x="7224" y="-4918.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;</text>
<text text-anchor="middle" x="7224" y="-4903.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)&#45;&gt;if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;} -->
<g id="edge56" class="edge"><title>QuicConsumedData QuicStream::WritevDataInner(size_t write_length,
 &#160;&#160;&#160;&#160;QuicStreamOffset offset, bool fin)&#45;&gt;if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7214.35,-4997.99C7215.46,-4989.31 7216.75,-4979.37 7218,-4969.61"/>
<polygon fill="black" stroke="black" points="7221.49,-4969.94 7219.29,-4959.58 7214.54,-4969.05 7221.49,-4969.94"/>
</g>
<!-- return session()&#45;&gt;WritevData(this, id(), write_length, offset, state); -->
<g id="node44" class="node"><title>return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);</title>
<ellipse fill="none" stroke="black" cx="7231" cy="-4808" rx="248.392" ry="18"/>
<text text-anchor="middle" x="7231" y="-4804.3" font-family="Times,serif" font-size="14.00">return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);</text>
</g>
<!-- if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;}&#45;&gt;return session()&#45;&gt;WritevData(this, id(), write_length, offset, state); -->
<g id="edge57" class="edge"><title>if (fin &amp;&amp; add_random_padding_after_fin_) { 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;state = FIN_AND_PADDING;
 &#160;&#160;&#160;}&#45;&gt;return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);</title>
<path fill="none" stroke="black" d="M7226.29,-4884.33C7227.26,-4868.77 7228.38,-4850.95 7229.28,-4836.54"/>
<polygon fill="black" stroke="black" points="7232.79,-4836.49 7229.92,-4826.29 7225.8,-4836.05 7232.79,-4836.49"/>
</g>
<!-- return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);&#45;&gt;QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin) -->
<g id="edge58" class="edge"><title>return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);&#45;&gt;QuicConsumedData consumed_data = 
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;WritevDataInner(write_length, stream_bytes_written(), fin)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7282.98,-4825.67C7323.2,-4839.34 7379.81,-4860.24 7427,-4884 7548.8,-4945.33 7681.36,-5036.69 7747.84,-5084.4"/>
<polygon fill="black" stroke="black" points="7745.84,-5087.27 7756,-5090.28 7749.93,-5081.59 7745.84,-5087.27"/>
</g>
<!-- QuicConsumedData QuicSession::WritevData -->
<g id="node45" class="node"><title>QuicConsumedData QuicSession::WritevData</title>
<ellipse fill="gold" stroke="black" cx="7231" cy="-4514" rx="174.252" ry="18"/>
<text text-anchor="middle" x="7231" y="-4510.3" font-family="Times,serif" font-size="14.00">QuicConsumedData QuicSession::WritevData</text>
</g>
<!-- return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);&#45;&gt;QuicConsumedData QuicSession::WritevData -->
<g id="edge59" class="edge"><title>return session()&#45;&gt;WritevData(this, id(), write_length, offset, state);&#45;&gt;QuicConsumedData QuicSession::WritevData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7231,-4779.47C7231,-4723.74 7231,-4598.14 7231,-4542.46"/>
<polygon fill="black" stroke="black" points="7227.5,-4779.61 7231,-4789.61 7234.5,-4779.61 7227.5,-4779.61"/>
<polygon fill="black" stroke="black" points="7234.5,-4542.3 7231,-4532.3 7227.5,-4542.3 7234.5,-4542.3"/>
</g>
<!-- if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream()) -->
<g id="node47" class="node"><title>if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())</title>
<polygon fill="none" stroke="black" points="7071,-4224 6699.99,-4206 7071,-4188 7442.01,-4206 7071,-4224"/>
<text text-anchor="middle" x="7071" y="-4202.3" font-family="Times,serif" font-size="14.00">if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())</text>
</g>
<!-- QuicConsumedData QuicSession::WritevData&#45;&gt;if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream()) -->
<g id="edge60" class="edge"><title>QuicConsumedData QuicSession::WritevData&#45;&gt;if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7240.81,-4495.97C7264.59,-4452.18 7319.49,-4334.09 7265,-4262 7251.97,-4244.77 7206.42,-4231.37 7162.73,-4222.11"/>
<polygon fill="black" stroke="black" points="7163.36,-4218.67 7152.86,-4220.08 7161.95,-4225.52 7163.36,-4218.67"/>
</g>
<!-- if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId) -->
<g id="node46" class="node"><title>if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)</title>
<polygon fill="none" stroke="black" points="6840,-4095 6529.49,-4077 6840,-4059 7150.51,-4077 6840,-4095"/>
<text text-anchor="middle" x="6840" y="-4073.3" font-family="Times,serif" font-size="14.00">if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)</text>
</g>
<!-- if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)&#45;&gt;QuicConsumedData QuicSession::WritevData -->
<g id="edge63" class="edge"><title>if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)&#45;&gt;QuicConsumedData QuicSession::WritevData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6739.37,-4089.2C6643.76,-4102.15 6509.96,-4127.12 6478,-4168 6457.2,-4194.61 6458.54,-4216.39 6478,-4244 6609.26,-4430.27 6881.77,-4488.26 7060.44,-4505.9"/>
<polygon fill="black" stroke="black" points="7060.18,-4509.39 7070.47,-4506.86 7060.85,-4502.42 7060.18,-4509.39"/>
<text text-anchor="middle" x="6584.5" y="-4202.3" font-family="Times,serif" font-size="14.00">Y &#160;return QuicConsumedData(0, false)</text>
</g>
<!-- QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state) -->
<g id="node48" class="node"><title>QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)</title>
<ellipse fill="none" stroke="black" cx="6840" cy="-3828" rx="260.323" ry="26.7407"/>
<text text-anchor="middle" x="6840" y="-3831.8" font-family="Times,serif" font-size="14.00">QuicConsumedData data = </text>
<text text-anchor="middle" x="6840" y="-3816.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)</text>
</g>
<!-- if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)&#45;&gt;QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state) -->
<g id="edge64" class="edge"><title>if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)&#45;&gt;QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)</title>
<path fill="none" stroke="black" d="M6840,-4058.63C6840,-4018.59 6840,-3919.09 6840,-3865.14"/>
<polygon fill="black" stroke="black" points="6843.5,-3864.99 6840,-3854.99 6836.5,-3864.99 6843.5,-3864.99"/>
<text text-anchor="middle" x="6845" y="-4009.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())&#45;&gt;QuicConsumedData QuicSession::WritevData -->
<g id="edge61" class="edge"><title>if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())&#45;&gt;QuicConsumedData QuicSession::WritevData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7059.36,-4223.7C7050.79,-4238.12 7041.64,-4259.5 7048,-4278 7078.91,-4368.01 7159.96,-4450.06 7203.08,-4489.07"/>
<polygon fill="black" stroke="black" points="7200.88,-4491.8 7210.67,-4495.85 7205.54,-4486.58 7200.88,-4491.8"/>
<text text-anchor="middle" x="7154.5" y="-4266.3" font-family="Times,serif" font-size="14.00">Y &#160;return QuicConsumedData(0, false)</text>
</g>
<!-- if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())&#45;&gt;if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId) -->
<g id="edge62" class="edge"><title>if (id == kCryptoStreamId &amp;&amp; stream != GetMutableCryptoStream())&#45;&gt;if (!IsEncryptionEstablished() &amp;&amp; id != kCryptoStreamId)</title>
<path fill="none" stroke="black" d="M7042.21,-4189.17C7000.46,-4166.22 6923.08,-4123.68 6877.1,-4098.4"/>
<polygon fill="black" stroke="black" points="6878.52,-4095.18 6868.07,-4093.43 6875.14,-4101.32 6878.52,-4095.18"/>
<text text-anchor="middle" x="6975" y="-4138.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- QuicSession::WritevData return data; -->
<g id="node49" class="node"><title>QuicSession::WritevData return data;</title>
<ellipse fill="none" stroke="black" cx="7118" cy="-3584" rx="143.456" ry="18"/>
<text text-anchor="middle" x="7118" y="-3580.3" font-family="Times,serif" font-size="14.00">QuicSession::WritevData return data;</text>
</g>
<!-- QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)&#45;&gt;QuicSession::WritevData return data; -->
<g id="edge65" class="edge"><title>QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)&#45;&gt;QuicSession::WritevData return data;</title>
<path fill="none" stroke="black" d="M6869.75,-3801.1C6924,-3753.88 7038.22,-3654.45 7090.64,-3608.82"/>
<polygon fill="black" stroke="black" points="7093.26,-3611.17 7098.51,-3601.97 7088.67,-3605.89 7093.26,-3611.17"/>
</g>
<!-- QuicConnection::SendStreamData -->
<g id="node51" class="node"><title>QuicConnection::SendStreamData</title>
<ellipse fill="none" stroke="black" cx="6195" cy="-3584" rx="132.382" ry="18"/>
<text text-anchor="middle" x="6195" y="-3580.3" font-family="Times,serif" font-size="14.00">QuicConnection::SendStreamData</text>
</g>
<!-- QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)&#45;&gt;QuicConnection::SendStreamData -->
<g id="edge67" class="edge"><title>QuicConsumedData data = 
 &#160;&#160;&#160;connection_&#45;&gt;SendStreamData(id, write_length, offset, state)&#45;&gt;QuicConnection::SendStreamData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6745.92,-3799.51C6663.99,-3774.79 6542.45,-3736.29 6439,-3696 6366.84,-3667.9 6285.39,-3629.43 6237.22,-3605.94"/>
<polygon fill="black" stroke="black" points="6745.13,-3802.92 6755.71,-3802.45 6747.15,-3796.22 6745.13,-3802.92"/>
<polygon fill="black" stroke="black" points="6238.57,-3602.71 6228.04,-3601.46 6235.49,-3608.99 6238.57,-3602.71"/>
</g>
<!-- QuicSession::WritevData return data;&#45;&gt;QuicConsumedData QuicSession::WritevData -->
<g id="edge66" class="edge"><title>QuicSession::WritevData return data;&#45;&gt;QuicConsumedData QuicSession::WritevData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M7184.54,-3599.95C7284.29,-3626.73 7461,-3693.09 7461,-3827 7461,-4207 7461,-4207 7461,-4207 7461,-4335.8 7329.19,-4444.95 7265.14,-4490.39"/>
<polygon fill="black" stroke="black" points="7263.13,-4487.53 7256.94,-4496.13 7267.14,-4493.27 7263.13,-4487.53"/>
</g>
<!-- if (state == NO_FIN &amp;&amp; write_length == 0) -->
<g id="node50" class="node"><title>if (state == NO_FIN &amp;&amp; write_length == 0)</title>
<polygon fill="none" stroke="black" points="6177,-4532 5935.39,-4514 6177,-4496 6418.61,-4514 6177,-4532"/>
<text text-anchor="middle" x="6177" y="-4510.3" font-family="Times,serif" font-size="14.00">if (state == NO_FIN &amp;&amp; write_length == 0)</text>
</g>
<!-- if (state == NO_FIN &amp;&amp; write_length == 0)&#45;&gt;QuicConnection::SendStreamData -->
<g id="edge69" class="edge"><title>if (state == NO_FIN &amp;&amp; write_length == 0)&#45;&gt;QuicConnection::SendStreamData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6180.48,-4496.17C6189.69,-4450.11 6214,-4318.04 6214,-4207 6214,-4207 6214,-4207 6214,-3827 6214,-3748.94 6204.05,-3657.15 6198.55,-3612.36"/>
<polygon fill="black" stroke="black" points="6202.01,-3611.76 6197.29,-3602.28 6195.06,-3612.63 6202.01,-3611.76"/>
<text text-anchor="middle" x="6320.5" y="-4073.3" font-family="Times,serif" font-size="14.00">Y return QuicConsumedData(0, false);</text>
</g>
<!-- ScopedRetransmissionScheduler alarm_delayer(this) -->
<g id="node52" class="node"><title>ScopedRetransmissionScheduler alarm_delayer(this)</title>
<ellipse fill="none" stroke="black" cx="5950" cy="-4206" rx="198.349" ry="18"/>
<text text-anchor="middle" x="5950" y="-4202.3" font-family="Times,serif" font-size="14.00">ScopedRetransmissionScheduler alarm_delayer(this)</text>
</g>
<!-- if (state == NO_FIN &amp;&amp; write_length == 0)&#45;&gt;ScopedRetransmissionScheduler alarm_delayer(this) -->
<g id="edge70" class="edge"><title>if (state == NO_FIN &amp;&amp; write_length == 0)&#45;&gt;ScopedRetransmissionScheduler alarm_delayer(this)</title>
<path fill="none" stroke="black" d="M6164.8,-4496.55C6127.4,-4446.14 6014.23,-4293.59 5968.99,-4232.6"/>
<polygon fill="black" stroke="black" points="5971.59,-4230.23 5962.82,-4224.29 5965.97,-4234.4 5971.59,-4230.23"/>
<text text-anchor="middle" x="6005" y="-4266.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- QuicConnection::SendStreamData&#45;&gt;if (state == NO_FIN &amp;&amp; write_length == 0) -->
<g id="edge68" class="edge"><title>QuicConnection::SendStreamData&#45;&gt;if (state == NO_FIN &amp;&amp; write_length == 0)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M6192.83,-3602.28C6188.04,-3641.93 6177,-3742.53 6177,-3827 6177,-4207 6177,-4207 6177,-4207 6177,-4309.88 6177,-4432.22 6177,-4485.7"/>
<polygon fill="black" stroke="black" points="6173.5,-4485.75 6177,-4495.75 6180.5,-4485.75 6173.5,-4485.75"/>
</g>
<!-- ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING) -->
<g id="node53" class="node"><title>ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)</title>
<ellipse fill="none" stroke="black" cx="5921" cy="-4077" rx="237.344" ry="18"/>
<text text-anchor="middle" x="5921" y="-4073.3" font-family="Times,serif" font-size="14.00">ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)</text>
</g>
<!-- ScopedRetransmissionScheduler alarm_delayer(this)&#45;&gt;ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING) -->
<g id="edge71" class="edge"><title>ScopedRetransmissionScheduler alarm_delayer(this)&#45;&gt;ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)</title>
<path fill="none" stroke="black" d="M5946.09,-4187.87C5941.25,-4166.66 5932.94,-4130.28 5927.22,-4105.23"/>
<polygon fill="black" stroke="black" points="5930.58,-4104.23 5924.94,-4095.26 5923.76,-4105.79 5930.58,-4104.23"/>
</g>
<!-- packet_generator_.ConsumeData(id, write_length, offset, state) -->
<g id="node54" class="node"><title>packet_generator_.ConsumeData(id, write_length, offset, state)</title>
<ellipse fill="none" stroke="black" cx="5920" cy="-3828" rx="235.394" ry="18"/>
<text text-anchor="middle" x="5920" y="-3824.3" font-family="Times,serif" font-size="14.00">packet_generator_.ConsumeData(id, write_length, offset, state)</text>
</g>
<!-- ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)&#45;&gt;packet_generator_.ConsumeData(id, write_length, offset, state) -->
<g id="edge72" class="edge"><title>ScopedPacketFlusher flusher(this, SEND_ACK_IF_PENDING)&#45;&gt;packet_generator_.ConsumeData(id, write_length, offset, state)</title>
<path fill="none" stroke="black" d="M5920.93,-4058.63C5920.76,-4016.28 5920.32,-3907.42 5920.11,-3856.29"/>
<polygon fill="black" stroke="black" points="5923.61,-3856.01 5920.07,-3846.02 5916.61,-3856.04 5923.61,-3856.01"/>
</g>
<!-- packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicConnection::SendStreamData -->
<g id="edge73" class="edge"><title>packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicConnection::SendStreamData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5939.34,-3809.98C5987.46,-3767.63 6112.71,-3657.42 6168.04,-3608.72"/>
<polygon fill="black" stroke="black" points="6170.49,-3611.23 6175.68,-3602 6165.86,-3605.98 6170.49,-3611.23"/>
</g>
<!-- QuicPacketGenerator::ConsumeData -->
<g id="node58" class="node"><title>QuicPacketGenerator::ConsumeData</title>
<ellipse fill="none" stroke="black" cx="4939" cy="-3584" rx="141.531" ry="18"/>
<text text-anchor="middle" x="4939" y="-3580.3" font-family="Times,serif" font-size="14.00">QuicPacketGenerator::ConsumeData</text>
</g>
<!-- packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicPacketGenerator::ConsumeData -->
<g id="edge74" class="edge"><title>packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicPacketGenerator::ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5861.8,-3806.82C5809.99,-3787.78 5732.14,-3759.35 5663,-3740 5436.47,-3676.6 5164.19,-3625.42 5027.02,-3600.84"/>
<polygon fill="black" stroke="black" points="5860.89,-3810.22 5871.48,-3810.38 5863.31,-3803.65 5860.89,-3810.22"/>
<polygon fill="black" stroke="black" points="5027.44,-3597.36 5016.98,-3599.04 5026.21,-3604.25 5027.44,-3597.36"/>
</g>
<!-- packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicPacketGenerator::ConsumeData -->
<g id="edge75" class="edge"><title>packet_generator_.ConsumeData(id, write_length, offset, state)&#45;&gt;QuicPacketGenerator::ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5883.61,-3810.04C5837.06,-3791.12 5754.16,-3760.48 5681,-3740 5452.1,-3675.94 5176.49,-3624.35 5034.22,-3600.08"/>
<polygon fill="black" stroke="black" points="5034.66,-3596.6 5024.21,-3598.38 5033.48,-3603.5 5034.66,-3596.6"/>
</g>
<!-- // We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？ -->
<g id="node55" class="node"><title>// We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？</title>
<ellipse fill="lightgrey" stroke="black" cx="4829" cy="-4514" rx="326.525" ry="69.0935"/>
<text text-anchor="middle" x="4829" y="-4547.8" font-family="Times,serif" font-size="14.00">// We determine if we can enter the fast path before executing</text>
<text text-anchor="middle" x="4829" y="-4532.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;// the slow path loop.</text>
<text text-anchor="middle" x="4829" y="-4517.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;</text>
<text text-anchor="middle" x="4829" y="-4502.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;</text>
<text text-anchor="middle" x="4829" y="-4487.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;</text>
<text text-anchor="middle" x="4829" y="-4472.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;//快慢路径的区别是什么？</text>
</g>
<!--  &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE)) -->
<g id="node56" class="node"><title> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))</title>
<ellipse fill="lightgrey" stroke="black" cx="4791" cy="-4206" rx="332.01" ry="37.4533"/>
<text text-anchor="middle" x="4791" y="-4217.3" font-family="Times,serif" font-size="14.00"> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(</text>
<text text-anchor="middle" x="4791" y="-4202.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,</text>
<text text-anchor="middle" x="4791" y="-4187.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))</text>
</g>
<!-- // We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？&#45;&gt; &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE)) -->
<g id="edge80" class="edge"><title>// We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？&#45;&gt; &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))</title>
<path fill="none" stroke="black" d="M4820.52,-4444.71C4813.3,-4386.54 4803.11,-4304.51 4796.79,-4253.61"/>
<polygon fill="black" stroke="black" points="4800.24,-4253.04 4795.54,-4243.55 4793.3,-4253.9 4800.24,-4253.04"/>
</g>
<!-- packet_creator_.ConsumeData -->
<g id="node57" class="node"><title>packet_creator_.ConsumeData</title>
<polygon fill="gold" stroke="black" points="4979,-4095 4809.81,-4077 4979,-4059 5148.19,-4077 4979,-4095"/>
<text text-anchor="middle" x="4979" y="-4073.3" font-family="Times,serif" font-size="14.00">packet_creator_.ConsumeData</text>
</g>
<!--  &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt;packet_creator_.ConsumeData -->
<g id="edge81" class="edge"><title> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt;packet_creator_.ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4844.37,-4168.95C4878.07,-4146.18 4920.39,-4117.59 4948.49,-4098.61"/>
<polygon fill="black" stroke="black" points="4950.76,-4101.3 4957.09,-4092.8 4946.84,-4095.5 4950.76,-4101.3"/>
</g>
<!--  &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed); -->
<g id="node64" class="node"><title> &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);</title>
<ellipse fill="none" stroke="black" cx="4471" cy="-4077" rx="300.281" ry="37.4533"/>
<text text-anchor="middle" x="4471" y="-4088.3" font-family="Times,serif" font-size="14.00"> &#160;if (run_fast_path) {</text>
<text text-anchor="middle" x="4471" y="-4073.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,</text>
<text text-anchor="middle" x="4471" y="-4058.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);</text>
</g>
<!--  &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt; &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed); -->
<g id="edge86" class="edge"><title> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt; &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);</title>
<path fill="none" stroke="black" d="M4702.29,-4169.79C4660.76,-4153.31 4611.18,-4133.63 4568.59,-4116.73"/>
<polygon fill="black" stroke="black" points="4569.64,-4113.38 4559.05,-4112.95 4567.06,-4119.89 4569.64,-4113.38"/>
</g>
<!-- bool QuicConnection::ShouldGeneratePacket -->
<g id="node69" class="node"><title>bool QuicConnection::ShouldGeneratePacket</title>
<ellipse fill="none" stroke="black" cx="3244" cy="-4077" rx="170.402" ry="18"/>
<text text-anchor="middle" x="3244" y="-4073.3" font-family="Times,serif" font-size="14.00">bool QuicConnection::ShouldGeneratePacket</text>
</g>
<!--  &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt;bool QuicConnection::ShouldGeneratePacket -->
<g id="edge93" class="edge"><title> &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))&#45;&gt;bool QuicConnection::ShouldGeneratePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4516.01,-4182.42C4184.36,-4155.2 3639.7,-4110.48 3384.36,-4089.52"/>
<polygon fill="black" stroke="black" points="4516.13,-4185.95 4526.38,-4183.28 4516.7,-4178.97 4516.13,-4185.95"/>
<polygon fill="black" stroke="black" points="3384.54,-4086.03 3374.29,-4088.7 3383.97,-4093 3384.54,-4086.03"/>
</g>
<!-- packet_creator_.ConsumeData&#45;&gt;QuicPacketGenerator::ConsumeData -->
<g id="edge82" class="edge"><title>packet_creator_.ConsumeData&#45;&gt;QuicPacketGenerator::ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4972.12,-4059.71C4965.85,-4043.98 4956.97,-4019.32 4953,-3997 4939.81,-3922.8 4938.85,-3691.87 4938.92,-3612.28"/>
<polygon fill="black" stroke="black" points="4942.42,-3612.09 4938.94,-3602.09 4935.42,-3612.08 4942.42,-3612.09"/>
<text text-anchor="middle" x="5057.5" y="-3824.3" font-family="Times,serif" font-size="14.00">N return QuicConsumedData(0, false)</text>
</g>
<!-- packet_creator_.Flush() -->
<g id="node62" class="node"><title>packet_creator_.Flush()</title>
<ellipse fill="none" stroke="black" cx="4454" cy="-3828" rx="94.338" ry="18"/>
<text text-anchor="middle" x="4454" y="-3824.3" font-family="Times,serif" font-size="14.00">packet_creator_.Flush()</text>
</g>
<!-- packet_creator_.ConsumeData&#45;&gt;packet_creator_.Flush() -->
<g id="edge83" class="edge"><title>packet_creator_.ConsumeData&#45;&gt;packet_creator_.Flush()</title>
<path fill="none" stroke="black" d="M4930.46,-4064.09C4864.93,-4048.41 4744.32,-4020.96 4640,-4005 4621.9,-4002.23 4573.54,-4006.68 4558,-3997 4505.47,-3964.3 4475.33,-3894.27 4462.11,-3855.76"/>
<polygon fill="black" stroke="black" points="4465.43,-3854.63 4458.97,-3846.23 4458.78,-3856.83 4465.43,-3854.63"/>
<text text-anchor="middle" x="4730" y="-4009.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- bool QuicPacketCreator::ConsumeData(QuicStreamId id,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame) -->
<g id="node94" class="node"><title>bool QuicPacketCreator::ConsumeData(QuicStreamId id,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame)</title>
<ellipse fill="none" stroke="black" cx="5426" cy="-3828" rx="234.079" ry="79.8063"/>
<text text-anchor="middle" x="5426" y="-3869.3" font-family="Times,serif" font-size="14.00">bool QuicPacketCreator::ConsumeData(QuicStreamId id,</text>
<text text-anchor="middle" x="5426" y="-3854.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,</text>
<text text-anchor="middle" x="5426" y="-3839.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,</text>
<text text-anchor="middle" x="5426" y="-3824.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,</text>
<text text-anchor="middle" x="5426" y="-3809.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,</text>
<text text-anchor="middle" x="5426" y="-3794.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,</text>
<text text-anchor="middle" x="5426" y="-3779.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame)</text>
</g>
<!-- packet_creator_.ConsumeData&#45;&gt;bool QuicPacketCreator::ConsumeData(QuicStreamId id,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame) -->
<g id="edge124" class="edge"><title>packet_creator_.ConsumeData&#45;&gt;bool QuicPacketCreator::ConsumeData(QuicStreamId id,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t write_length,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;size_t iov_offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicStreamOffset offset,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool fin,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool needs_full_padding,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;QuicFrame* frame)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M5028.68,-4059.98C5070.22,-4045.77 5130.45,-4023.23 5180,-3997 5228.95,-3971.09 5280,-3937.45 5322.82,-3907.09"/>
<polygon fill="black" stroke="black" points="5027.42,-4056.71 5019.07,-4063.23 5029.66,-4063.34 5027.42,-4056.71"/>
<polygon fill="black" stroke="black" points="5324.89,-3909.92 5331,-3901.27 5320.82,-3904.22 5324.89,-3909.92"/>
</g>
<!-- const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush); -->
<g id="node59" class="node"><title>const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush);</title>
<ellipse fill="none" stroke="black" cx="4833" cy="-3395" rx="315.055" ry="37.4533"/>
<text text-anchor="middle" x="4833" y="-3406.3" font-family="Times,serif" font-size="14.00">const bool flush =</text>
<text text-anchor="middle" x="4833" y="-3391.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();</text>
<text text-anchor="middle" x="4833" y="-3376.3" font-family="Times,serif" font-size="14.00"> &#160;SendQueuedFrames(flush);</text>
</g>
<!-- QuicPacketGenerator::ConsumeData&#45;&gt;const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush); -->
<g id="edge76" class="edge"><title>QuicPacketGenerator::ConsumeData&#45;&gt;const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush);</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4929.22,-3565.74C4913.35,-3537.75 4881.49,-3481.55 4858.78,-3441.49"/>
<polygon fill="black" stroke="black" points="4861.78,-3439.67 4853.8,-3432.69 4855.69,-3443.12 4861.78,-3439.67"/>
</g>
<!--  &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();} -->
<g id="node60" class="node"><title> &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();}</title>
<ellipse fill="none" stroke="black" cx="4841" cy="-3266" rx="304.145" ry="26.7407"/>
<text text-anchor="middle" x="4841" y="-3269.8" font-family="Times,serif" font-size="14.00"> &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {</text>
<text text-anchor="middle" x="4841" y="-3254.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;packet_creator_.Flush();}</text>
</g>
<!-- const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush);&#45;&gt; &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();} -->
<g id="edge77" class="edge"><title>const bool flush =
 &#160;&#160;&#160;&#160;&#160;has_handshake &amp;&amp; packet_creator_.HasPendingRetransmittableFrames();
 &#160;SendQueuedFrames(flush);&#45;&gt; &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();}</title>
<path fill="none" stroke="black" d="M4835.31,-3357.27C4836.38,-3340.28 4837.65,-3320.17 4838.72,-3303.24"/>
<polygon fill="black" stroke="black" points="4842.22,-3303.37 4839.35,-3293.17 4835.23,-3302.93 4842.22,-3303.37"/>
</g>
<!-- if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);} -->
<g id="node61" class="node"><title>if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);}</title>
<ellipse fill="none" stroke="black" cx="4960" cy="-3131" rx="167.376" ry="26.7407"/>
<text text-anchor="middle" x="4960" y="-3134.8" font-family="Times,serif" font-size="14.00">if (!fin &amp;&amp; (write_length == 0)) {</text>
<text text-anchor="middle" x="4960" y="-3119.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return QuicConsumedData(0, false);}</text>
</g>
<!--  &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();}&#45;&gt;if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);} -->
<g id="edge78" class="edge"><title> &#160;if (!packet_creator_.HasRoomForStreamFrame(id, offset, write_length)) {
 &#160;&#160;&#160;packet_creator_.Flush();}&#45;&gt;if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);}</title>
<path fill="none" stroke="black" d="M4864.23,-3239.04C4882.98,-3218.08 4909.52,-3188.42 4929.9,-3165.64"/>
<polygon fill="black" stroke="black" points="4932.77,-3167.68 4936.83,-3157.89 4927.56,-3163.01 4932.77,-3167.68"/>
</g>
<!-- if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);}&#45;&gt;// We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？ -->
<g id="edge79" class="edge"><title>if (!fin &amp;&amp; (write_length == 0)) {
 &#160;&#160;&#160;return QuicConsumedData(0, false);}&#45;&gt;// We determine if we can enter the fast path before executing
 &#160;&#160;&#160;&#160;// the slow path loop.
 &#160;&#160;&#160;bool run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;
 &#160;&#160;&#160;//快慢路径的区别是什么？</title>
<path fill="none" stroke="black" d="M5052.3,-3153.46C5107.5,-3172.38 5167,-3206.37 5167,-3265 5167,-4207 5167,-4207 5167,-4207 5167,-4315.4 5070.28,-4395.38 4980.32,-4446.34"/>
<polygon fill="black" stroke="black" points="4978.39,-4443.41 4971.36,-4451.33 4981.8,-4449.52 4978.39,-4443.41"/>
</g>
<!-- run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize; -->
<g id="node63" class="node"><title>run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;</title>
<ellipse fill="none" stroke="black" cx="4466" cy="-3584" rx="295.917" ry="37.4533"/>
<text text-anchor="middle" x="4466" y="-3595.3" font-family="Times,serif" font-size="14.00">run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;</text>
<text text-anchor="middle" x="4466" y="-3580.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;</text>
<text text-anchor="middle" x="4466" y="-3565.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;</text>
</g>
<!-- packet_creator_.Flush()&#45;&gt;run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize; -->
<g id="edge84" class="edge"><title>packet_creator_.Flush()&#45;&gt;run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;</title>
<path fill="none" stroke="black" d="M4454.84,-3809.98C4456.66,-3773.39 4460.98,-3686.15 4463.68,-3631.69"/>
<polygon fill="black" stroke="black" points="4467.19,-3631.75 4464.19,-3621.59 4460.19,-3631.4 4467.19,-3631.75"/>
</g>
<!-- void QuicPacketCreator::Flush() -->
<g id="node96" class="node"><title>void QuicPacketCreator::Flush()</title>
<ellipse fill="none" stroke="black" cx="2849" cy="-3584" rx="126.133" ry="18"/>
<text text-anchor="middle" x="2849" y="-3580.3" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::Flush()</text>
</g>
<!-- packet_creator_.Flush()&#45;&gt;void QuicPacketCreator::Flush() -->
<g id="edge125" class="edge"><title>packet_creator_.Flush()&#45;&gt;void QuicPacketCreator::Flush()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4403.89,-3808.14C4345.72,-3787.23 4246.44,-3754.52 4158,-3740 3914.62,-3700.03 3286.49,-3762.54 3049,-3696 2984.04,-3677.8 2917.22,-3634.87 2879.62,-3608.05"/>
<polygon fill="black" stroke="black" points="4402.97,-3811.53 4413.56,-3811.65 4405.35,-3804.95 4402.97,-3811.53"/>
<polygon fill="black" stroke="black" points="2881.31,-3604.96 2871.15,-3601.94 2877.21,-3610.63 2881.31,-3604.96"/>
</g>
<!-- run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;&#45;&gt; &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE)) -->
<g id="edge85" class="edge"><title>run_fast_path = !has_handshake &amp;&amp; state != FIN_AND_PADDING &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!HasQueuedFrames() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;write_length &#45; total_bytes_consumed &gt; kMaxPacketSize;&#45;&gt; &#160;while (!run_fast_path &amp;&amp; delegate_&#45;&gt;ShouldGeneratePacket(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;has_handshake ? IS_HANDSHAKE : NOT_HANDSHAKE))</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4427.88,-3621.37C4400.32,-3650.47 4365.33,-3693.92 4350,-3740 4313.94,-3848.38 4273.26,-3912.4 4350,-3997 4366.13,-4014.78 4763.29,-4021.76 4780,-4039 4795.96,-4055.46 4796.35,-4115.36 4794.35,-4158.48"/>
<polygon fill="black" stroke="black" points="4790.85,-4158.33 4793.83,-4168.49 4797.84,-4158.69 4790.85,-4158.33"/>
</g>
<!--  &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);} -->
<g id="node65" class="node"><title> &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}</title>
<ellipse fill="none" stroke="black" cx="4735" cy="-3828" rx="167.938" ry="26.7407"/>
<text text-anchor="middle" x="4735" y="-3831.8" font-family="Times,serif" font-size="14.00"> &#160;if (has_handshake) {</text>
<text text-anchor="middle" x="4735" y="-3816.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}</text>
</g>
<!--  &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);&#45;&gt; &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);} -->
<g id="edge87" class="edge"><title> &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);&#45;&gt; &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}</title>
<path fill="none" stroke="black" d="M4510.92,-4039.53C4525.47,-4026.19 4542.01,-4010.95 4557,-3997 4607.23,-3950.23 4664.93,-3895.6 4700.68,-3861.65"/>
<polygon fill="black" stroke="black" points="4703.13,-3864.16 4707.97,-3854.73 4698.31,-3859.08 4703.13,-3864.16"/>
</g>
<!-- QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath -->
<g id="node66" class="node"><title>QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath</title>
<ellipse fill="gold" stroke="black" cx="3900" cy="-3828" rx="245.517" ry="18"/>
<text text-anchor="middle" x="3900" y="-3824.3" font-family="Times,serif" font-size="14.00">QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath</text>
</g>
<!--  &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);&#45;&gt;QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath -->
<g id="edge89" class="edge"><title> &#160;if (run_fast_path) {
 &#160;&#160;&#160;return ConsumeDataFastPath(id, write_length, offset, state != NO_FIN,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;total_bytes_consumed);&#45;&gt;QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4297.72,-4043.07C4251.31,-4031.36 4201.87,-4016.18 4158,-3997 4068.1,-3957.69 3974.46,-3888.37 3928.68,-3852.29"/>
<polygon fill="black" stroke="black" points="4297.03,-4046.5 4307.58,-4045.51 4298.71,-4039.71 4297.03,-4046.5"/>
<polygon fill="black" stroke="black" points="3930.71,-3849.43 3920.7,-3845.96 3926.35,-3854.92 3930.71,-3849.43"/>
</g>
<!--  &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}&#45;&gt;QuicPacketGenerator::ConsumeData -->
<g id="edge88" class="edge"><title> &#160;if (has_handshake) {
 &#160;&#160;&#160;SendQueuedFrames(/*flush=*/true);}&#45;&gt;QuicPacketGenerator::ConsumeData</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4653.41,-3804.45C4595.13,-3784.44 4532.78,-3752.48 4568,-3714 4598.58,-3680.59 4728.25,-3710.94 4771,-3696 4826.14,-3676.73 4880.86,-3635.34 4912.23,-3608.9"/>
<polygon fill="black" stroke="black" points="4914.74,-3611.36 4920.06,-3602.2 4910.18,-3606.04 4914.74,-3611.36"/>
<text text-anchor="middle" x="4751" y="-3718.3" font-family="Times,serif" font-size="14.00">return QuicConsumedData(total_bytes_consumed, fin_consumed);</text>
</g>
<!--  &#160;while (total_bytes_consumed &lt; write_length &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delegate_&#45;&gt;ShouldGeneratePacket(HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NOT_HANDSHAKE)) {
 &#160;&#160;&#160;// Serialize and encrypt the packet.
 &#160;&#160;&#160;size_t bytes_consumed = 0;
 &#160;&#160;&#160;packet_creator_.CreateAndSerializeStreamFrame(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;id, write_length, total_bytes_consumed, offset + total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;fin, &amp;bytes_consumed);
 &#160;&#160;&#160;total_bytes_consumed += bytes_consumed;
 &#160;} -->
<g id="node67" class="node"><title> &#160;while (total_bytes_consumed &lt; write_length &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delegate_&#45;&gt;ShouldGeneratePacket(HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NOT_HANDSHAKE)) {
 &#160;&#160;&#160;// Serialize and encrypt the packet.
 &#160;&#160;&#160;size_t bytes_consumed = 0;
 &#160;&#160;&#160;packet_creator_.CreateAndSerializeStreamFrame(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;id, write_length, total_bytes_consumed, offset + total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;fin, &amp;bytes_consumed);
 &#160;&#160;&#160;total_bytes_consumed += bytes_consumed;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3804" cy="-3584" rx="321.6" ry="111.946"/>
<text text-anchor="middle" x="3804" y="-3647.8" font-family="Times,serif" font-size="14.00"> &#160;while (total_bytes_consumed &lt; write_length &amp;&amp;</text>
<text text-anchor="middle" x="3804" y="-3632.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delegate_&#45;&gt;ShouldGeneratePacket(HAS_RETRANSMITTABLE_DATA,</text>
<text text-anchor="middle" x="3804" y="-3617.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NOT_HANDSHAKE)) {</text>
<text text-anchor="middle" x="3804" y="-3602.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Serialize and encrypt the packet.</text>
<text text-anchor="middle" x="3804" y="-3587.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;size_t bytes_consumed = 0;</text>
<text text-anchor="middle" x="3804" y="-3572.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;packet_creator_.CreateAndSerializeStreamFrame(</text>
<text text-anchor="middle" x="3804" y="-3557.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;id, write_length, total_bytes_consumed, offset + total_bytes_consumed,</text>
<text text-anchor="middle" x="3804" y="-3542.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;fin, &amp;bytes_consumed);</text>
<text text-anchor="middle" x="3804" y="-3527.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;total_bytes_consumed += bytes_consumed;</text>
<text text-anchor="middle" x="3804" y="-3512.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath&#45;&gt; &#160;while (total_bytes_consumed &lt; write_length &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delegate_&#45;&gt;ShouldGeneratePacket(HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NOT_HANDSHAKE)) {
 &#160;&#160;&#160;// Serialize and encrypt the packet.
 &#160;&#160;&#160;size_t bytes_consumed = 0;
 &#160;&#160;&#160;packet_creator_.CreateAndSerializeStreamFrame(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;id, write_length, total_bytes_consumed, offset + total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;fin, &amp;bytes_consumed);
 &#160;&#160;&#160;total_bytes_consumed += bytes_consumed;
 &#160;} -->
<g id="edge90" class="edge"><title>QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath&#45;&gt; &#160;while (total_bytes_consumed &lt; write_length &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delegate_&#45;&gt;ShouldGeneratePacket(HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NOT_HANDSHAKE)) {
 &#160;&#160;&#160;// Serialize and encrypt the packet.
 &#160;&#160;&#160;size_t bytes_consumed = 0;
 &#160;&#160;&#160;packet_creator_.CreateAndSerializeStreamFrame(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;id, write_length, total_bytes_consumed, offset + total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;fin, &amp;bytes_consumed);
 &#160;&#160;&#160;total_bytes_consumed += bytes_consumed;
 &#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3893.25,-3809.98C3884.3,-3787.43 3867.72,-3745.62 3851.25,-3704.11"/>
<polygon fill="black" stroke="black" points="3854.46,-3702.72 3847.52,-3694.71 3847.96,-3705.3 3854.46,-3702.72"/>
</g>
<!--  &#160;return QuicConsumedData(total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fin &amp;&amp; (total_bytes_consumed == write_length)); -->
<g id="node68" class="node"><title> &#160;return QuicConsumedData(total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fin &amp;&amp; (total_bytes_consumed == write_length));</title>
<ellipse fill="none" stroke="black" cx="3837" cy="-3395" rx="275.158" ry="26.7407"/>
<text text-anchor="middle" x="3837" y="-3398.8" font-family="Times,serif" font-size="14.00"> &#160;return QuicConsumedData(total_bytes_consumed,</text>
<text text-anchor="middle" x="3837" y="-3383.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fin &amp;&amp; (total_bytes_consumed == write_length));</text>
</g>
<!--  &#160;while (total_bytes_consumed &lt; write_length &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delegate_&#45;&gt;ShouldGeneratePacket(HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NOT_HANDSHAKE)) {
 &#160;&#160;&#160;// Serialize and encrypt the packet.
 &#160;&#160;&#160;size_t bytes_consumed = 0;
 &#160;&#160;&#160;packet_creator_.CreateAndSerializeStreamFrame(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;id, write_length, total_bytes_consumed, offset + total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;fin, &amp;bytes_consumed);
 &#160;&#160;&#160;total_bytes_consumed += bytes_consumed;
 &#160;}&#45;&gt; &#160;return QuicConsumedData(total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fin &amp;&amp; (total_bytes_consumed == write_length)); -->
<g id="edge91" class="edge"><title> &#160;while (total_bytes_consumed &lt; write_length &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delegate_&#45;&gt;ShouldGeneratePacket(HAS_RETRANSMITTABLE_DATA,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NOT_HANDSHAKE)) {
 &#160;&#160;&#160;// Serialize and encrypt the packet.
 &#160;&#160;&#160;size_t bytes_consumed = 0;
 &#160;&#160;&#160;packet_creator_.CreateAndSerializeStreamFrame(
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;id, write_length, total_bytes_consumed, offset + total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;fin, &amp;bytes_consumed);
 &#160;&#160;&#160;total_bytes_consumed += bytes_consumed;
 &#160;}&#45;&gt; &#160;return QuicConsumedData(total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fin &amp;&amp; (total_bytes_consumed == write_length));</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3823.53,-3472.33C3826.09,-3457.81 3828.55,-3443.87 3830.65,-3431.96"/>
<polygon fill="black" stroke="black" points="3834.11,-3432.51 3832.4,-3422.06 3827.22,-3431.3 3834.11,-3432.51"/>
</g>
<!--  &#160;return QuicConsumedData(total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fin &amp;&amp; (total_bytes_consumed == write_length));&#45;&gt;QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath -->
<g id="edge92" class="edge"><title> &#160;return QuicConsumedData(total_bytes_consumed,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fin &amp;&amp; (total_bytes_consumed == write_length));&#45;&gt;QuicConsumedData QuicPacketGenerator::ConsumeDataFastPath</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3989.34,-3417.45C4052.31,-3429.73 4115.07,-3447.62 4134,-3472 4164.53,-3511.32 4159.17,-3653.06 4134,-3696 4099.85,-3754.26 4029.28,-3788.55 3974.53,-3807.34"/>
<polygon fill="black" stroke="black" points="3973.23,-3804.08 3964.85,-3810.55 3975.44,-3810.72 3973.23,-3804.08"/>
</g>
<!--  if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="node70" class="node"><title> if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="3248" cy="-3828" rx="166.316" ry="37.4533"/>
<text text-anchor="middle" x="3248" y="-3839.3" font-family="Times,serif" font-size="14.00"> if (handshake == IS_HANDSHAKE) {</text>
<text text-anchor="middle" x="3248" y="-3824.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3248" y="-3809.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- bool QuicConnection::ShouldGeneratePacket&#45;&gt; if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="edge94" class="edge"><title>bool QuicConnection::ShouldGeneratePacket&#45;&gt; if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3244.28,-4058.63C3244.89,-4021.18 3246.34,-3931.75 3247.24,-3876.19"/>
<polygon fill="black" stroke="black" points="3250.74,-3875.95 3247.4,-3865.9 3243.74,-3875.84 3250.74,-3875.95"/>
</g>
<!-- return CanWrite(retransmittable); -->
<g id="node71" class="node"><title>return CanWrite(retransmittable);</title>
<ellipse fill="none" stroke="black" cx="3191" cy="-3584" rx="129.483" ry="18"/>
<text text-anchor="middle" x="3191" y="-3580.3" font-family="Times,serif" font-size="14.00">return CanWrite(retransmittable);</text>
</g>
<!--  if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt;return CanWrite(retransmittable); -->
<g id="edge95" class="edge"><title> if (handshake == IS_HANDSHAKE) {
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt;return CanWrite(retransmittable);</title>
<path fill="none" stroke="black" d="M3239.4,-3790.51C3227.85,-3741.47 3207.59,-3655.45 3197.33,-3611.89"/>
<polygon fill="black" stroke="black" points="3200.71,-3610.96 3195.01,-3602.03 3193.9,-3612.57 3200.71,-3610.96"/>
</g>
<!-- return CanWrite(retransmittable);&#45;&gt;bool QuicConnection::ShouldGeneratePacket -->
<g id="edge96" class="edge"><title>return CanWrite(retransmittable);&#45;&gt;bool QuicConnection::ShouldGeneratePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3171.43,-3602.14C3143.06,-3628.45 3091.75,-3681.86 3072,-3740 3035.27,-3848.16 3010.35,-3900.84 3072,-3997 3091.29,-4027.09 3125.24,-4045.87 3157.9,-4057.52"/>
<polygon fill="black" stroke="black" points="3156.93,-4060.89 3167.52,-4060.77 3159.17,-4054.25 3156.93,-4060.89"/>
</g>
<!-- bool QuicConnection::CanWrite -->
<g id="node72" class="node"><title>bool QuicConnection::CanWrite</title>
<ellipse fill="gold" stroke="black" cx="3102" cy="-3395" rx="126.133" ry="18"/>
<text text-anchor="middle" x="3102" y="-3391.3" font-family="Times,serif" font-size="14.00">bool QuicConnection::CanWrite</text>
</g>
<!-- return CanWrite(retransmittable);&#45;&gt;bool QuicConnection::CanWrite -->
<g id="edge97" class="edge"><title>return CanWrite(retransmittable);&#45;&gt;bool QuicConnection::CanWrite</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3178.44,-3556.6C3161.51,-3521.04 3131.56,-3458.1 3114.61,-3422.49"/>
<polygon fill="black" stroke="black" points="3175.33,-3558.22 3182.79,-3565.74 3181.65,-3555.21 3175.33,-3558.22"/>
<polygon fill="black" stroke="black" points="3117.65,-3420.74 3110.19,-3413.22 3111.33,-3423.75 3117.65,-3420.74"/>
</g>
<!--  &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node73" class="node"><title> &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3102" cy="-3266" rx="85.9015" ry="37.4533"/>
<text text-anchor="middle" x="3102" y="-3277.3" font-family="Times,serif" font-size="14.00"> &#160;if (!connected_) {</text>
<text text-anchor="middle" x="3102" y="-3262.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3102" y="-3247.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- bool QuicConnection::CanWrite&#45;&gt; &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge98" class="edge"><title>bool QuicConnection::CanWrite&#45;&gt; &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M3102,-3376.87C3102,-3360.74 3102,-3335.83 3102,-3313.8"/>
<polygon fill="black" stroke="black" points="3105.5,-3313.6 3102,-3303.6 3098.5,-3313.6 3105.5,-3313.6"/>
</g>
<!--  &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="node74" class="node"><title> &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3102" cy="-3131" rx="356.073" ry="58.8803"/>
<text text-anchor="middle" x="3102" y="-3157.3" font-family="Times,serif" font-size="14.00"> &#160;if (session_decides_what_to_write() &amp;&amp;</text>
<text text-anchor="middle" x="3102" y="-3142.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { </text>
<text text-anchor="middle" x="3102" y="-3127.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.</text>
<text text-anchor="middle" x="3102" y="-3112.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3102" y="-3097.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="edge99" class="edge"><title> &#160;if (!connected_) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;}</title>
<path fill="none" stroke="black" d="M3102,-3228.31C3102,-3219.46 3102,-3209.73 3102,-3199.95"/>
<polygon fill="black" stroke="black" points="3105.5,-3199.79 3102,-3189.79 3098.5,-3199.79 3105.5,-3199.79"/>
</g>
<!--  &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} -->
<g id="node75" class="node"><title> &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3102" cy="-2922" rx="194.182" ry="111.946"/>
<text text-anchor="middle" x="3102" y="-2985.8" font-family="Times,serif" font-size="14.00"> &#160;if (add_to_blocked_list_if_writer_blocked_) {</text>
<text text-anchor="middle" x="3102" y="-2970.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (HandleWriteBlocked()) {</text>
<text text-anchor="middle" x="3102" y="-2955.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3102" y="-2940.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;&#160;</text>
<text text-anchor="middle" x="3102" y="-2925.8" font-family="Times,serif" font-size="14.00"> &#160;} else {</text>
<text text-anchor="middle" x="3102" y="-2910.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {</text>
<text text-anchor="middle" x="3102" y="-2895.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();</text>
<text text-anchor="middle" x="3102" y="-2880.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3102" y="-2865.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;&#160;</text>
<text text-anchor="middle" x="3102" y="-2850.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt; &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} -->
<g id="edge100" class="edge"><title> &#160;if (session_decides_what_to_write() &amp;&amp;
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.pending_timer_transmission_count() &gt; 0) { 
 &#160;&#160;&#160;// Force sending the retransmissions for HANDSHAKE, TLP, RTO, PROBING cases.
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt; &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;}</title>
<path fill="none" stroke="black" d="M3102,-3072.06C3102,-3063.19 3102,-3053.75 3102,-3044.11"/>
<polygon fill="black" stroke="black" points="3105.5,-3043.99 3102,-3033.99 3098.5,-3043.99 3105.5,-3043.99"/>
</g>
<!-- // Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node76" class="node"><title>// Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3102" cy="-2681" rx="255.459" ry="90.5193"/>
<text text-anchor="middle" x="3102" y="-2729.8" font-family="Times,serif" font-size="14.00">// Allow acks to be sent immediately.</text>
<text text-anchor="middle" x="3102" y="-2714.8" font-family="Times,serif" font-size="14.00"> &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {</text>
<text text-anchor="middle" x="3102" y="-2699.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3102" y="-2684.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
<text text-anchor="middle" x="3102" y="-2669.8" font-family="Times,serif" font-size="14.00"> &#160;// If the send alarm is set, wait for it to fire.</text>
<text text-anchor="middle" x="3102" y="-2654.8" font-family="Times,serif" font-size="14.00"> &#160;if (send_alarm_&#45;&gt;IsSet()) {</text>
<text text-anchor="middle" x="3102" y="-2639.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3102" y="-2624.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;}&#45;&gt;// Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge101" class="edge"><title> &#160;if (add_to_blocked_list_if_writer_blocked_) {
 &#160;&#160;&#160;if (HandleWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;} else {
 &#160;&#160;&#160;if (writer_&#45;&gt;IsWriteBlocked()) {
 &#160;&#160;&#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;}&#45;&gt;// Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M3102,-2810.25C3102,-2800.74 3102,-2791.16 3102,-2781.75"/>
<polygon fill="black" stroke="black" points="3105.5,-2781.61 3102,-2771.61 3098.5,-2781.61 3105.5,-2781.61"/>
</g>
<!-- QuicTime now = clock_&#45;&gt;Now(); -->
<g id="node77" class="node"><title>QuicTime now = clock_&#45;&gt;Now();</title>
<ellipse fill="none" stroke="black" cx="3102" cy="-2387" rx="131.408" ry="18"/>
<text text-anchor="middle" x="3102" y="-2383.3" font-family="Times,serif" font-size="14.00">QuicTime now = clock_&#45;&gt;Now();</text>
</g>
<!-- // Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt;QuicTime now = clock_&#45;&gt;Now(); -->
<g id="edge102" class="edge"><title>// Allow acks to be sent immediately.
 &#160;if (retransmittable == NO_RETRANSMITTABLE_DATA) {
 &#160;&#160;&#160;return true;
 &#160;}
 &#160;// If the send alarm is set, wait for it to fire.
 &#160;if (send_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt;QuicTime now = clock_&#45;&gt;Now();</title>
<path fill="none" stroke="black" d="M3102,-2590.41C3102,-2530.18 3102,-2454.83 3102,-2415.22"/>
<polygon fill="black" stroke="black" points="3105.5,-2415.04 3102,-2405.04 3098.5,-2415.04 3105.5,-2415.04"/>
</g>
<!-- QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now) -->
<g id="node78" class="node"><title>QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)</title>
<ellipse fill="none" stroke="black" cx="3102" cy="-2146" rx="260.916" ry="18"/>
<text text-anchor="middle" x="3102" y="-2142.3" font-family="Times,serif" font-size="14.00">QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)</text>
</g>
<!-- QuicTime now = clock_&#45;&gt;Now();&#45;&gt;QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now) -->
<g id="edge103" class="edge"><title>QuicTime now = clock_&#45;&gt;Now();&#45;&gt;QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)</title>
<path fill="none" stroke="black" d="M3102,-2368.81C3102,-2327.81 3102,-2224.02 3102,-2174.33"/>
<polygon fill="black" stroke="black" points="3105.5,-2174.03 3102,-2164.03 3098.5,-2174.03 3105.5,-2174.03"/>
</g>
<!--  &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node79" class="node"><title> &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3072" cy="-1926" rx="115.448" ry="48.1667"/>
<text text-anchor="middle" x="3072" y="-1944.8" font-family="Times,serif" font-size="14.00"> &#160;if (delay.IsInfinite()) {</text>
<text text-anchor="middle" x="3072" y="-1929.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();</text>
<text text-anchor="middle" x="3072" y="-1914.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3072" y="-1899.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)&#45;&gt; &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge104" class="edge"><title>QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)&#45;&gt; &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M3099.65,-2127.89C3095.44,-2097.34 3086.47,-2032.13 3079.88,-1984.25"/>
<polygon fill="black" stroke="black" points="3083.34,-1983.75 3078.51,-1974.32 3076.41,-1984.7 3083.34,-1983.75"/>
</g>
<!-- QuicTime::Delta QuicSentPacketManager::TimeUntilSend -->
<g id="node81" class="node"><title>QuicTime::Delta QuicSentPacketManager::TimeUntilSend</title>
<ellipse fill="none" stroke="black" cx="3820" cy="-1926" rx="219.996" ry="18"/>
<text text-anchor="middle" x="3820" y="-1922.3" font-family="Times,serif" font-size="14.00">QuicTime::Delta QuicSentPacketManager::TimeUntilSend</text>
</g>
<!-- QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)&#45;&gt;QuicTime::Delta QuicSentPacketManager::TimeUntilSend -->
<g id="edge107" class="edge"><title>QuicTime::Delta delay = sent_packet_manager_.TimeUntilSend(now)&#45;&gt;QuicTime::Delta QuicSentPacketManager::TimeUntilSend</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3214.62,-2127.67C3288.17,-2114.98 3385.83,-2095.53 3470,-2070 3583.15,-2035.68 3710.37,-1978.85 3775.82,-1948.19"/>
<polygon fill="black" stroke="black" points="3213.68,-2124.28 3204.41,-2129.41 3214.85,-2131.18 3213.68,-2124.28"/>
<polygon fill="black" stroke="black" points="3777.46,-1951.28 3785.02,-1943.86 3774.48,-1944.95 3777.46,-1951.28"/>
</g>
<!--  &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node80" class="node"><title> &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3053" cy="-1632" rx="323.283" ry="111.946"/>
<text text-anchor="middle" x="3053" y="-1695.8" font-family="Times,serif" font-size="14.00"> &#160;// Scheduler requires a delay.</text>
<text text-anchor="middle" x="3053" y="-1680.8" font-family="Times,serif" font-size="14.00"> &#160;if (!delay.IsZero()) {</text>
<text text-anchor="middle" x="3053" y="-1665.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {</text>
<text text-anchor="middle" x="3053" y="-1650.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.</text>
<text text-anchor="middle" x="3053" y="-1635.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3053" y="-1620.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;} &#160;&#160;&#160;</text>
<text text-anchor="middle" x="3053" y="-1605.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.</text>
<text text-anchor="middle" x="3053" y="-1590.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));</text>
<text text-anchor="middle" x="3053" y="-1575.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="3053" y="-1560.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge105" class="edge"><title> &#160;if (delay.IsInfinite()) {
 &#160;&#160;&#160;send_alarm_&#45;&gt;Cancel();
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M3068.93,-1877.76C3066.74,-1844.22 3063.71,-1797.58 3060.87,-1754.01"/>
<polygon fill="black" stroke="black" points="3064.36,-1753.64 3060.22,-1743.89 3057.37,-1754.09 3064.36,-1753.64"/>
</g>
<!--  &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt;bool QuicConnection::CanWrite -->
<g id="edge106" class="edge"><title> &#160;// Scheduler requires a delay.
 &#160;if (!delay.IsZero()) {
 &#160;&#160;&#160;if (delay &lt;= release_time_into_future_) {
 &#160;&#160;&#160;&#160;&#160;// Required delay is within pace time into future, send now.
 &#160;&#160;&#160;&#160;&#160;return true;
 &#160;&#160;&#160;} &#160;&#160;&#160;
 &#160;&#160;&#160;// Cannot send packet now because delay is too far in the future.
 &#160;&#160;&#160;send_alarm_&#45;&gt;Update(now + delay, QuicTime::Delta::FromMilliseconds(1));
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt;bool QuicConnection::CanWrite</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2873.25,-1725.19C2805.28,-1773.75 2744,-1840.86 2744,-1925 2744,-2572 2744,-2572 2744,-2572 2744,-2794.24 2738.56,-2849.76 2737,-3072 2736.63,-3124.44 2710.46,-3144.77 2737,-3190 2799.7,-3296.86 2941.03,-3351.91 3028.28,-3376.73"/>
<polygon fill="black" stroke="black" points="3027.54,-3380.16 3038.12,-3379.47 3029.42,-3373.42 3027.54,-3380.16"/>
<text text-anchor="middle" x="2755" y="-2677.3" font-family="Times,serif" font-size="14.00">true</text>
</g>
<!--  &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;} -->
<g id="node82" class="node"><title> &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3820" cy="-1632" rx="195.303" ry="37.4533"/>
<text text-anchor="middle" x="3820" y="-1643.3" font-family="Times,serif" font-size="14.00"> &#160;if (pending_timer_transmission_count_ &gt; 0) {</text>
<text text-anchor="middle" x="3820" y="-1628.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return QuicTime::Delta::Zero();</text>
<text text-anchor="middle" x="3820" y="-1613.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- QuicTime::Delta QuicSentPacketManager::TimeUntilSend&#45;&gt; &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;} -->
<g id="edge108" class="edge"><title>QuicTime::Delta QuicSentPacketManager::TimeUntilSend&#45;&gt; &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3820,-1907.61C3820,-1863.44 3820,-1745.76 3820,-1679.69"/>
<polygon fill="black" stroke="black" points="3823.5,-1679.54 3820,-1669.54 3816.5,-1679.54 3823.5,-1679.54"/>
</g>
<!--  &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;&#160;&#160;} -->
<g id="node83" class="node"><title> &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="3820" cy="-1434" rx="260.323" ry="48.1667"/>
<text text-anchor="middle" x="3820" y="-1452.8" font-family="Times,serif" font-size="14.00"> &#160;if (using_pacing_) {</text>
<text text-anchor="middle" x="3820" y="-1437.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,</text>
<text text-anchor="middle" x="3820" y="-1422.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());</text>
<text text-anchor="middle" x="3820" y="-1407.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!--  &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}&#45;&gt; &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;&#160;&#160;} -->
<g id="edge109" class="edge"><title> &#160;if (pending_timer_transmission_count_ &gt; 0) {
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}&#45;&gt; &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M3820,-1594.13C3820,-1565.52 3820,-1525.32 3820,-1492.48"/>
<polygon fill="black" stroke="black" points="3823.5,-1492.11 3820,-1482.11 3816.5,-1492.11 3823.5,-1492.11"/>
</g>
<!--  &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite(); -->
<g id="node84" class="node"><title> &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();</title>
<ellipse fill="none" stroke="black" cx="4167" cy="-1310" rx="294.235" ry="37.4533"/>
<text text-anchor="middle" x="4167" y="-1321.3" font-family="Times,serif" font-size="14.00"> &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())</text>
<text text-anchor="middle" x="4167" y="-1306.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()</text>
<text text-anchor="middle" x="4167" y="-1291.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();</text>
</g>
<!--  &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;&#160;&#160;}&#45;&gt; &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite(); -->
<g id="edge110" class="edge"><title> &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;&#160;&#160;}&#45;&gt; &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();</title>
<path fill="none" stroke="black" d="M3938.93,-1391.19C3978.09,-1377.42 4021.37,-1362.2 4059.62,-1348.75"/>
<polygon fill="black" stroke="black" points="4060.96,-1351.99 4069.23,-1345.37 4058.63,-1345.39 4060.96,-1351.99"/>
</g>
<!-- QuicTime::Delta PacingSender::TimeUntilSend -->
<g id="node86" class="node"><title>QuicTime::Delta PacingSender::TimeUntilSend</title>
<ellipse fill="none" stroke="black" cx="3674" cy="-1310" rx="180.526" ry="18"/>
<text text-anchor="middle" x="3674" y="-1306.3" font-family="Times,serif" font-size="14.00">QuicTime::Delta PacingSender::TimeUntilSend</text>
</g>
<!--  &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;&#160;&#160;}&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend -->
<g id="edge112" class="edge"><title> &#160;if (using_pacing_) {
 &#160;&#160;&#160;return pacing_sender_.TimeUntilSend(now,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unacked_packets_.bytes_in_flight());
 &#160;&#160;&#160;}&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3756.9,-1380.28C3737.72,-1364.24 3717.6,-1347.44 3701.99,-1334.39"/>
<polygon fill="black" stroke="black" points="3754.89,-1383.15 3764.8,-1386.88 3759.37,-1377.78 3754.89,-1383.15"/>
<polygon fill="black" stroke="black" points="3704.19,-1331.66 3694.27,-1327.94 3699.7,-1337.04 3704.19,-1331.66"/>
</g>
<!--  &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();&#45;&gt;QuicTime::Delta QuicSentPacketManager::TimeUntilSend -->
<g id="edge111" class="edge"><title> &#160;return send_algorithm_&#45;&gt;CanSend(unacked_packets_.bytes_in_flight())
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? QuicTime::Delta::Zero()
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: QuicTime::Delta::Infinite();&#45;&gt;QuicTime::Delta QuicSentPacketManager::TimeUntilSend</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M4161.53,-1347.74C4148.49,-1426.12 4110.06,-1613.22 4024,-1744 3978.64,-1812.93 3900.5,-1871.89 3855.23,-1902.51"/>
<polygon fill="black" stroke="black" points="3853.28,-1899.61 3846.91,-1908.07 3857.17,-1905.43 3853.28,-1899.61"/>
</g>
<!-- !sender_&#45;&gt;CanSend(bytes_in_flight) -->
<g id="node85" class="node"><title>!sender_&#45;&gt;CanSend(bytes_in_flight)</title>
<polygon fill="gold" stroke="black" points="3714,-1168 3516.57,-1150 3714,-1132 3911.43,-1150 3714,-1168"/>
<text text-anchor="middle" x="3714" y="-1146.3" font-family="Times,serif" font-size="14.00">!sender_&#45;&gt;CanSend(bytes_in_flight)</text>
</g>
<!-- !sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend -->
<g id="edge114" class="edge"><title>!sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3678.36,-1164.85C3648.7,-1178.51 3608.44,-1202.53 3590,-1238 3579.27,-1258.64 3597.77,-1275.71 3620.12,-1287.94"/>
<polygon fill="black" stroke="black" points="3618.66,-1291.13 3629.16,-1292.55 3621.84,-1284.89 3618.66,-1291.13"/>
<text text-anchor="middle" x="3702.5" y="-1242.3" font-family="Times,serif" font-size="14.00">Y &amp;&amp; return QuicTime::Delta::Infinite()</text>
</g>
<!--  &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;} -->
<g id="node87" class="node"><title> &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3782" cy="-915" rx="289.31" ry="48.1667"/>
<text text-anchor="middle" x="3782" y="-933.8" font-family="Times,serif" font-size="14.00"> &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {</text>
<text text-anchor="middle" x="3782" y="-918.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.</text>
<text text-anchor="middle" x="3782" y="-903.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return QuicTime::Delta::Zero();</text>
<text text-anchor="middle" x="3782" y="-888.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- !sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt; &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;} -->
<g id="edge115" class="edge"><title>!sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt; &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}</title>
<path fill="none" stroke="black" d="M3718.89,-1132.24C3728.47,-1099.4 3750.12,-1025.23 3765.38,-972.948"/>
<polygon fill="black" stroke="black" points="3768.8,-973.709 3768.25,-963.129 3762.08,-971.748 3768.8,-973.709"/>
<text text-anchor="middle" x="3749" y="-1050.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- virtual bool CanSend(QuicByteCount bytes_in_flight) = 0 -->
<g id="node89" class="node"><title>virtual bool CanSend(QuicByteCount bytes_in_flight) = 0</title>
<ellipse fill="none" stroke="black" cx="3241" cy="-915" rx="217.121" ry="18"/>
<text text-anchor="middle" x="3241" y="-911.3" font-family="Times,serif" font-size="14.00">virtual bool CanSend(QuicByteCount bytes_in_flight) = 0</text>
</g>
<!-- !sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt;virtual bool CanSend(QuicByteCount bytes_in_flight) = 0 -->
<g id="edge118" class="edge"><title>!sender_&#45;&gt;CanSend(bytes_in_flight)&#45;&gt;virtual bool CanSend(QuicByteCount bytes_in_flight) = 0</title>
<path fill="none" stroke="black" d="M3684.77,-1134.6C3604.36,-1094.99 3379.56,-984.255 3284.41,-937.386"/>
<polygon fill="black" stroke="black" points="3285.87,-934.201 3275.35,-932.922 3282.78,-940.48 3285.87,-934.201"/>
</g>
<!-- QuicTime::Delta PacingSender::TimeUntilSend&#45;&gt;!sender_&#45;&gt;CanSend(bytes_in_flight) -->
<g id="edge113" class="edge"><title>QuicTime::Delta PacingSender::TimeUntilSend&#45;&gt;!sender_&#45;&gt;CanSend(bytes_in_flight)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3761.99,-1294.22C3784.2,-1286.09 3805.54,-1273.5 3819,-1254 3842.23,-1220.34 3795.3,-1188.48 3756.9,-1169.35"/>
<polygon fill="black" stroke="black" points="3758.4,-1166.18 3747.87,-1165 3755.36,-1172.49 3758.4,-1166.18"/>
</g>
<!--  &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;} -->
<g id="node88" class="node"><title> &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3936" cy="-694" rx="270.233" ry="37.4533"/>
<text text-anchor="middle" x="3936" y="-705.3" font-family="Times,serif" font-size="14.00"> &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {</text>
<text text-anchor="middle" x="3936" y="-690.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;</text>
<text text-anchor="middle" x="3936" y="-675.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}&#45;&gt; &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;} -->
<g id="edge116" class="edge"><title> &#160;if (burst_tokens_ &gt; 0 || bytes_in_flight == 0 || lumpy_tokens_ &gt; 0) {
 &#160;&#160;&#160;// Don&#39;t pace if we have burst tokens available or leaving quiescence.
 &#160;&#160;&#160;return QuicTime::Delta::Zero();
 &#160;}&#45;&gt; &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;}</title>
<path fill="none" stroke="black" d="M3815.04,-867.019C3841.46,-829.437 3878.28,-777.078 3904.34,-740.021"/>
<polygon fill="black" stroke="black" points="3907.5,-741.613 3910.39,-731.42 3901.77,-737.587 3907.5,-741.613"/>
</g>
<!--  &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;}&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend -->
<g id="edge117" class="edge"><title> &#160;if (ideal_next_packet_send_time_ &gt; now + alarm_granularity_) {
 &#160;&#160;&#160;return ideal_next_packet_send_time_ &#45; now;
 &#160;}&#45;&gt;QuicTime::Delta PacingSender::TimeUntilSend</title>
<path fill="none" stroke="black" d="M4008.83,-730.322C4036.38,-747.768 4064.75,-771.669 4080,-802 4125.12,-891.74 4114.19,-933.555 4080,-1028 4042.19,-1132.44 4010.72,-1155.91 3920,-1220 3884.4,-1245.15 3868.97,-1239.11 3828,-1254 3795.64,-1265.76 3759.37,-1278.72 3730.17,-1289.11"/>
<polygon fill="black" stroke="black" points="3728.8,-1285.88 3720.55,-1292.53 3731.14,-1292.47 3728.8,-1285.88"/>
<text text-anchor="middle" x="4161.5" y="-1050.3" font-family="Times,serif" font-size="14.00"> return QuicTime::Delta::Zero()</text>
</g>
<!-- bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight) -->
<g id="node90" class="node"><title>bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)</title>
<ellipse fill="none" stroke="black" cx="3208" cy="-694" rx="260.44" ry="18"/>
<text text-anchor="middle" x="3208" y="-690.3" font-family="Times,serif" font-size="14.00">bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)</text>
</g>
<!-- virtual bool CanSend(QuicByteCount bytes_in_flight) = 0&#45;&gt;bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight) -->
<g id="edge119" class="edge"><title>virtual bool CanSend(QuicByteCount bytes_in_flight) = 0&#45;&gt;bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)</title>
<path fill="none" stroke="black" d="M3238.41,-896.815C3232.7,-858.915 3218.98,-767.898 3212.1,-722.177"/>
<polygon fill="black" stroke="black" points="3215.53,-721.472 3210.58,-712.105 3208.61,-722.515 3215.53,-721.472"/>
</g>
<!--  &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;} -->
<g id="node91" class="node"><title> &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3182" cy="-474" rx="266.369" ry="58.8803"/>
<text text-anchor="middle" x="3182" y="-500.3" font-family="Times,serif" font-size="14.00"> &#160;if (!no_prr_ &amp;&amp; InRecovery()) {</text>
<text text-anchor="middle" x="3182" y="-485.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// PRR is used when in recovery.</text>
<text text-anchor="middle" x="3182" y="-470.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,</text>
<text text-anchor="middle" x="3182" y="-455.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());</text>
<text text-anchor="middle" x="3182" y="-440.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!-- bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)&#45;&gt; &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;} -->
<g id="edge120" class="edge"><title>bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)&#45;&gt; &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3205.96,-675.894C3202.58,-647.56 3195.64,-589.402 3190.1,-542.919"/>
<polygon fill="black" stroke="black" points="3193.56,-542.407 3188.9,-532.892 3186.61,-543.236 3193.56,-542.407"/>
</g>
<!--  &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="node92" class="node"><title> &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3182" cy="-230" rx="205.091" ry="37.4533"/>
<text text-anchor="middle" x="3182" y="-241.3" font-family="Times,serif" font-size="14.00"> &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {</text>
<text text-anchor="middle" x="3182" y="-226.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3182" y="-211.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;}&#45;&gt; &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="edge121" class="edge"><title> &#160;if (!no_prr_ &amp;&amp; InRecovery()) {
 &#160;&#160;&#160;// PRR is used when in recovery.
 &#160;&#160;&#160;return prr_.CanSend(GetCongestionWindow(), bytes_in_flight,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GetSlowStartThreshold());
 &#160;}&#45;&gt; &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;}</title>
<path fill="none" stroke="black" d="M3182,-415.035C3182,-373.061 3182,-317.047 3182,-277.883"/>
<polygon fill="black" stroke="black" points="3185.5,-277.809 3182,-267.809 3178.5,-277.809 3185.5,-277.809"/>
</g>
<!--  &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="node93" class="node"><title> &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="3182" cy="-64" rx="266.369" ry="37.4533"/>
<text text-anchor="middle" x="3182" y="-75.3" font-family="Times,serif" font-size="14.00"> &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {</text>
<text text-anchor="middle" x="3182" y="-60.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="3182" y="-45.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt; &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;} -->
<g id="edge122" class="edge"><title> &#160;if (GetCongestionWindow() &gt; bytes_in_flight) {
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt; &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;}</title>
<path fill="none" stroke="black" d="M3182,-192.195C3182,-168.456 3182,-137.368 3182,-111.869"/>
<polygon fill="black" stroke="black" points="3185.5,-111.682 3182,-101.682 3178.5,-111.682 3185.5,-111.682"/>
</g>
<!--  &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt;bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight) -->
<g id="edge123" class="edge"><title> &#160;if (min4_mode_ &amp;&amp; bytes_in_flight &lt; 4 * kDefaultTCPMSS) {
 &#160;&#160;&#160;return true;
 &#160;}&#45;&gt;bool TcpCubicSenderBytes::CanSend(QuicByteCount bytes_in_flight)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M3315.35,-96.4563C3345.2,-108.906 3374.39,-126.158 3396,-150 3461.85,-222.638 3443.31,-264.915 3457,-362 3470.9,-460.58 3511.76,-502.86 3457,-586 3425.82,-633.342 3368.83,-659.823 3317.24,-674.592"/>
<polygon fill="black" stroke="black" points="3316.06,-671.286 3307.34,-677.304 3317.91,-678.038 3316.06,-671.286"/>
<text text-anchor="middle" x="3486" y="-332.3" font-family="Times,serif" font-size="14.00">return false</text>
</g>
<!-- if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0) -->
<g id="node95" class="node"><title>if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)</title>
<polygon fill="none" stroke="black" points="2691,-4532 2366.81,-4514 2691,-4496 3015.19,-4514 2691,-4532"/>
<text text-anchor="middle" x="2691" y="-4510.3" font-family="Times,serif" font-size="14.00">if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)</text>
</g>
<!-- if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)&#45;&gt;void QuicPacketCreator::Flush() -->
<g id="edge127" class="edge"><title>if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)&#45;&gt;void QuicPacketCreator::Flush()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2708.84,-4496.68C2753.59,-4453.87 2867,-4332.94 2867,-4207 2867,-4207 2867,-4207 2867,-3827 2867,-3748.96 2857.58,-3657.16 2852.37,-3612.37"/>
<polygon fill="black" stroke="black" points="2855.82,-3611.8 2851.17,-3602.28 2848.87,-3612.62 2855.82,-3611.8"/>
<text text-anchor="middle" x="2903.5" y="-4073.3" font-family="Times,serif" font-size="14.00">Y &amp;&amp; return</text>
</g>
<!-- serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer() -->
<g id="node97" class="node"><title>serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()</title>
<ellipse fill="none" stroke="black" cx="2593" cy="-4206" rx="214.221" ry="18"/>
<text text-anchor="middle" x="2593" y="-4202.3" font-family="Times,serif" font-size="14.00">serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()</text>
</g>
<!-- if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)&#45;&gt;serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer() -->
<g id="edge128" class="edge"><title>if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)&#45;&gt;serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()</title>
<path fill="none" stroke="black" d="M2685.59,-4496.11C2669.43,-4445.66 2621.41,-4295.72 2601.65,-4234"/>
<polygon fill="black" stroke="black" points="2604.9,-4232.67 2598.51,-4224.21 2598.23,-4234.8 2604.9,-4232.67"/>
<text text-anchor="middle" x="2620" y="-4266.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- void QuicPacketCreator::Flush()&#45;&gt;if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0) -->
<g id="edge126" class="edge"><title>void QuicPacketCreator::Flush()&#45;&gt;if (!HasPendingFrames() &amp;&amp; pending_padding_bytes_ == 0)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2846.71,-3602.28C2841.65,-3641.92 2830,-3742.5 2830,-3827 2830,-4207 2830,-4207 2830,-4207 2830,-4320.9 2749.18,-4439.02 2710.79,-4488.7"/>
<polygon fill="black" stroke="black" points="2708,-4486.59 2704.58,-4496.62 2713.51,-4490.91 2708,-4486.59"/>
</g>
<!-- SerializePacket(serialized_packet_buffer, kMaxPacketSize) -->
<g id="node98" class="node"><title>SerializePacket(serialized_packet_buffer, kMaxPacketSize)</title>
<ellipse fill="none" stroke="black" cx="2589" cy="-4077" rx="221.445" ry="18"/>
<text text-anchor="middle" x="2589" y="-4073.3" font-family="Times,serif" font-size="14.00">SerializePacket(serialized_packet_buffer, kMaxPacketSize)</text>
</g>
<!-- serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()&#45;&gt;SerializePacket(serialized_packet_buffer, kMaxPacketSize) -->
<g id="edge129" class="edge"><title>serialized_packet_buffer = delegate_&#45;&gt;GetPacketBuffer()&#45;&gt;SerializePacket(serialized_packet_buffer, kMaxPacketSize)</title>
<path fill="none" stroke="black" d="M2592.46,-4187.87C2591.8,-4166.76 2590.66,-4130.6 2589.87,-4105.56"/>
<polygon fill="black" stroke="black" points="2593.36,-4105.15 2589.54,-4095.26 2586.36,-4105.37 2593.36,-4105.15"/>
</g>
<!-- OnSerializedPacket() -->
<g id="node99" class="node"><title>OnSerializedPacket()</title>
<ellipse fill="none" stroke="black" cx="2589" cy="-3828" rx="85.19" ry="18"/>
<text text-anchor="middle" x="2589" y="-3824.3" font-family="Times,serif" font-size="14.00">OnSerializedPacket()</text>
</g>
<!-- SerializePacket(serialized_packet_buffer, kMaxPacketSize)&#45;&gt;OnSerializedPacket() -->
<g id="edge130" class="edge"><title>SerializePacket(serialized_packet_buffer, kMaxPacketSize)&#45;&gt;OnSerializedPacket()</title>
<path fill="none" stroke="black" d="M2589,-4058.63C2589,-4016.28 2589,-3907.42 2589,-3856.29"/>
<polygon fill="black" stroke="black" points="2592.5,-3856.02 2589,-3846.02 2585.5,-3856.02 2592.5,-3856.02"/>
</g>
<!-- void QuicPacketCreator::SerializePacket -->
<g id="node100" class="node"><title>void QuicPacketCreator::SerializePacket</title>
<ellipse fill="none" stroke="black" cx="2040" cy="-3828" rx="154.529" ry="18"/>
<text text-anchor="middle" x="2040" y="-3824.3" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::SerializePacket</text>
</g>
<!-- SerializePacket(serialized_packet_buffer, kMaxPacketSize)&#45;&gt;void QuicPacketCreator::SerializePacket -->
<g id="edge132" class="edge"><title>SerializePacket(serialized_packet_buffer, kMaxPacketSize)&#45;&gt;void QuicPacketCreator::SerializePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2521.91,-4056.57C2474.53,-4042.07 2409.94,-4020.73 2355,-3997 2250.76,-3951.97 2134.4,-3885.35 2076.65,-3851.11"/>
<polygon fill="black" stroke="black" points="2521.17,-4060 2531.75,-4059.56 2523.2,-4053.3 2521.17,-4060"/>
<polygon fill="black" stroke="black" points="2078.27,-3848 2067.89,-3845.9 2074.69,-3854.02 2078.27,-3848"/>
</g>
<!-- OnSerializedPacket()&#45;&gt;void QuicPacketCreator::Flush() -->
<g id="edge131" class="edge"><title>OnSerializedPacket()&#45;&gt;void QuicPacketCreator::Flush()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2606.87,-3810.37C2651.94,-3768.42 2770.39,-3658.17 2823.08,-3609.12"/>
<polygon fill="black" stroke="black" points="2825.72,-3611.45 2830.66,-3602.07 2820.95,-3606.32 2825.72,-3611.45"/>
</g>
<!-- void QuicPacketCreator::OnSerializedPacket() -->
<g id="node107" class="node"><title>void QuicPacketCreator::OnSerializedPacket()</title>
<ellipse fill="none" stroke="black" cx="199" cy="-3584" rx="175.227" ry="18"/>
<text text-anchor="middle" x="199" y="-3580.3" font-family="Times,serif" font-size="14.00">void QuicPacketCreator::OnSerializedPacket()</text>
</g>
<!-- OnSerializedPacket()&#45;&gt;void QuicPacketCreator::OnSerializedPacket() -->
<g id="edge140" class="edge"><title>OnSerializedPacket()&#45;&gt;void QuicPacketCreator::OnSerializedPacket()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2546.85,-3807.1C2500.84,-3786.38 2424.43,-3754.93 2355,-3740 2071.92,-3679.14 1993.83,-3716.42 1705,-3696 1206.36,-3660.75 615.054,-3616.43 345.742,-3596.11"/>
<polygon fill="black" stroke="black" points="2545.65,-3810.39 2556.2,-3811.35 2548.54,-3804.02 2545.65,-3810.39"/>
<polygon fill="black" stroke="black" points="345.749,-3592.6 335.514,-3595.34 345.222,-3599.58 345.749,-3592.6"/>
</g>
<!-- FillPacketHeader(&amp;header) -->
<g id="node101" class="node"><title>FillPacketHeader(&amp;header)</title>
<ellipse fill="none" stroke="black" cx="2040" cy="-3584" rx="108.31" ry="18"/>
<text text-anchor="middle" x="2040" y="-3580.3" font-family="Times,serif" font-size="14.00">FillPacketHeader(&amp;header)</text>
</g>
<!-- void QuicPacketCreator::SerializePacket&#45;&gt;FillPacketHeader(&amp;header) -->
<g id="edge133" class="edge"><title>void QuicPacketCreator::SerializePacket&#45;&gt;FillPacketHeader(&amp;header)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2040,-3809.98C2040,-3768.69 2040,-3662.86 2040,-3612.47"/>
<polygon fill="black" stroke="black" points="2043.5,-3612.32 2040,-3602.32 2036.5,-3612.32 2043.5,-3612.32"/>
</g>
<!-- MaybeAddPadding() -->
<g id="node102" class="node"><title>MaybeAddPadding()</title>
<ellipse fill="none" stroke="black" cx="2040" cy="-3395" rx="85.2138" ry="18"/>
<text text-anchor="middle" x="2040" y="-3391.3" font-family="Times,serif" font-size="14.00">MaybeAddPadding()</text>
</g>
<!-- FillPacketHeader(&amp;header)&#45;&gt;MaybeAddPadding() -->
<g id="edge134" class="edge"><title>FillPacketHeader(&amp;header)&#45;&gt;MaybeAddPadding()</title>
<path fill="none" stroke="black" d="M2040,-3565.74C2040,-3533.18 2040,-3462.44 2040,-3423.35"/>
<polygon fill="black" stroke="black" points="2043.5,-3423.22 2040,-3413.22 2036.5,-3423.22 2043.5,-3423.22"/>
</g>
<!-- framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_) -->
<g id="node103" class="node"><title>framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_)</title>
<ellipse fill="none" stroke="black" cx="2040" cy="-3266" rx="216.062" ry="26.7407"/>
<text text-anchor="middle" x="2040" y="-3269.8" font-family="Times,serif" font-size="14.00">framer_&#45;&gt;BuildDataPacket(header, queued_frames_,</text>
<text text-anchor="middle" x="2040" y="-3254.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;encrypted_buffer, packet_size_)</text>
</g>
<!-- MaybeAddPadding()&#45;&gt;framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_) -->
<g id="edge135" class="edge"><title>MaybeAddPadding()&#45;&gt;framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_)</title>
<path fill="none" stroke="black" d="M2040,-3376.87C2040,-3358.12 2040,-3327.49 2040,-3303.34"/>
<polygon fill="black" stroke="black" points="2043.5,-3303.1 2040,-3293.1 2036.5,-3303.1 2043.5,-3303.1"/>
</g>
<!-- encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer) -->
<g id="node104" class="node"><title>encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)</title>
<ellipse fill="none" stroke="black" cx="2040" cy="-3131" rx="303.023" ry="48.1667"/>
<text text-anchor="middle" x="2040" y="-3149.8" font-family="Times,serif" font-size="14.00">encrypted_length = framer_&#45;&gt;EncryptInPlace(</text>
<text text-anchor="middle" x="2040" y="-3134.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,</text>
<text text-anchor="middle" x="2040" y="-3119.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,</text>
<text text-anchor="middle" x="2040" y="-3104.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)</text>
</g>
<!-- framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_)&#45;&gt;encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer) -->
<g id="edge136" class="edge"><title>framer_&#45;&gt;BuildDataPacket(header, queued_frames_,
 &#160;&#160;&#160;encrypted_buffer, packet_size_)&#45;&gt;encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)</title>
<path fill="none" stroke="black" d="M2040,-3239.04C2040,-3224.82 2040,-3206.6 2040,-3189.25"/>
<polygon fill="black" stroke="black" points="2043.5,-3189.16 2040,-3179.16 2036.5,-3189.16 2043.5,-3189.16"/>
</g>
<!-- queued_frames_.clear() -->
<g id="node105" class="node"><title>queued_frames_.clear()</title>
<ellipse fill="none" stroke="black" cx="1971" cy="-2922" rx="94.338" ry="18"/>
<text text-anchor="middle" x="1971" y="-2918.3" font-family="Times,serif" font-size="14.00">queued_frames_.clear()</text>
</g>
<!-- encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)&#45;&gt;queued_frames_.clear() -->
<g id="edge137" class="edge"><title>encrypted_length = framer_&#45;&gt;EncryptInPlace(
 &#160;&#160;&#160;packet_.encryption_level, packet_.packet_number,
 &#160;&#160;&#160;GetStartOfEncryptedData(framer_&#45;&gt;transport_version(), header), length,
 &#160;&#160;&#160;encrypted_buffer_len, encrypted_buffer)&#45;&gt;queued_frames_.clear()</title>
<path fill="none" stroke="black" d="M2024.26,-3082.77C2010.56,-3041.68 1991.19,-2983.58 1979.98,-2949.95"/>
<polygon fill="black" stroke="black" points="1983.26,-2948.72 1976.78,-2940.34 1976.62,-2950.93 1983.26,-2948.72"/>
</g>
<!-- packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length; -->
<g id="node106" class="node"><title>packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;</title>
<ellipse fill="none" stroke="black" cx="1926" cy="-2681" rx="200.228" ry="26.7407"/>
<text text-anchor="middle" x="1926" y="-2684.8" font-family="Times,serif" font-size="14.00">packet_.encrypted_buffer = encrypted_buffer;</text>
<text text-anchor="middle" x="1926" y="-2669.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;</text>
</g>
<!-- queued_frames_.clear()&#45;&gt;packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length; -->
<g id="edge138" class="edge"><title>queued_frames_.clear()&#45;&gt;packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;</title>
<path fill="none" stroke="black" d="M1967.76,-2903.81C1960.47,-2865.08 1942.62,-2770.29 1932.79,-2718.04"/>
<polygon fill="black" stroke="black" points="1936.22,-2717.36 1930.93,-2708.18 1929.34,-2718.66 1936.22,-2717.36"/>
</g>
<!-- packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;&#45;&gt;void QuicPacketCreator::SerializePacket -->
<g id="edge139" class="edge"><title>packet_.encrypted_buffer = encrypted_buffer;
 &#160;&#160;&#160;packet_.encrypted_length = encrypted_length;&#45;&gt;void QuicPacketCreator::SerializePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1880.61,-2707.29C1819.41,-2745.14 1718,-2822.68 1718,-2921 1718,-3585 1718,-3585 1718,-3585 1718,-3709.95 1874.86,-3778.37 1969.62,-3808.3"/>
<polygon fill="black" stroke="black" points="1968.85,-3811.73 1979.43,-3811.34 1970.91,-3805.04 1968.85,-3811.73"/>
</g>
<!-- SerializedPacket packet(std::move(packet_)) -->
<g id="node108" class="node"><title>SerializedPacket packet(std::move(packet_))</title>
<ellipse fill="none" stroke="black" cx="185" cy="-3395" rx="168.478" ry="18"/>
<text text-anchor="middle" x="185" y="-3391.3" font-family="Times,serif" font-size="14.00">SerializedPacket packet(std::move(packet_))</text>
</g>
<!-- void QuicPacketCreator::OnSerializedPacket()&#45;&gt;SerializedPacket packet(std::move(packet_)) -->
<g id="edge141" class="edge"><title>void QuicPacketCreator::OnSerializedPacket()&#45;&gt;SerializedPacket packet(std::move(packet_))</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M197.708,-3565.74C195.27,-3533.18 189.974,-3462.44 187.047,-3423.35"/>
<polygon fill="black" stroke="black" points="190.526,-3422.93 186.289,-3413.22 183.545,-3423.45 190.526,-3422.93"/>
</g>
<!-- ClearPacket() -->
<g id="node109" class="node"><title>ClearPacket()</title>
<ellipse fill="none" stroke="black" cx="203" cy="-3266" rx="59.2173" ry="18"/>
<text text-anchor="middle" x="203" y="-3262.3" font-family="Times,serif" font-size="14.00">ClearPacket()</text>
</g>
<!-- SerializedPacket packet(std::move(packet_))&#45;&gt;ClearPacket() -->
<g id="edge142" class="edge"><title>SerializedPacket packet(std::move(packet_))&#45;&gt;ClearPacket()</title>
<path fill="none" stroke="black" d="M187.428,-3376.87C190.434,-3355.66 195.59,-3319.28 199.141,-3294.23"/>
<polygon fill="black" stroke="black" points="202.615,-3294.65 200.553,-3284.26 195.685,-3293.67 202.615,-3294.65"/>
</g>
<!-- delegate_&#45;&gt;OnSerializedPacket(&amp;packet) -->
<g id="node110" class="node"><title>delegate_&#45;&gt;OnSerializedPacket(&amp;packet)</title>
<ellipse fill="none" stroke="black" cx="213" cy="-3131" rx="157.404" ry="18"/>
<text text-anchor="middle" x="213" y="-3127.3" font-family="Times,serif" font-size="14.00">delegate_&#45;&gt;OnSerializedPacket(&amp;packet)</text>
</g>
<!-- ClearPacket()&#45;&gt;delegate_&#45;&gt;OnSerializedPacket(&amp;packet) -->
<g id="edge143" class="edge"><title>ClearPacket()&#45;&gt;delegate_&#45;&gt;OnSerializedPacket(&amp;packet)</title>
<path fill="none" stroke="black" d="M204.287,-3247.88C205.974,-3225.44 208.955,-3185.8 210.954,-3159.21"/>
<polygon fill="black" stroke="black" points="214.458,-3159.28 211.718,-3149.05 207.478,-3158.76 214.458,-3159.28"/>
</g>
<!-- delegate_&#45;&gt;OnSerializedPacket(&amp;packet)&#45;&gt;void QuicPacketCreator::OnSerializedPacket() -->
<g id="edge144" class="edge"><title>delegate_&#45;&gt;OnSerializedPacket(&amp;packet)&#45;&gt;void QuicPacketCreator::OnSerializedPacket()</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M232.637,-3149.17C283.884,-3196.17 414.189,-3330.91 362,-3444 337.33,-3497.46 280.839,-3537.96 241.316,-3561.08"/>
<polygon fill="black" stroke="black" points="239.114,-3558.31 232.163,-3566.3 242.583,-3564.39 239.114,-3558.31"/>
</g>
<!-- void QuicConnection::OnSerializedPacket -->
<g id="node111" class="node"><title>void QuicConnection::OnSerializedPacket</title>
<ellipse fill="none" stroke="black" cx="213" cy="-2922" rx="160.304" ry="18"/>
<text text-anchor="middle" x="213" y="-2918.3" font-family="Times,serif" font-size="14.00">void QuicConnection::OnSerializedPacket</text>
</g>
<!-- delegate_&#45;&gt;OnSerializedPacket(&amp;packet)&#45;&gt;void QuicConnection::OnSerializedPacket -->
<g id="edge145" class="edge"><title>delegate_&#45;&gt;OnSerializedPacket(&amp;packet)&#45;&gt;void QuicConnection::OnSerializedPacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M213,-3102.59C213,-3062.92 213,-2989.95 213,-2950.33"/>
<polygon fill="black" stroke="black" points="209.5,-3102.71 213,-3112.71 216.5,-3102.71 209.5,-3102.71"/>
<polygon fill="black" stroke="black" points="216.5,-2950.1 213,-2940.1 209.5,-2950.1 216.5,-2950.1"/>
</g>
<!-- SendOrQueuePacket(serialized_packet) -->
<g id="node112" class="node"><title>SendOrQueuePacket(serialized_packet)</title>
<ellipse fill="none" stroke="black" cx="213" cy="-2681" rx="150.181" ry="18"/>
<text text-anchor="middle" x="213" y="-2677.3" font-family="Times,serif" font-size="14.00">SendOrQueuePacket(serialized_packet)</text>
</g>
<!-- void QuicConnection::OnSerializedPacket&#45;&gt;SendOrQueuePacket(serialized_packet) -->
<g id="edge146" class="edge"><title>void QuicConnection::OnSerializedPacket&#45;&gt;SendOrQueuePacket(serialized_packet)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M209.297,-2903.81C205.508,-2862.73 205.253,-2758.58 208.532,-2709.02"/>
<polygon fill="black" stroke="black" points="212.023,-2709.27 209.311,-2699.03 205.044,-2708.73 212.023,-2709.27"/>
</g>
<!-- SendOrQueuePacket(serialized_packet)&#45;&gt;void QuicConnection::OnSerializedPacket -->
<g id="edge147" class="edge"><title>SendOrQueuePacket(serialized_packet)&#45;&gt;void QuicConnection::OnSerializedPacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M216.689,-2699.03C220.487,-2739.96 220.751,-2844.09 217.48,-2893.8"/>
<polygon fill="black" stroke="black" points="213.987,-2893.57 216.703,-2903.81 220.966,-2894.11 213.987,-2893.57"/>
</g>
<!-- void QuicConnection::SendOrQueuePacket -->
<g id="node114" class="node"><title>void QuicConnection::SendOrQueuePacket</title>
<ellipse fill="none" stroke="black" cx="562" cy="-2387" rx="164.153" ry="18"/>
<text text-anchor="middle" x="562" y="-2383.3" font-family="Times,serif" font-size="14.00">void QuicConnection::SendOrQueuePacket</text>
</g>
<!-- SendOrQueuePacket(serialized_packet)&#45;&gt;void QuicConnection::SendOrQueuePacket -->
<g id="edge148" class="edge"><title>SendOrQueuePacket(serialized_packet)&#45;&gt;void QuicConnection::SendOrQueuePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M241.05,-2656.53C306.421,-2601.84 468.303,-2466.39 533.811,-2411.59"/>
<polygon fill="black" stroke="black" points="238.696,-2653.94 233.272,-2663.04 243.188,-2659.31 238.696,-2653.94"/>
<polygon fill="black" stroke="black" points="536.248,-2414.11 541.672,-2405.01 531.756,-2408.74 536.248,-2414.11"/>
</g>
<!-- if (!queued_packets_.empty() || !WritePacket(packet)) -->
<g id="node113" class="node"><title>if (!queued_packets_.empty() || !WritePacket(packet))</title>
<polygon fill="none" stroke="black" points="685,-3413 398.834,-3395 685,-3377 971.166,-3395 685,-3413"/>
<text text-anchor="middle" x="685" y="-3391.3" font-family="Times,serif" font-size="14.00">if (!queued_packets_.empty() || !WritePacket(packet))</text>
</g>
<!-- packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet) -->
<g id="node115" class="node"><title>packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)</title>
<ellipse fill="none" stroke="black" cx="784" cy="-3266" rx="187.251" ry="18"/>
<text text-anchor="middle" x="784" y="-3262.3" font-family="Times,serif" font-size="14.00">packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)</text>
</g>
<!-- if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet) -->
<g id="edge150" class="edge"><title>if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)</title>
<path fill="none" stroke="black" d="M697.74,-3377.66C714.631,-3355.99 744.604,-3317.54 764.391,-3292.15"/>
<polygon fill="black" stroke="black" points="767.29,-3294.13 770.677,-3284.09 761.769,-3289.83 767.29,-3294.13"/>
<text text-anchor="middle" x="743" y="-3327.3" font-family="Times,serif" font-size="14.00">Y</text>
</g>
<!-- ClearSerializedPacket(packet) -->
<g id="node118" class="node"><title>ClearSerializedPacket(packet)</title>
<ellipse fill="none" stroke="black" cx="676" cy="-2681" rx="116.484" ry="18"/>
<text text-anchor="middle" x="676" y="-2677.3" font-family="Times,serif" font-size="14.00">ClearSerializedPacket(packet)</text>
</g>
<!-- if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;ClearSerializedPacket(packet) -->
<g id="edge154" class="edge"><title>if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;ClearSerializedPacket(packet)</title>
<path fill="none" stroke="black" d="M656.854,-3378.69C634.4,-3364.98 603.988,-3342.78 587,-3315 575.631,-3296.41 577,-3288.79 577,-3267 577,-3267 577,-3267 577,-2921 577,-2871.33 572.777,-2856.59 590,-2810 604.595,-2770.52 633.702,-2731.25 653.99,-2706.83"/>
<polygon fill="black" stroke="black" points="656.711,-2709.03 660.498,-2699.14 651.367,-2704.51 656.711,-2709.03"/>
<text text-anchor="middle" x="582" y="-3127.3" font-family="Times,serif" font-size="14.00">N</text>
</g>
<!-- bool QuicConnection::WritePacket(SerializedPacket* packet) -->
<g id="node119" class="node"><title>bool QuicConnection::WritePacket(SerializedPacket* packet)</title>
<ellipse fill="none" stroke="black" cx="1225" cy="-3266" rx="229.145" ry="18"/>
<text text-anchor="middle" x="1225" y="-3262.3" font-family="Times,serif" font-size="14.00">bool QuicConnection::WritePacket(SerializedPacket* packet)</text>
</g>
<!-- if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;bool QuicConnection::WritePacket(SerializedPacket* packet) -->
<g id="edge156" class="edge"><title>if (!queued_packets_.empty() || !WritePacket(packet))&#45;&gt;bool QuicConnection::WritePacket(SerializedPacket* packet)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M752.272,-3378.18C852.259,-3354.66 1039.69,-3310.58 1146.04,-3285.57"/>
<polygon fill="black" stroke="black" points="751.211,-3374.83 742.278,-3380.53 752.814,-3381.65 751.211,-3374.83"/>
<polygon fill="black" stroke="black" points="1147.14,-3288.91 1156.07,-3283.21 1145.53,-3282.09 1147.14,-3288.91"/>
</g>
<!-- void QuicConnection::SendOrQueuePacket&#45;&gt;if (!queued_packets_.empty() || !WritePacket(packet)) -->
<g id="edge149" class="edge"><title>void QuicConnection::SendOrQueuePacket&#45;&gt;if (!queued_packets_.empty() || !WritePacket(packet))</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M559.81,-2405.08C554.245,-2450.01 540,-2575.27 540,-2680 540,-3267 540,-3267 540,-3267 540,-3319.42 594.295,-3355.24 636.437,-3375.15"/>
<polygon fill="black" stroke="black" points="635.209,-3378.44 645.761,-3379.39 638.109,-3372.07 635.209,-3378.44"/>
</g>
<!-- queued_packets_.push_back(*packet) -->
<g id="node116" class="node"><title>queued_packets_.push_back(*packet)</title>
<ellipse fill="none" stroke="black" cx="758" cy="-3131" rx="143.931" ry="18"/>
<text text-anchor="middle" x="758" y="-3127.3" font-family="Times,serif" font-size="14.00">queued_packets_.push_back(*packet)</text>
</g>
<!-- packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)&#45;&gt;queued_packets_.push_back(*packet) -->
<g id="edge151" class="edge"><title>packet&#45;&gt;encrypted_buffer = CopyBuffer(*packet)&#45;&gt;queued_packets_.push_back(*packet)</title>
<path fill="none" stroke="black" d="M780.654,-3247.88C776.266,-3225.44 768.517,-3185.8 763.32,-3159.21"/>
<polygon fill="black" stroke="black" points="766.687,-3158.19 761.333,-3149.05 759.817,-3159.54 766.687,-3158.19"/>
</g>
<!-- packet&#45;&gt;retransmittable_frames.clear() -->
<g id="node117" class="node"><title>packet&#45;&gt;retransmittable_frames.clear()</title>
<ellipse fill="none" stroke="black" cx="748" cy="-2922" rx="149.23" ry="18"/>
<text text-anchor="middle" x="748" y="-2918.3" font-family="Times,serif" font-size="14.00">packet&#45;&gt;retransmittable_frames.clear()</text>
</g>
<!-- queued_packets_.push_back(*packet)&#45;&gt;packet&#45;&gt;retransmittable_frames.clear() -->
<g id="edge152" class="edge"><title>queued_packets_.push_back(*packet)&#45;&gt;packet&#45;&gt;retransmittable_frames.clear()</title>
<path fill="none" stroke="black" d="M757.165,-3112.71C755.425,-3076.7 751.402,-2993.43 749.313,-2950.18"/>
<polygon fill="black" stroke="black" points="752.805,-2949.92 748.826,-2940.1 745.813,-2950.26 752.805,-2949.92"/>
</g>
<!-- packet&#45;&gt;retransmittable_frames.clear()&#45;&gt;ClearSerializedPacket(packet) -->
<g id="edge153" class="edge"><title>packet&#45;&gt;retransmittable_frames.clear()&#45;&gt;ClearSerializedPacket(packet)</title>
<path fill="none" stroke="black" d="M742.822,-2903.81C730.42,-2862.64 698.939,-2758.14 684.045,-2708.7"/>
<polygon fill="black" stroke="black" points="687.367,-2707.6 681.131,-2699.03 680.664,-2709.62 687.367,-2707.6"/>
</g>
<!-- ClearSerializedPacket(packet)&#45;&gt;void QuicConnection::SendOrQueuePacket -->
<g id="edge155" class="edge"><title>ClearSerializedPacket(packet)&#45;&gt;void QuicConnection::SendOrQueuePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M669.21,-2662.61C650.043,-2613.51 595.422,-2473.61 572.417,-2414.68"/>
<polygon fill="black" stroke="black" points="575.651,-2413.34 568.754,-2405.3 569.131,-2415.89 575.651,-2413.34"/>
</g>
<!--  &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="node120" class="node"><title> &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="1312" cy="-3131" rx="157.527" ry="48.1667"/>
<text text-anchor="middle" x="1312" y="-3149.8" font-family="Times,serif" font-size="14.00"> &#160;if (ShouldDiscardPacket(*packet)) {</text>
<text text-anchor="middle" x="1312" y="-3134.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;++stats_.packets_discarded;</text>
<text text-anchor="middle" x="1312" y="-3119.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="1312" y="-3104.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- bool QuicConnection::WritePacket(SerializedPacket* packet)&#45;&gt; &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="edge157" class="edge"><title>bool QuicConnection::WritePacket(SerializedPacket* packet)&#45;&gt; &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1236.2,-3247.88C1246.32,-3232.4 1261.81,-3208.73 1276.14,-3186.81"/>
<polygon fill="black" stroke="black" points="1279.23,-3188.49 1281.78,-3178.2 1273.38,-3184.65 1279.23,-3188.49"/>
</g>
<!--  &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="node121" class="node"><title> &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="1345" cy="-2922" rx="325.464" ry="48.1667"/>
<text text-anchor="middle" x="1345" y="-2940.8" font-family="Times,serif" font-size="14.00"> &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {</text>
<text text-anchor="middle" x="1345" y="-2925.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);</text>
<text text-anchor="middle" x="1345" y="-2910.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return true;</text>
<text text-anchor="middle" x="1345" y="-2895.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!--  &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt; &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;} -->
<g id="edge158" class="edge"><title> &#160;if (ShouldDiscardPacket(*packet)) {
 &#160;&#160;&#160;++stats_.packets_discarded;
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt; &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M1319.53,-3082.77C1324.37,-3052.41 1330.69,-3012.76 1335.82,-2980.56"/>
<polygon fill="black" stroke="black" points="1339.33,-2980.81 1337.45,-2970.39 1332.42,-2979.71 1339.33,-2980.81"/>
</g>
<!--  &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="node122" class="node"><title> &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1348" cy="-2681" rx="275.097" ry="48.1667"/>
<text text-anchor="middle" x="1348" y="-2699.8" font-family="Times,serif" font-size="14.00"> &#160;const bool is_termination_packet = IsTerminationPacket(*packet);</text>
<text text-anchor="middle" x="1348" y="-2684.8" font-family="Times,serif" font-size="14.00"> &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {</text>
<text text-anchor="middle" x="1348" y="-2669.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="1348" y="-2654.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt; &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;} -->
<g id="edge159" class="edge"><title> &#160;if (packet&#45;&gt;packet_number &lt; sent_packet_manager_.GetLargestSentPacket()) {
 &#160;&#160;&#160;RecordInternalErrorLocation(QUIC_CONNECTION_WRITE_PACKET);
 &#160;&#160;&#160;return true;
 &#160;&#160;&#160;}&#45;&gt; &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;}</title>
<path fill="none" stroke="black" d="M1345.59,-2873.78C1346.08,-2835.15 1346.76,-2780.39 1347.28,-2739.26"/>
<polygon fill="black" stroke="black" points="1350.78,-2739.16 1347.41,-2729.12 1343.78,-2739.08 1350.78,-2739.16"/>
</g>
<!--  &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;} -->
<g id="node123" class="node"><title> &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1349" cy="-2387" rx="333.071" ry="164.512"/>
<text text-anchor="middle" x="1349" y="-2488.3" font-family="Times,serif" font-size="14.00"> &#160;// Measure the RTT from before the write begins to avoid underestimating the</text>
<text text-anchor="middle" x="1349" y="-2473.3" font-family="Times,serif" font-size="14.00"> &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out</text>
<text text-anchor="middle" x="1349" y="-2458.3" font-family="Times,serif" font-size="14.00"> &#160;// during the WritePacket below.</text>
<text text-anchor="middle" x="1349" y="-2443.3" font-family="Times,serif" font-size="14.00"> &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();</text>
<text text-anchor="middle" x="1349" y="-2428.3" font-family="Times,serif" font-size="14.00"> &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {</text>
<text text-anchor="middle" x="1349" y="-2413.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();</text>
<text text-anchor="middle" x="1349" y="-2398.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;</text>
<text text-anchor="middle" x="1349" y="-2383.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;QuicTime now = packet_send_time;</text>
<text text-anchor="middle" x="1349" y="-2368.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (next_release_time &gt; now) {</text>
<text text-anchor="middle" x="1349" y="-2353.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;</text>
<text text-anchor="middle" x="1349" y="-2338.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.</text>
<text text-anchor="middle" x="1349" y="-2323.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;</text>
<text text-anchor="middle" x="1349" y="-2308.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="1349" y="-2293.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);</text>
<text text-anchor="middle" x="1349" y="-2278.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;} -->
<g id="edge160" class="edge"><title> &#160;const bool is_termination_packet = IsTerminationPacket(*packet);
 &#160;if (HandleWriteBlocked() &amp;&amp; !is_termination_packet) {
 &#160;&#160;&#160;return false;
 &#160;}&#45;&gt; &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;}</title>
<path fill="none" stroke="black" d="M1348.16,-2632.76C1348.23,-2612.65 1348.32,-2587.84 1348.4,-2561.8"/>
<polygon fill="black" stroke="black" points="1351.9,-2561.78 1348.44,-2551.76 1344.9,-2561.75 1351.9,-2561.78"/>
</g>
<!--  WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_); -->
<g id="node124" class="node"><title> WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);</title>
<ellipse fill="none" stroke="black" cx="1376" cy="-2146" rx="285.507" ry="37.4533"/>
<text text-anchor="middle" x="1376" y="-2157.3" font-family="Times,serif" font-size="14.00"> WriteResult result = writer_&#45;&gt;WritePacket(</text>
<text text-anchor="middle" x="1376" y="-2142.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),</text>
<text text-anchor="middle" x="1376" y="-2127.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);</text>
</g>
<!--  &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;}&#45;&gt; WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_); -->
<g id="edge161" class="edge"><title> &#160;// Measure the RTT from before the write begins to avoid underestimating the
 &#160;// min_rtt_, especially in cases where the thread blocks or gets swapped out
 &#160;// during the WritePacket below.
 &#160;QuicTime packet_send_time = clock_&#45;&gt;Now();
 &#160;if (supports_release_time_ &amp;&amp; per_packet_options_ != nullptr) {
 &#160;&#160;&#160;QuicTime next_release_time = sent_packet_manager_.GetNextReleaseTime();
 &#160;&#160;&#160;uint64_t release_time_delay_ns = 0;
 &#160;&#160;&#160;QuicTime now = packet_send_time;
 &#160;&#160;&#160;if (next_release_time &gt; now) {
 &#160;&#160;&#160;&#160;&#160;release_time_delay_ns = (next_release_time &#45; now).ToMicroseconds() * 1000;
 &#160;&#160;&#160;&#160;&#160;// Set packet_send_time to the future to make the RTT estimation accurate.
 &#160;&#160;&#160;&#160;&#160;packet_send_time = next_release_time;
 &#160;&#160;&#160;}
 &#160;&#160;&#160;per_packet_options_&#45;&gt;SetReleaseTimeDelay(release_time_delay_ns);
 &#160;}&#45;&gt; WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);</title>
<path fill="none" stroke="black" d="M1367.49,-2222.29C1368.65,-2212.07 1369.75,-2202.35 1370.75,-2193.49"/>
<polygon fill="black" stroke="black" points="1374.23,-2193.85 1371.87,-2183.52 1367.27,-2193.06 1374.23,-2193.85"/>
</g>
<!--  &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;} -->
<g id="node125" class="node"><title> &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1366" cy="-1926" rx="301.341" ry="143.585"/>
<text text-anchor="middle" x="1366" y="-2012.3" font-family="Times,serif" font-size="14.00"> &#160;if (result.status == WRITE_STATUS_BLOCKED) {</text>
<text text-anchor="middle" x="1366" y="-1997.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue</text>
<text text-anchor="middle" x="1366" y="-1982.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// trying to write when it will not be able to.</text>
<text text-anchor="middle" x="1366" y="-1967.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());</text>
<text text-anchor="middle" x="1366" y="-1952.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();</text>
<text text-anchor="middle" x="1366" y="-1937.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// If the socket buffers the data, then the packet should not</text>
<text text-anchor="middle" x="1366" y="-1922.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary</text>
<text text-anchor="middle" x="1366" y="-1907.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite</text>
<text text-anchor="middle" x="1366" y="-1892.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.</text>
<text text-anchor="middle" x="1366" y="-1877.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {</text>
<text text-anchor="middle" x="1366" y="-1862.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;return false;</text>
<text text-anchor="middle" x="1366" y="-1847.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="1366" y="-1832.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);&#45;&gt; &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;} -->
<g id="edge162" class="edge"><title> WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);&#45;&gt; &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;}</title>
<path fill="none" stroke="black" d="M1374.33,-2108.51C1373.93,-2099.88 1373.48,-2090.13 1373.01,-2079.75"/>
<polygon fill="black" stroke="black" points="1376.5,-2079.45 1372.54,-2069.62 1369.5,-2079.77 1376.5,-2079.45"/>
</g>
<!-- WriteResult QuicPerConnectionPacketWriter::WritePacket -->
<g id="node130" class="node"><title>WriteResult QuicPerConnectionPacketWriter::WritePacket</title>
<ellipse fill="none" stroke="black" cx="1973" cy="-1926" rx="220.471" ry="18"/>
<text text-anchor="middle" x="1973" y="-1922.3" font-family="Times,serif" font-size="14.00">WriteResult QuicPerConnectionPacketWriter::WritePacket</text>
</g>
<!--  WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);&#45;&gt;WriteResult QuicPerConnectionPacketWriter::WritePacket -->
<g id="edge168" class="edge"><title> WriteResult result = writer_&#45;&gt;WritePacket(
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;encrypted_buffer, encrypted_length, self_address().host(),
 &#160;&#160;&#160;&#160;&#160;peer_address(), per_packet_options_);&#45;&gt;WriteResult QuicPerConnectionPacketWriter::WritePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1546.68,-2112.74C1595.01,-2101.47 1647.19,-2087.23 1694,-2070 1785.07,-2036.48 1884.62,-1980.29 1936.66,-1949.26"/>
<polygon fill="black" stroke="black" points="1545.71,-2109.38 1536.75,-2115.03 1547.28,-2116.2 1545.71,-2109.38"/>
<polygon fill="black" stroke="black" points="1938.73,-1952.1 1945.51,-1943.96 1935.13,-1946.1 1938.73,-1952.1"/>
</g>
<!--  &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet)); -->
<g id="node126" class="node"><title> &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));</title>
<ellipse fill="none" stroke="black" cx="1359" cy="-1632" rx="301.402" ry="37.4533"/>
<text text-anchor="middle" x="1359" y="-1643.3" font-family="Times,serif" font-size="14.00"> &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(</text>
<text text-anchor="middle" x="1359" y="-1628.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,</text>
<text text-anchor="middle" x="1359" y="-1613.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));</text>
</g>
<!--  &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;}&#45;&gt; &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet)); -->
<g id="edge163" class="edge"><title> &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;// Ensure the writer is still write blocked, otherwise QUIC may continue
 &#160;&#160;&#160;// trying to write when it will not be able to.
 &#160;&#160;&#160;DCHECK(writer_&#45;&gt;IsWriteBlocked());
 &#160;&#160;&#160;visitor_&#45;&gt;OnWriteBlocked();
 &#160;&#160;&#160;// If the socket buffers the data, then the packet should not
 &#160;&#160;&#160;// be queued and sent again, which would result in an unnecessary
 &#160;&#160;&#160;// duplicate packet being sent. &#160;The helper must call OnCanWrite
 &#160;&#160;&#160;// when the write completes, and OnWriteError if an error occurs.
 &#160;&#160;&#160;if (!writer_&#45;&gt;IsWriteBlockedDataBuffered()) {
 &#160;&#160;&#160;&#160;&#160;return false;
 &#160;&#160;&#160;}
 &#160;}&#45;&gt; &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));</title>
<path fill="none" stroke="black" d="M1362.58,-1782.42C1361.69,-1745.32 1360.8,-1707.93 1360.12,-1679.83"/>
<polygon fill="black" stroke="black" points="1363.61,-1679.45 1359.88,-1669.53 1356.62,-1679.62 1363.61,-1679.45"/>
</g>
<!--  &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;} -->
<g id="node127" class="node"><title> &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1357" cy="-1434" rx="280.582" ry="37.4533"/>
<text text-anchor="middle" x="1357" y="-1445.3" font-family="Times,serif" font-size="14.00"> &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {</text>
<text text-anchor="middle" x="1357" y="-1430.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;SetRetransmissionAlarm();</text>
<text text-anchor="middle" x="1357" y="-1415.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));&#45;&gt; &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;} -->
<g id="edge164" class="edge"><title> &#160;bool reset_retransmission_alarm = sent_packet_manager_.OnPacketSent(
 &#160;&#160;&#160;&#160;&#160;packet, packet&#45;&gt;original_packet_number, packet_send_time,
 &#160;&#160;&#160;&#160;&#160;packet&#45;&gt;transmission_type, IsRetransmittable(*packet));&#45;&gt; &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;}</title>
<path fill="none" stroke="black" d="M1358.62,-1594.13C1358.3,-1562.38 1357.83,-1516.36 1357.48,-1481.97"/>
<polygon fill="black" stroke="black" points="1360.98,-1481.66 1357.37,-1471.7 1353.98,-1481.74 1360.98,-1481.66"/>
</g>
<!--  &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length())); -->
<g id="node128" class="node"><title> &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));</title>
<ellipse fill="none" stroke="black" cx="1357" cy="-1310" rx="323.283" ry="37.4533"/>
<text text-anchor="middle" x="1357" y="-1321.3" font-family="Times,serif" font-size="14.00"> &#160;packet_generator_.UpdatePacketNumberLength(</text>
<text text-anchor="middle" x="1357" y="-1306.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),</text>
<text text-anchor="middle" x="1357" y="-1291.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));</text>
</g>
<!--  &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;}&#45;&gt; &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length())); -->
<g id="edge165" class="edge"><title> &#160;if (reset_retransmission_alarm || !retransmission_alarm_&#45;&gt;IsSet()) {
 &#160;&#160;&#160;SetRetransmissionAlarm();
 &#160;}&#45;&gt; &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));</title>
<path fill="none" stroke="black" d="M1357,-1396.4C1357,-1384.21 1357,-1370.47 1357,-1357.63"/>
<polygon fill="black" stroke="black" points="1360.5,-1357.58 1357,-1347.58 1353.5,-1357.58 1360.5,-1357.58"/>
</g>
<!--  &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;} -->
<g id="node129" class="node"><title> &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="1285" cy="-1150" rx="265.248" ry="69.0935"/>
<text text-anchor="middle" x="1285" y="-1183.8" font-family="Times,serif" font-size="14.00"> &#160;stats_.bytes_sent += result.bytes_written;</text>
<text text-anchor="middle" x="1285" y="-1168.8" font-family="Times,serif" font-size="14.00"> &#160;++stats_.packets_sent;</text>
<text text-anchor="middle" x="1285" y="-1153.8" font-family="Times,serif" font-size="14.00"> &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {</text>
<text text-anchor="middle" x="1285" y="-1138.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;</text>
<text text-anchor="middle" x="1285" y="-1123.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;++stats_.packets_retransmitted;</text>
<text text-anchor="middle" x="1285" y="-1108.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));&#45;&gt; &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;} -->
<g id="edge166" class="edge"><title> &#160;packet_generator_.UpdatePacketNumberLength(
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.GetLeastUnacked(),
 &#160;&#160;&#160;&#160;&#160;sent_packet_manager_.EstimateMaxPacketsInFlight(max_packet_length()));&#45;&gt; &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;}</title>
<path fill="none" stroke="black" d="M1340.3,-1272.35C1334.31,-1259.22 1327.32,-1243.86 1320.35,-1228.58"/>
<polygon fill="black" stroke="black" points="1323.36,-1226.74 1316.03,-1219.1 1316.99,-1229.65 1323.36,-1226.74"/>
</g>
<!--  &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;}&#45;&gt;bool QuicConnection::WritePacket(SerializedPacket* packet) -->
<g id="edge167" class="edge"><title> &#160;stats_.bytes_sent += result.bytes_written;
 &#160;++stats_.packets_sent;
 &#160;if (packet&#45;&gt;transmission_type != NOT_RETRANSMISSION) {
 &#160;&#160;&#160;stats_.bytes_retransmitted += result.bytes_written;
 &#160;&#160;&#160;++stats_.packets_retransmitted;
 &#160;}&#45;&gt;bool QuicConnection::WritePacket(SerializedPacket* packet)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1097.15,-1199.05C1050.73,-1222.72 1014,-1257.67 1014,-1309 1014,-2090 1014,-2090 1014,-2090 1014,-2148.75 1009.4,-2163.3 1007,-2222 1000.68,-2376.6 997,-2415.27 997,-2570 997,-3132 997,-3132 997,-3132 997,-3195.4 1063.59,-3229.12 1124.8,-3246.72"/>
<polygon fill="black" stroke="black" points="1123.99,-3250.13 1134.56,-3249.41 1125.85,-3243.38 1123.99,-3250.13"/>
<text text-anchor="middle" x="1043" y="-2142.3" font-family="Times,serif" font-size="14.00">return true</text>
</g>
<!-- return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options) -->
<g id="node131" class="node"><title>return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options)</title>
<ellipse fill="none" stroke="black" cx="1973" cy="-1632" rx="266.93" ry="26.7407"/>
<text text-anchor="middle" x="1973" y="-1635.8" font-family="Times,serif" font-size="14.00">return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,</text>
<text text-anchor="middle" x="1973" y="-1620.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options)</text>
</g>
<!-- WriteResult QuicPerConnectionPacketWriter::WritePacket&#45;&gt;return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options) -->
<g id="edge169" class="edge"><title>WriteResult QuicPerConnectionPacketWriter::WritePacket&#45;&gt;return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options)</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1969.59,-1907.61C1965.6,-1861.07 1965.19,-1732.91 1968.35,-1669.51"/>
<polygon fill="black" stroke="black" points="1971.86,-1669.36 1968.94,-1659.18 1964.88,-1668.97 1971.86,-1669.36"/>
</g>
<!-- return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options)&#45;&gt;WriteResult QuicPerConnectionPacketWriter::WritePacket -->
<g id="edge170" class="edge"><title>return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options)&#45;&gt;WriteResult QuicPerConnectionPacketWriter::WritePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1977.06,-1659.18C1980.61,-1714.15 1980.64,-1841.12 1977.16,-1897.35"/>
<polygon fill="black" stroke="black" points="1973.65,-1897.38 1976.41,-1907.61 1980.63,-1897.89 1973.65,-1897.38"/>
</g>
<!-- WriteResult QuicDefaultPacketWriter::WritePacket -->
<g id="node132" class="node"><title>WriteResult QuicDefaultPacketWriter::WritePacket</title>
<ellipse fill="none" stroke="black" cx="1973" cy="-1434" rx="194.474" ry="18"/>
<text text-anchor="middle" x="1973" y="-1430.3" font-family="Times,serif" font-size="14.00">WriteResult QuicDefaultPacketWriter::WritePacket</text>
</g>
<!-- return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options)&#45;&gt;WriteResult QuicDefaultPacketWriter::WritePacket -->
<g id="edge171" class="edge"><title>return shared_writer_&#45;&gt;WritePacket(buffer, buf_len, self_address,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;peer_address, options)&#45;&gt;WriteResult QuicDefaultPacketWriter::WritePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1973,-1594.79C1973,-1556.53 1973,-1497.04 1973,-1462.46"/>
<polygon fill="black" stroke="black" points="1969.5,-1594.97 1973,-1604.97 1976.5,-1594.97 1969.5,-1594.97"/>
<polygon fill="black" stroke="black" points="1976.5,-1462.17 1973,-1452.17 1969.5,-1462.17 1976.5,-1462.17"/>
</g>
<!-- WriteResult result = QuicSocketUtils::WritePacket -->
<g id="node133" class="node"><title>WriteResult result = QuicSocketUtils::WritePacket</title>
<ellipse fill="none" stroke="black" cx="2001" cy="-1310" rx="192.075" ry="18"/>
<text text-anchor="middle" x="2001" y="-1306.3" font-family="Times,serif" font-size="14.00">WriteResult result = QuicSocketUtils::WritePacket</text>
</g>
<!-- WriteResult QuicDefaultPacketWriter::WritePacket&#45;&gt;WriteResult result = QuicSocketUtils::WritePacket -->
<g id="edge172" class="edge"><title>WriteResult QuicDefaultPacketWriter::WritePacket&#45;&gt;WriteResult result = QuicSocketUtils::WritePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1976.95,-1415.78C1981.6,-1395.52 1989.37,-1361.66 1994.82,-1337.93"/>
<polygon fill="black" stroke="black" points="1998.24,-1338.66 1997.07,-1328.13 1991.42,-1337.1 1998.24,-1338.66"/>
</g>
<!--  &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;write_blocked_ = true;
 &#160;&#160;&#160;} -->
<g id="node134" class="node"><title> &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;write_blocked_ = true;
 &#160;&#160;&#160;}</title>
<ellipse fill="none" stroke="black" cx="1950" cy="-1150" rx="223.169" ry="37.4533"/>
<text text-anchor="middle" x="1950" y="-1161.3" font-family="Times,serif" font-size="14.00"> &#160;if (result.status == WRITE_STATUS_BLOCKED) {</text>
<text text-anchor="middle" x="1950" y="-1146.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;write_blocked_ = true;</text>
<text text-anchor="middle" x="1950" y="-1131.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;}</text>
</g>
<!-- WriteResult result = QuicSocketUtils::WritePacket&#45;&gt; &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;write_blocked_ = true;
 &#160;&#160;&#160;} -->
<g id="edge173" class="edge"><title>WriteResult result = QuicSocketUtils::WritePacket&#45;&gt; &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;write_blocked_ = true;
 &#160;&#160;&#160;}</title>
<path fill="none" stroke="black" d="M1995.45,-1291.79C1988.17,-1269.25 1975.13,-1228.86 1964.88,-1197.11"/>
<polygon fill="black" stroke="black" points="1968.2,-1196 1961.8,-1187.56 1961.54,-1198.15 1968.2,-1196"/>
</g>
<!-- WriteResult QuicSocketUtils::WritePacket -->
<g id="node135" class="node"><title>WriteResult QuicSocketUtils::WritePacket</title>
<ellipse fill="none" stroke="black" cx="2380" cy="-1150" rx="163.203" ry="18"/>
<text text-anchor="middle" x="2380" y="-1146.3" font-family="Times,serif" font-size="14.00">WriteResult QuicSocketUtils::WritePacket</text>
</g>
<!-- WriteResult result = QuicSocketUtils::WritePacket&#45;&gt;WriteResult QuicSocketUtils::WritePacket -->
<g id="edge175" class="edge"><title>WriteResult result = QuicSocketUtils::WritePacket&#45;&gt;WriteResult QuicSocketUtils::WritePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2050.21,-1288.49C2122.96,-1258.16 2258.4,-1201.69 2331.02,-1171.42"/>
<polygon fill="black" stroke="black" points="2048.73,-1285.31 2040.84,-1292.39 2051.42,-1291.77 2048.73,-1285.31"/>
<polygon fill="black" stroke="black" points="2332.52,-1174.58 2340.41,-1167.51 2329.83,-1168.12 2332.52,-1174.58"/>
</g>
<!--  &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;write_blocked_ = true;
 &#160;&#160;&#160;}&#45;&gt;WriteResult QuicDefaultPacketWriter::WritePacket -->
<g id="edge174" class="edge"><title> &#160;if (result.status == WRITE_STATUS_BLOCKED) {
 &#160;&#160;&#160;write_blocked_ = true;
 &#160;&#160;&#160;}&#45;&gt;WriteResult QuicDefaultPacketWriter::WritePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M1844.77,-1183.12C1802.26,-1201.85 1757.52,-1230.25 1733,-1272 1715.89,-1301.13 1713.51,-1320.42 1733,-1348 1758.62,-1384.25 1801.07,-1405.14 1843.21,-1417.14"/>
<polygon fill="black" stroke="black" points="1842.48,-1420.57 1853.04,-1419.79 1844.3,-1413.81 1842.48,-1420.57"/>
<text text-anchor="middle" x="1766.5" y="-1306.3" font-family="Times,serif" font-size="14.00">return result</text>
</g>
<!--  &#160;sockaddr_storage raw_address = peer_address.generic_address();
 &#160;iovec iov = {const_cast&lt;char*&gt;(buffer), buf_len};

 &#160;msghdr hdr;
 &#160;hdr.msg_name = &amp;raw_address;
 &#160;hdr.msg_namelen = raw_address.ss_family == AF_INET ? sizeof(sockaddr_in)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: sizeof(sockaddr_in6);
 &#160;hdr.msg_iov = &iov;
 &#160;hdr.msg_iovlen = 1;
 &#160;hdr.msg_flags = 0; -->
<g id="node136" class="node"><title> &#160;sockaddr_storage raw_address = peer_address.generic_address();
 &#160;iovec iov = {const_cast&lt;char*&gt;(buffer), buf_len};

 &#160;msghdr hdr;
 &#160;hdr.msg_name = &amp;raw_address;
 &#160;hdr.msg_namelen = raw_address.ss_family == AF_INET ? sizeof(sockaddr_in)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: sizeof(sockaddr_in6);
 &#160;hdr.msg_iov = &iov;
 &#160;hdr.msg_iovlen = 1;
 &#160;hdr.msg_flags = 0;</title>
<ellipse fill="none" stroke="black" cx="2564" cy="-915" rx="326.525" ry="112.36"/>
<text text-anchor="middle" x="2564" y="-979.3" font-family="Times,serif" font-size="14.00"> &#160;sockaddr_storage raw_address = peer_address.generic_address();</text>
<text text-anchor="middle" x="2564" y="-964.3" font-family="Times,serif" font-size="14.00"> &#160;iovec iov = {const_cast&lt;char*&gt;(buffer), buf_len};</text>
<text text-anchor="middle" x="2564" y="-933.3" font-family="Times,serif" font-size="14.00"> &#160;msghdr hdr;</text>
<text text-anchor="middle" x="2564" y="-918.3" font-family="Times,serif" font-size="14.00"> &#160;hdr.msg_name = &amp;raw_address;</text>
<text text-anchor="middle" x="2564" y="-903.3" font-family="Times,serif" font-size="14.00"> &#160;hdr.msg_namelen = raw_address.ss_family == AF_INET ? sizeof(sockaddr_in)</text>
<text text-anchor="middle" x="2564" y="-888.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: sizeof(sockaddr_in6);</text>
<text text-anchor="middle" x="2564" y="-873.3" font-family="Times,serif" font-size="14.00"> &#160;hdr.msg_iov = &iov;</text>
<text text-anchor="middle" x="2564" y="-858.3" font-family="Times,serif" font-size="14.00"> &#160;hdr.msg_iovlen = 1;</text>
<text text-anchor="middle" x="2564" y="-843.3" font-family="Times,serif" font-size="14.00"> &#160;hdr.msg_flags = 0;</text>
</g>
<!-- WriteResult QuicSocketUtils::WritePacket&#45;&gt; &#160;sockaddr_storage raw_address = peer_address.generic_address();
 &#160;iovec iov = {const_cast&lt;char*&gt;(buffer), buf_len};

 &#160;msghdr hdr;
 &#160;hdr.msg_name = &amp;raw_address;
 &#160;hdr.msg_namelen = raw_address.ss_family == AF_INET ? sizeof(sockaddr_in)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: sizeof(sockaddr_in6);
 &#160;hdr.msg_iov = &iov;
 &#160;hdr.msg_iovlen = 1;
 &#160;hdr.msg_flags = 0; -->
<g id="edge176" class="edge"><title>WriteResult QuicSocketUtils::WritePacket&#45;&gt; &#160;sockaddr_storage raw_address = peer_address.generic_address();
 &#160;iovec iov = {const_cast&lt;char*&gt;(buffer), buf_len};

 &#160;msghdr hdr;
 &#160;hdr.msg_name = &amp;raw_address;
 &#160;hdr.msg_namelen = raw_address.ss_family == AF_INET ? sizeof(sockaddr_in)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: sizeof(sockaddr_in6);
 &#160;hdr.msg_iov = &iov;
 &#160;hdr.msg_iovlen = 1;
 &#160;hdr.msg_flags = 0;</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2393.53,-1131.87C2410.61,-1110.23 2441.52,-1071.1 2472.37,-1032.03"/>
<polygon fill="black" stroke="black" points="2475.49,-1033.72 2478.94,-1023.71 2470,-1029.38 2475.49,-1033.72"/>
</g>
<!--  &#160;const int kSpaceForIpv4 = CMSG_SPACE(sizeof(in_pktinfo));
 &#160;const int kSpaceForIpv6 = CMSG_SPACE(sizeof(in6_pktinfo));
 &#160;// kSpaceForIp should be big enough to hold both IPv4 and IPv6 packet info.
 &#160;const int kSpaceForIp =
 &#160;&#160;&#160;&#160;&#160;(kSpaceForIpv4 &lt; kSpaceForIpv6) ? kSpaceForIpv6 : kSpaceForIpv4;
 &#160;char cbuf[kSpaceForIp]; -->
<g id="node137" class="node"><title> &#160;const int kSpaceForIpv4 = CMSG_SPACE(sizeof(in_pktinfo));
 &#160;const int kSpaceForIpv6 = CMSG_SPACE(sizeof(in6_pktinfo));
 &#160;// kSpaceForIp should be big enough to hold both IPv4 and IPv6 packet info.
 &#160;const int kSpaceForIp =
 &#160;&#160;&#160;&#160;&#160;(kSpaceForIpv4 &lt; kSpaceForIpv6) ? kSpaceForIpv6 : kSpaceForIpv4;
 &#160;char cbuf[kSpaceForIp];</title>
<ellipse fill="none" stroke="black" cx="2555" cy="-694" rx="314.494" ry="69.0935"/>
<text text-anchor="middle" x="2555" y="-727.8" font-family="Times,serif" font-size="14.00"> &#160;const int kSpaceForIpv4 = CMSG_SPACE(sizeof(in_pktinfo));</text>
<text text-anchor="middle" x="2555" y="-712.8" font-family="Times,serif" font-size="14.00"> &#160;const int kSpaceForIpv6 = CMSG_SPACE(sizeof(in6_pktinfo));</text>
<text text-anchor="middle" x="2555" y="-697.8" font-family="Times,serif" font-size="14.00"> &#160;// kSpaceForIp should be big enough to hold both IPv4 and IPv6 packet info.</text>
<text text-anchor="middle" x="2555" y="-682.8" font-family="Times,serif" font-size="14.00"> &#160;const int kSpaceForIp =</text>
<text text-anchor="middle" x="2555" y="-667.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;(kSpaceForIpv4 &lt; kSpaceForIpv6) ? kSpaceForIpv6 : kSpaceForIpv4;</text>
<text text-anchor="middle" x="2555" y="-652.8" font-family="Times,serif" font-size="14.00"> &#160;char cbuf[kSpaceForIp];</text>
</g>
<!--  &#160;sockaddr_storage raw_address = peer_address.generic_address();
 &#160;iovec iov = {const_cast&lt;char*&gt;(buffer), buf_len};

 &#160;msghdr hdr;
 &#160;hdr.msg_name = &amp;raw_address;
 &#160;hdr.msg_namelen = raw_address.ss_family == AF_INET ? sizeof(sockaddr_in)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: sizeof(sockaddr_in6);
 &#160;hdr.msg_iov = &iov;
 &#160;hdr.msg_iovlen = 1;
 &#160;hdr.msg_flags = 0;&#45;&gt; &#160;const int kSpaceForIpv4 = CMSG_SPACE(sizeof(in_pktinfo));
 &#160;const int kSpaceForIpv6 = CMSG_SPACE(sizeof(in6_pktinfo));
 &#160;// kSpaceForIp should be big enough to hold both IPv4 and IPv6 packet info.
 &#160;const int kSpaceForIp =
 &#160;&#160;&#160;&#160;&#160;(kSpaceForIpv4 &lt; kSpaceForIpv6) ? kSpaceForIpv6 : kSpaceForIpv4;
 &#160;char cbuf[kSpaceForIp]; -->
<g id="edge177" class="edge"><title> &#160;sockaddr_storage raw_address = peer_address.generic_address();
 &#160;iovec iov = {const_cast&lt;char*&gt;(buffer), buf_len};

 &#160;msghdr hdr;
 &#160;hdr.msg_name = &amp;raw_address;
 &#160;hdr.msg_namelen = raw_address.ss_family == AF_INET ? sizeof(sockaddr_in)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: sizeof(sockaddr_in6);
 &#160;hdr.msg_iov = &iov;
 &#160;hdr.msg_iovlen = 1;
 &#160;hdr.msg_flags = 0;&#45;&gt; &#160;const int kSpaceForIpv4 = CMSG_SPACE(sizeof(in_pktinfo));
 &#160;const int kSpaceForIpv6 = CMSG_SPACE(sizeof(in6_pktinfo));
 &#160;// kSpaceForIp should be big enough to hold both IPv4 and IPv6 packet info.
 &#160;const int kSpaceForIp =
 &#160;&#160;&#160;&#160;&#160;(kSpaceForIpv4 &lt; kSpaceForIpv6) ? kSpaceForIpv6 : kSpaceForIpv4;
 &#160;char cbuf[kSpaceForIp];</title>
<path fill="none" stroke="black" d="M2559.42,-802.575C2559.02,-792.798 2558.62,-783.041 2558.23,-773.616"/>
<polygon fill="black" stroke="black" points="2561.72,-773.383 2557.82,-763.535 2554.73,-773.67 2561.72,-773.383"/>
</g>
<!--  &#160;if (!self_address.IsInitialized()) {
 &#160;&#160;&#160;hdr.msg_control = nullptr;
 &#160;&#160;&#160;hdr.msg_controllen = 0;
 &#160;} else {
 &#160;&#160;&#160;hdr.msg_control = cbuf;
 &#160;&#160;&#160;hdr.msg_controllen = kSpaceForIp;
 &#160;&#160;&#160;cmsghdr* cmsg = CMSG_FIRSTHDR(&amp;hdr);
 &#160;&#160;&#160;SetIpInfoInCmsg(self_address, cmsg);
 &#160;&#160;&#160;hdr.msg_controllen = cmsg&#45;&gt;cmsg_len;
 &#160;} -->
<g id="node138" class="node"><title> &#160;if (!self_address.IsInitialized()) {
 &#160;&#160;&#160;hdr.msg_control = nullptr;
 &#160;&#160;&#160;hdr.msg_controllen = 0;
 &#160;} else {
 &#160;&#160;&#160;hdr.msg_control = cbuf;
 &#160;&#160;&#160;hdr.msg_controllen = kSpaceForIp;
 &#160;&#160;&#160;cmsghdr* cmsg = CMSG_FIRSTHDR(&amp;hdr);
 &#160;&#160;&#160;SetIpInfoInCmsg(self_address, cmsg);
 &#160;&#160;&#160;hdr.msg_controllen = cmsg&#45;&gt;cmsg_len;
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="2532" cy="-474" rx="202.41" ry="111.946"/>
<text text-anchor="middle" x="2532" y="-537.8" font-family="Times,serif" font-size="14.00"> &#160;if (!self_address.IsInitialized()) {</text>
<text text-anchor="middle" x="2532" y="-522.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;hdr.msg_control = nullptr;</text>
<text text-anchor="middle" x="2532" y="-507.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;hdr.msg_controllen = 0;</text>
<text text-anchor="middle" x="2532" y="-492.8" font-family="Times,serif" font-size="14.00"> &#160;} else {</text>
<text text-anchor="middle" x="2532" y="-477.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;hdr.msg_control = cbuf;</text>
<text text-anchor="middle" x="2532" y="-462.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;hdr.msg_controllen = kSpaceForIp;</text>
<text text-anchor="middle" x="2532" y="-447.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;cmsghdr* cmsg = CMSG_FIRSTHDR(&amp;hdr);</text>
<text text-anchor="middle" x="2532" y="-432.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;SetIpInfoInCmsg(self_address, cmsg);</text>
<text text-anchor="middle" x="2532" y="-417.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;hdr.msg_controllen = cmsg&#45;&gt;cmsg_len;</text>
<text text-anchor="middle" x="2532" y="-402.8" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;const int kSpaceForIpv4 = CMSG_SPACE(sizeof(in_pktinfo));
 &#160;const int kSpaceForIpv6 = CMSG_SPACE(sizeof(in6_pktinfo));
 &#160;// kSpaceForIp should be big enough to hold both IPv4 and IPv6 packet info.
 &#160;const int kSpaceForIp =
 &#160;&#160;&#160;&#160;&#160;(kSpaceForIpv4 &lt; kSpaceForIpv6) ? kSpaceForIpv6 : kSpaceForIpv4;
 &#160;char cbuf[kSpaceForIp];&#45;&gt; &#160;if (!self_address.IsInitialized()) {
 &#160;&#160;&#160;hdr.msg_control = nullptr;
 &#160;&#160;&#160;hdr.msg_controllen = 0;
 &#160;} else {
 &#160;&#160;&#160;hdr.msg_control = cbuf;
 &#160;&#160;&#160;hdr.msg_controllen = kSpaceForIp;
 &#160;&#160;&#160;cmsghdr* cmsg = CMSG_FIRSTHDR(&amp;hdr);
 &#160;&#160;&#160;SetIpInfoInCmsg(self_address, cmsg);
 &#160;&#160;&#160;hdr.msg_controllen = cmsg&#45;&gt;cmsg_len;
 &#160;} -->
<g id="edge178" class="edge"><title> &#160;const int kSpaceForIpv4 = CMSG_SPACE(sizeof(in_pktinfo));
 &#160;const int kSpaceForIpv6 = CMSG_SPACE(sizeof(in6_pktinfo));
 &#160;// kSpaceForIp should be big enough to hold both IPv4 and IPv6 packet info.
 &#160;const int kSpaceForIp =
 &#160;&#160;&#160;&#160;&#160;(kSpaceForIpv4 &lt; kSpaceForIpv6) ? kSpaceForIpv6 : kSpaceForIpv4;
 &#160;char cbuf[kSpaceForIp];&#45;&gt; &#160;if (!self_address.IsInitialized()) {
 &#160;&#160;&#160;hdr.msg_control = nullptr;
 &#160;&#160;&#160;hdr.msg_controllen = 0;
 &#160;} else {
 &#160;&#160;&#160;hdr.msg_control = cbuf;
 &#160;&#160;&#160;hdr.msg_controllen = kSpaceForIp;
 &#160;&#160;&#160;cmsghdr* cmsg = CMSG_FIRSTHDR(&amp;hdr);
 &#160;&#160;&#160;SetIpInfoInCmsg(self_address, cmsg);
 &#160;&#160;&#160;hdr.msg_controllen = cmsg&#45;&gt;cmsg_len;
 &#160;}</title>
<path fill="none" stroke="black" d="M2547.79,-624.622C2546.82,-615.447 2545.8,-605.824 2544.77,-596.07"/>
<polygon fill="black" stroke="black" points="2548.23,-595.45 2543.7,-585.872 2541.27,-596.184 2548.23,-595.45"/>
</g>
<!--  &#160;int rc; 
 &#160;do {
 &#160;&#160;&#160;rc = sendmsg(fd, &amp;hdr, 0); 
 &#160;} while (rc &lt; 0 &amp;&amp; errno == EINTR);
 &#160;if (rc &gt;= 0) {
 &#160;&#160;&#160;return WriteResult(WRITE_STATUS_OK, rc);
 &#160;} -->
<g id="node139" class="node"><title> &#160;int rc; 
 &#160;do {
 &#160;&#160;&#160;rc = sendmsg(fd, &amp;hdr, 0); 
 &#160;} while (rc &lt; 0 &amp;&amp; errno == EINTR);
 &#160;if (rc &gt;= 0) {
 &#160;&#160;&#160;return WriteResult(WRITE_STATUS_OK, rc);
 &#160;}</title>
<ellipse fill="none" stroke="black" cx="2515" cy="-230" rx="206.213" ry="79.8062"/>
<text text-anchor="middle" x="2515" y="-271.3" font-family="Times,serif" font-size="14.00"> &#160;int rc; </text>
<text text-anchor="middle" x="2515" y="-256.3" font-family="Times,serif" font-size="14.00"> &#160;do {</text>
<text text-anchor="middle" x="2515" y="-241.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;rc = sendmsg(fd, &amp;hdr, 0); </text>
<text text-anchor="middle" x="2515" y="-226.3" font-family="Times,serif" font-size="14.00"> &#160;} while (rc &lt; 0 &amp;&amp; errno == EINTR);</text>
<text text-anchor="middle" x="2515" y="-211.3" font-family="Times,serif" font-size="14.00"> &#160;if (rc &gt;= 0) {</text>
<text text-anchor="middle" x="2515" y="-196.3" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;return WriteResult(WRITE_STATUS_OK, rc);</text>
<text text-anchor="middle" x="2515" y="-181.3" font-family="Times,serif" font-size="14.00"> &#160;}</text>
</g>
<!--  &#160;if (!self_address.IsInitialized()) {
 &#160;&#160;&#160;hdr.msg_control = nullptr;
 &#160;&#160;&#160;hdr.msg_controllen = 0;
 &#160;} else {
 &#160;&#160;&#160;hdr.msg_control = cbuf;
 &#160;&#160;&#160;hdr.msg_controllen = kSpaceForIp;
 &#160;&#160;&#160;cmsghdr* cmsg = CMSG_FIRSTHDR(&amp;hdr);
 &#160;&#160;&#160;SetIpInfoInCmsg(self_address, cmsg);
 &#160;&#160;&#160;hdr.msg_controllen = cmsg&#45;&gt;cmsg_len;
 &#160;}&#45;&gt; &#160;int rc; 
 &#160;do {
 &#160;&#160;&#160;rc = sendmsg(fd, &amp;hdr, 0); 
 &#160;} while (rc &lt; 0 &amp;&amp; errno == EINTR);
 &#160;if (rc &gt;= 0) {
 &#160;&#160;&#160;return WriteResult(WRITE_STATUS_OK, rc);
 &#160;} -->
<g id="edge179" class="edge"><title> &#160;if (!self_address.IsInitialized()) {
 &#160;&#160;&#160;hdr.msg_control = nullptr;
 &#160;&#160;&#160;hdr.msg_controllen = 0;
 &#160;} else {
 &#160;&#160;&#160;hdr.msg_control = cbuf;
 &#160;&#160;&#160;hdr.msg_controllen = kSpaceForIp;
 &#160;&#160;&#160;cmsghdr* cmsg = CMSG_FIRSTHDR(&amp;hdr);
 &#160;&#160;&#160;SetIpInfoInCmsg(self_address, cmsg);
 &#160;&#160;&#160;hdr.msg_controllen = cmsg&#45;&gt;cmsg_len;
 &#160;}&#45;&gt; &#160;int rc; 
 &#160;do {
 &#160;&#160;&#160;rc = sendmsg(fd, &amp;hdr, 0); 
 &#160;} while (rc &lt; 0 &amp;&amp; errno == EINTR);
 &#160;if (rc &gt;= 0) {
 &#160;&#160;&#160;return WriteResult(WRITE_STATUS_OK, rc);
 &#160;}</title>
<path fill="none" stroke="black" d="M2524.22,-362.269C2523.23,-348.186 2522.23,-333.916 2521.27,-320.23"/>
<polygon fill="black" stroke="black" points="2524.73,-319.621 2520.54,-309.891 2517.75,-320.111 2524.73,-319.621"/>
</g>
<!--  &#160;return WriteResult((errno == EAGAIN || errno == EWOULDBLOCK)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? WRITE_STATUS_BLOCKED
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: WRITE_STATUS_ERROR,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errno); -->
<g id="node140" class="node"><title> &#160;return WriteResult((errno == EAGAIN || errno == EWOULDBLOCK)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? WRITE_STATUS_BLOCKED
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: WRITE_STATUS_ERROR,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errno);</title>
<ellipse fill="none" stroke="black" cx="2511" cy="-64" rx="293.174" ry="48.1667"/>
<text text-anchor="middle" x="2511" y="-82.8" font-family="Times,serif" font-size="14.00"> &#160;return WriteResult((errno == EAGAIN || errno == EWOULDBLOCK)</text>
<text text-anchor="middle" x="2511" y="-67.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? WRITE_STATUS_BLOCKED</text>
<text text-anchor="middle" x="2511" y="-52.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: WRITE_STATUS_ERROR,</text>
<text text-anchor="middle" x="2511" y="-37.8" font-family="Times,serif" font-size="14.00"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errno);</text>
</g>
<!--  &#160;int rc; 
 &#160;do {
 &#160;&#160;&#160;rc = sendmsg(fd, &amp;hdr, 0); 
 &#160;} while (rc &lt; 0 &amp;&amp; errno == EINTR);
 &#160;if (rc &gt;= 0) {
 &#160;&#160;&#160;return WriteResult(WRITE_STATUS_OK, rc);
 &#160;}&#45;&gt; &#160;return WriteResult((errno == EAGAIN || errno == EWOULDBLOCK)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? WRITE_STATUS_BLOCKED
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: WRITE_STATUS_ERROR,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errno); -->
<g id="edge180" class="edge"><title> &#160;int rc; 
 &#160;do {
 &#160;&#160;&#160;rc = sendmsg(fd, &amp;hdr, 0); 
 &#160;} while (rc &lt; 0 &amp;&amp; errno == EINTR);
 &#160;if (rc &gt;= 0) {
 &#160;&#160;&#160;return WriteResult(WRITE_STATUS_OK, rc);
 &#160;}&#45;&gt; &#160;return WriteResult((errno == EAGAIN || errno == EWOULDBLOCK)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? WRITE_STATUS_BLOCKED
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: WRITE_STATUS_ERROR,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errno);</title>
<path fill="none" stroke="black" d="M2513.07,-149.882C2512.85,-140.698 2512.62,-131.466 2512.41,-122.647"/>
<polygon fill="black" stroke="black" points="2515.9,-122.423 2512.16,-112.511 2508.9,-122.594 2515.9,-122.423"/>
</g>
<!--  &#160;return WriteResult((errno == EAGAIN || errno == EWOULDBLOCK)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? WRITE_STATUS_BLOCKED
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: WRITE_STATUS_ERROR,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errno);&#45;&gt;WriteResult QuicSocketUtils::WritePacket -->
<g id="edge181" class="edge"><title> &#160;return WriteResult((errno == EAGAIN || errno == EWOULDBLOCK)
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;? WRITE_STATUS_BLOCKED
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;: WRITE_STATUS_ERROR,
 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errno);&#45;&gt;WriteResult QuicSocketUtils::WritePacket</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M2332.12,-102.27C2271.12,-126.296 2218,-165.459 2218,-229 2218,-916 2218,-916 2218,-916 2218,-965.976 2204.31,-983.993 2228,-1028 2252.24,-1073.04 2301.1,-1107.18 2336.91,-1127.53"/>
<polygon fill="black" stroke="black" points="2335.26,-1130.62 2345.7,-1132.4 2338.65,-1124.49 2335.26,-1130.62"/>
</g>
</g>
</svg>
